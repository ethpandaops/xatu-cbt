// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for admin_cbt

package clickhouse

import (
	"fmt"
)

// BuildListAdminCbtQuery constructs a parameterized SQL query from a ListAdminCbtRequest
func BuildListAdminCbtQuery(req *ListAdminCbtRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.Database == nil {
		return SQLQuery{}, fmt.Errorf("primary key field database is required")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.Database.Filter.(type) {
	case *StringFilter_Eq:
		qb.AddCondition("database", "=", filter.Eq)
	case *StringFilter_Ne:
		qb.AddCondition("database", "!=", filter.Ne)
	case *StringFilter_Contains:
		qb.AddLikeCondition("database", "%" + filter.Contains + "%")
	case *StringFilter_StartsWith:
		qb.AddLikeCondition("database", filter.StartsWith + "%")
	case *StringFilter_EndsWith:
		qb.AddLikeCondition("database", "%" + filter.EndsWith)
	case *StringFilter_Like:
		qb.AddLikeCondition("database", filter.Like)
	case *StringFilter_NotLike:
		qb.AddNotLikeCondition("database", filter.NotLike)
	case *StringFilter_In:
		if len(filter.In.Values) > 0 {
			qb.AddInCondition("database", StringSliceToInterface(filter.In.Values))
		}
	case *StringFilter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			qb.AddNotInCondition("database", StringSliceToInterface(filter.NotIn.Values))
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("updated_date_time", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("updated_date_time", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("updated_date_time", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("updated_date_time", filter.Between.Min, filter.Between.Max)
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("updated_date_time", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("updated_date_time", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: table
	if req.Table != nil {
		switch filter := req.Table.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("table", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("table", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("table", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("table", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("table", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("table", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("table", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("table", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("table", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: position
	if req.Position != nil {
		switch filter := req.Position.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("position", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("position", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("position", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("position", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("position", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("position", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("position", filter.Between.Min, filter.Between.Max)
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("position", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("position", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: interval
	if req.Interval != nil {
		switch filter := req.Interval.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("interval", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("interval", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("interval", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("interval", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("interval", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("interval", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("interval", filter.Between.Min, filter.Between.Max)
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("interval", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("interval", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "database", "table", "position", "interval"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY database" + ", `table`" + ", position"
	}

	// Build column list
	columns := []string{"updated_date_time", "database", "table", "position", "interval"}

	return BuildParameterizedQuery("admin_cbt", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetAdminCbtQuery constructs a parameterized SQL query from a GetAdminCbtRequest
func BuildGetAdminCbtQuery(req *GetAdminCbtRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.Database == "" {
		return SQLQuery{}, fmt.Errorf("primary key field database is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("database", "=", req.Database)

	// Build ORDER BY clause
	orderByClause := " ORDER BY database, `table`, position"

	// Build column list
	columns := []string{"updated_date_time", "database", "table", "position", "interval"}

	// Return single record
	return BuildParameterizedQuery("admin_cbt", columns, qb, orderByClause, 1, 0, options...)
}
