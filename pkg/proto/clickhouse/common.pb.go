// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: common.proto

package clickhouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SortOrder defines the order of results
type SortOrder int32

const (
	SortOrder_ASC  SortOrder = 0
	SortOrder_DESC SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	SortOrder_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

// UInt32Filter represents filtering options for non-nullable uint32 values
type UInt32Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*UInt32Filter_Eq
	//	*UInt32Filter_Ne
	//	*UInt32Filter_Lt
	//	*UInt32Filter_Lte
	//	*UInt32Filter_Gt
	//	*UInt32Filter_Gte
	//	*UInt32Filter_Between
	//	*UInt32Filter_In
	//	*UInt32Filter_NotIn
	Filter isUInt32Filter_Filter `protobuf_oneof:"filter"`
}

func (x *UInt32Filter) Reset() {
	*x = UInt32Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt32Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32Filter) ProtoMessage() {}

func (x *UInt32Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32Filter.ProtoReflect.Descriptor instead.
func (*UInt32Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (m *UInt32Filter) GetFilter() isUInt32Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *UInt32Filter) GetEq() uint32 {
	if x, ok := x.GetFilter().(*UInt32Filter_Eq); ok {
		return x.Eq
	}
	return 0
}

func (x *UInt32Filter) GetNe() uint32 {
	if x, ok := x.GetFilter().(*UInt32Filter_Ne); ok {
		return x.Ne
	}
	return 0
}

func (x *UInt32Filter) GetLt() uint32 {
	if x, ok := x.GetFilter().(*UInt32Filter_Lt); ok {
		return x.Lt
	}
	return 0
}

func (x *UInt32Filter) GetLte() uint32 {
	if x, ok := x.GetFilter().(*UInt32Filter_Lte); ok {
		return x.Lte
	}
	return 0
}

func (x *UInt32Filter) GetGt() uint32 {
	if x, ok := x.GetFilter().(*UInt32Filter_Gt); ok {
		return x.Gt
	}
	return 0
}

func (x *UInt32Filter) GetGte() uint32 {
	if x, ok := x.GetFilter().(*UInt32Filter_Gte); ok {
		return x.Gte
	}
	return 0
}

func (x *UInt32Filter) GetBetween() *UInt32Range {
	if x, ok := x.GetFilter().(*UInt32Filter_Between); ok {
		return x.Between
	}
	return nil
}

func (x *UInt32Filter) GetIn() *UInt32List {
	if x, ok := x.GetFilter().(*UInt32Filter_In); ok {
		return x.In
	}
	return nil
}

func (x *UInt32Filter) GetNotIn() *UInt32List {
	if x, ok := x.GetFilter().(*UInt32Filter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

type isUInt32Filter_Filter interface {
	isUInt32Filter_Filter()
}

type UInt32Filter_Eq struct {
	Eq uint32 `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type UInt32Filter_Ne struct {
	Ne uint32 `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type UInt32Filter_Lt struct {
	Lt uint32 `protobuf:"varint,3,opt,name=lt,proto3,oneof"` // Less than value
}

type UInt32Filter_Lte struct {
	Lte uint32 `protobuf:"varint,4,opt,name=lte,proto3,oneof"` // Less than or equal to value
}

type UInt32Filter_Gt struct {
	Gt uint32 `protobuf:"varint,5,opt,name=gt,proto3,oneof"` // Greater than value
}

type UInt32Filter_Gte struct {
	Gte uint32 `protobuf:"varint,6,opt,name=gte,proto3,oneof"` // Greater than or equal to value
}

type UInt32Filter_Between struct {
	Between *UInt32Range `protobuf:"bytes,7,opt,name=between,proto3,oneof"` // Between min and max (inclusive)
}

type UInt32Filter_In struct {
	In *UInt32List `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type UInt32Filter_NotIn struct {
	NotIn *UInt32List `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

func (*UInt32Filter_Eq) isUInt32Filter_Filter() {}

func (*UInt32Filter_Ne) isUInt32Filter_Filter() {}

func (*UInt32Filter_Lt) isUInt32Filter_Filter() {}

func (*UInt32Filter_Lte) isUInt32Filter_Filter() {}

func (*UInt32Filter_Gt) isUInt32Filter_Filter() {}

func (*UInt32Filter_Gte) isUInt32Filter_Filter() {}

func (*UInt32Filter_Between) isUInt32Filter_Filter() {}

func (*UInt32Filter_In) isUInt32Filter_Filter() {}

func (*UInt32Filter_NotIn) isUInt32Filter_Filter() {}

// NullableUInt32Filter represents filtering options for nullable uint32 values
type NullableUInt32Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*NullableUInt32Filter_Eq
	//	*NullableUInt32Filter_Ne
	//	*NullableUInt32Filter_Lt
	//	*NullableUInt32Filter_Lte
	//	*NullableUInt32Filter_Gt
	//	*NullableUInt32Filter_Gte
	//	*NullableUInt32Filter_Between
	//	*NullableUInt32Filter_In
	//	*NullableUInt32Filter_NotIn
	//	*NullableUInt32Filter_IsNull
	//	*NullableUInt32Filter_IsNotNull
	Filter isNullableUInt32Filter_Filter `protobuf_oneof:"filter"`
}

func (x *NullableUInt32Filter) Reset() {
	*x = NullableUInt32Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableUInt32Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableUInt32Filter) ProtoMessage() {}

func (x *NullableUInt32Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableUInt32Filter.ProtoReflect.Descriptor instead.
func (*NullableUInt32Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (m *NullableUInt32Filter) GetFilter() isNullableUInt32Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *NullableUInt32Filter) GetEq() uint32 {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_Eq); ok {
		return x.Eq
	}
	return 0
}

func (x *NullableUInt32Filter) GetNe() uint32 {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_Ne); ok {
		return x.Ne
	}
	return 0
}

func (x *NullableUInt32Filter) GetLt() uint32 {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_Lt); ok {
		return x.Lt
	}
	return 0
}

func (x *NullableUInt32Filter) GetLte() uint32 {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_Lte); ok {
		return x.Lte
	}
	return 0
}

func (x *NullableUInt32Filter) GetGt() uint32 {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_Gt); ok {
		return x.Gt
	}
	return 0
}

func (x *NullableUInt32Filter) GetGte() uint32 {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_Gte); ok {
		return x.Gte
	}
	return 0
}

func (x *NullableUInt32Filter) GetBetween() *UInt32Range {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_Between); ok {
		return x.Between
	}
	return nil
}

func (x *NullableUInt32Filter) GetIn() *UInt32List {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_In); ok {
		return x.In
	}
	return nil
}

func (x *NullableUInt32Filter) GetNotIn() *UInt32List {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

func (x *NullableUInt32Filter) GetIsNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_IsNull); ok {
		return x.IsNull
	}
	return nil
}

func (x *NullableUInt32Filter) GetIsNotNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableUInt32Filter_IsNotNull); ok {
		return x.IsNotNull
	}
	return nil
}

type isNullableUInt32Filter_Filter interface {
	isNullableUInt32Filter_Filter()
}

type NullableUInt32Filter_Eq struct {
	Eq uint32 `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type NullableUInt32Filter_Ne struct {
	Ne uint32 `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type NullableUInt32Filter_Lt struct {
	Lt uint32 `protobuf:"varint,3,opt,name=lt,proto3,oneof"` // Less than value
}

type NullableUInt32Filter_Lte struct {
	Lte uint32 `protobuf:"varint,4,opt,name=lte,proto3,oneof"` // Less than or equal to value
}

type NullableUInt32Filter_Gt struct {
	Gt uint32 `protobuf:"varint,5,opt,name=gt,proto3,oneof"` // Greater than value
}

type NullableUInt32Filter_Gte struct {
	Gte uint32 `protobuf:"varint,6,opt,name=gte,proto3,oneof"` // Greater than or equal to value
}

type NullableUInt32Filter_Between struct {
	Between *UInt32Range `protobuf:"bytes,7,opt,name=between,proto3,oneof"` // Between min and max (inclusive)
}

type NullableUInt32Filter_In struct {
	In *UInt32List `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type NullableUInt32Filter_NotIn struct {
	NotIn *UInt32List `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

type NullableUInt32Filter_IsNull struct {
	IsNull *emptypb.Empty `protobuf:"bytes,10,opt,name=is_null,json=isNull,proto3,oneof"` // IS NULL check
}

type NullableUInt32Filter_IsNotNull struct {
	IsNotNull *emptypb.Empty `protobuf:"bytes,11,opt,name=is_not_null,json=isNotNull,proto3,oneof"` // IS NOT NULL check
}

func (*NullableUInt32Filter_Eq) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_Ne) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_Lt) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_Lte) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_Gt) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_Gte) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_Between) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_In) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_NotIn) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_IsNull) isNullableUInt32Filter_Filter() {}

func (*NullableUInt32Filter_IsNotNull) isNullableUInt32Filter_Filter() {}

// UInt32Range represents a range of uint32 values
type UInt32Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min uint32                  `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"` // If not set, matches exact value (min)
}

func (x *UInt32Range) Reset() {
	*x = UInt32Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt32Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32Range) ProtoMessage() {}

func (x *UInt32Range) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32Range.ProtoReflect.Descriptor instead.
func (*UInt32Range) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *UInt32Range) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *UInt32Range) GetMax() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Max
	}
	return nil
}

// UInt32List represents a list of uint32 values
type UInt32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *UInt32List) Reset() {
	*x = UInt32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32List) ProtoMessage() {}

func (x *UInt32List) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32List.ProtoReflect.Descriptor instead.
func (*UInt32List) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *UInt32List) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// UInt64Filter represents filtering options for non-nullable uint64 values
type UInt64Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*UInt64Filter_Eq
	//	*UInt64Filter_Ne
	//	*UInt64Filter_Lt
	//	*UInt64Filter_Lte
	//	*UInt64Filter_Gt
	//	*UInt64Filter_Gte
	//	*UInt64Filter_Between
	//	*UInt64Filter_In
	//	*UInt64Filter_NotIn
	Filter isUInt64Filter_Filter `protobuf_oneof:"filter"`
}

func (x *UInt64Filter) Reset() {
	*x = UInt64Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt64Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64Filter) ProtoMessage() {}

func (x *UInt64Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64Filter.ProtoReflect.Descriptor instead.
func (*UInt64Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (m *UInt64Filter) GetFilter() isUInt64Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *UInt64Filter) GetEq() uint64 {
	if x, ok := x.GetFilter().(*UInt64Filter_Eq); ok {
		return x.Eq
	}
	return 0
}

func (x *UInt64Filter) GetNe() uint64 {
	if x, ok := x.GetFilter().(*UInt64Filter_Ne); ok {
		return x.Ne
	}
	return 0
}

func (x *UInt64Filter) GetLt() uint64 {
	if x, ok := x.GetFilter().(*UInt64Filter_Lt); ok {
		return x.Lt
	}
	return 0
}

func (x *UInt64Filter) GetLte() uint64 {
	if x, ok := x.GetFilter().(*UInt64Filter_Lte); ok {
		return x.Lte
	}
	return 0
}

func (x *UInt64Filter) GetGt() uint64 {
	if x, ok := x.GetFilter().(*UInt64Filter_Gt); ok {
		return x.Gt
	}
	return 0
}

func (x *UInt64Filter) GetGte() uint64 {
	if x, ok := x.GetFilter().(*UInt64Filter_Gte); ok {
		return x.Gte
	}
	return 0
}

func (x *UInt64Filter) GetBetween() *UInt64Range {
	if x, ok := x.GetFilter().(*UInt64Filter_Between); ok {
		return x.Between
	}
	return nil
}

func (x *UInt64Filter) GetIn() *UInt64List {
	if x, ok := x.GetFilter().(*UInt64Filter_In); ok {
		return x.In
	}
	return nil
}

func (x *UInt64Filter) GetNotIn() *UInt64List {
	if x, ok := x.GetFilter().(*UInt64Filter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

type isUInt64Filter_Filter interface {
	isUInt64Filter_Filter()
}

type UInt64Filter_Eq struct {
	Eq uint64 `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type UInt64Filter_Ne struct {
	Ne uint64 `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type UInt64Filter_Lt struct {
	Lt uint64 `protobuf:"varint,3,opt,name=lt,proto3,oneof"` // Less than value
}

type UInt64Filter_Lte struct {
	Lte uint64 `protobuf:"varint,4,opt,name=lte,proto3,oneof"` // Less than or equal to value
}

type UInt64Filter_Gt struct {
	Gt uint64 `protobuf:"varint,5,opt,name=gt,proto3,oneof"` // Greater than value
}

type UInt64Filter_Gte struct {
	Gte uint64 `protobuf:"varint,6,opt,name=gte,proto3,oneof"` // Greater than or equal to value
}

type UInt64Filter_Between struct {
	Between *UInt64Range `protobuf:"bytes,7,opt,name=between,proto3,oneof"` // Between min and max (inclusive)
}

type UInt64Filter_In struct {
	In *UInt64List `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type UInt64Filter_NotIn struct {
	NotIn *UInt64List `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

func (*UInt64Filter_Eq) isUInt64Filter_Filter() {}

func (*UInt64Filter_Ne) isUInt64Filter_Filter() {}

func (*UInt64Filter_Lt) isUInt64Filter_Filter() {}

func (*UInt64Filter_Lte) isUInt64Filter_Filter() {}

func (*UInt64Filter_Gt) isUInt64Filter_Filter() {}

func (*UInt64Filter_Gte) isUInt64Filter_Filter() {}

func (*UInt64Filter_Between) isUInt64Filter_Filter() {}

func (*UInt64Filter_In) isUInt64Filter_Filter() {}

func (*UInt64Filter_NotIn) isUInt64Filter_Filter() {}

// NullableUInt64Filter represents filtering options for nullable uint64 values
type NullableUInt64Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*NullableUInt64Filter_Eq
	//	*NullableUInt64Filter_Ne
	//	*NullableUInt64Filter_Lt
	//	*NullableUInt64Filter_Lte
	//	*NullableUInt64Filter_Gt
	//	*NullableUInt64Filter_Gte
	//	*NullableUInt64Filter_Between
	//	*NullableUInt64Filter_In
	//	*NullableUInt64Filter_NotIn
	//	*NullableUInt64Filter_IsNull
	//	*NullableUInt64Filter_IsNotNull
	Filter isNullableUInt64Filter_Filter `protobuf_oneof:"filter"`
}

func (x *NullableUInt64Filter) Reset() {
	*x = NullableUInt64Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableUInt64Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableUInt64Filter) ProtoMessage() {}

func (x *NullableUInt64Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableUInt64Filter.ProtoReflect.Descriptor instead.
func (*NullableUInt64Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (m *NullableUInt64Filter) GetFilter() isNullableUInt64Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *NullableUInt64Filter) GetEq() uint64 {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_Eq); ok {
		return x.Eq
	}
	return 0
}

func (x *NullableUInt64Filter) GetNe() uint64 {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_Ne); ok {
		return x.Ne
	}
	return 0
}

func (x *NullableUInt64Filter) GetLt() uint64 {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_Lt); ok {
		return x.Lt
	}
	return 0
}

func (x *NullableUInt64Filter) GetLte() uint64 {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_Lte); ok {
		return x.Lte
	}
	return 0
}

func (x *NullableUInt64Filter) GetGt() uint64 {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_Gt); ok {
		return x.Gt
	}
	return 0
}

func (x *NullableUInt64Filter) GetGte() uint64 {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_Gte); ok {
		return x.Gte
	}
	return 0
}

func (x *NullableUInt64Filter) GetBetween() *UInt64Range {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_Between); ok {
		return x.Between
	}
	return nil
}

func (x *NullableUInt64Filter) GetIn() *UInt64List {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_In); ok {
		return x.In
	}
	return nil
}

func (x *NullableUInt64Filter) GetNotIn() *UInt64List {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

func (x *NullableUInt64Filter) GetIsNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_IsNull); ok {
		return x.IsNull
	}
	return nil
}

func (x *NullableUInt64Filter) GetIsNotNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableUInt64Filter_IsNotNull); ok {
		return x.IsNotNull
	}
	return nil
}

type isNullableUInt64Filter_Filter interface {
	isNullableUInt64Filter_Filter()
}

type NullableUInt64Filter_Eq struct {
	Eq uint64 `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type NullableUInt64Filter_Ne struct {
	Ne uint64 `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type NullableUInt64Filter_Lt struct {
	Lt uint64 `protobuf:"varint,3,opt,name=lt,proto3,oneof"` // Less than value
}

type NullableUInt64Filter_Lte struct {
	Lte uint64 `protobuf:"varint,4,opt,name=lte,proto3,oneof"` // Less than or equal to value
}

type NullableUInt64Filter_Gt struct {
	Gt uint64 `protobuf:"varint,5,opt,name=gt,proto3,oneof"` // Greater than value
}

type NullableUInt64Filter_Gte struct {
	Gte uint64 `protobuf:"varint,6,opt,name=gte,proto3,oneof"` // Greater than or equal to value
}

type NullableUInt64Filter_Between struct {
	Between *UInt64Range `protobuf:"bytes,7,opt,name=between,proto3,oneof"` // Between min and max (inclusive)
}

type NullableUInt64Filter_In struct {
	In *UInt64List `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type NullableUInt64Filter_NotIn struct {
	NotIn *UInt64List `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

type NullableUInt64Filter_IsNull struct {
	IsNull *emptypb.Empty `protobuf:"bytes,10,opt,name=is_null,json=isNull,proto3,oneof"` // IS NULL check
}

type NullableUInt64Filter_IsNotNull struct {
	IsNotNull *emptypb.Empty `protobuf:"bytes,11,opt,name=is_not_null,json=isNotNull,proto3,oneof"` // IS NOT NULL check
}

func (*NullableUInt64Filter_Eq) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_Ne) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_Lt) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_Lte) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_Gt) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_Gte) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_Between) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_In) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_NotIn) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_IsNull) isNullableUInt64Filter_Filter() {}

func (*NullableUInt64Filter_IsNotNull) isNullableUInt64Filter_Filter() {}

// UInt64Range represents a range of uint64 values
type UInt64Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min uint64                  `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *UInt64Range) Reset() {
	*x = UInt64Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt64Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64Range) ProtoMessage() {}

func (x *UInt64Range) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64Range.ProtoReflect.Descriptor instead.
func (*UInt64Range) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *UInt64Range) GetMin() uint64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *UInt64Range) GetMax() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

// UInt64List represents a list of uint64 values
type UInt64List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *UInt64List) Reset() {
	*x = UInt64List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt64List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64List) ProtoMessage() {}

func (x *UInt64List) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64List.ProtoReflect.Descriptor instead.
func (*UInt64List) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *UInt64List) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Int32Filter represents filtering options for non-nullable int32 values
type Int32Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*Int32Filter_Eq
	//	*Int32Filter_Ne
	//	*Int32Filter_Lt
	//	*Int32Filter_Lte
	//	*Int32Filter_Gt
	//	*Int32Filter_Gte
	//	*Int32Filter_Between
	//	*Int32Filter_In
	//	*Int32Filter_NotIn
	Filter isInt32Filter_Filter `protobuf_oneof:"filter"`
}

func (x *Int32Filter) Reset() {
	*x = Int32Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Filter) ProtoMessage() {}

func (x *Int32Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Filter.ProtoReflect.Descriptor instead.
func (*Int32Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (m *Int32Filter) GetFilter() isInt32Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *Int32Filter) GetEq() int32 {
	if x, ok := x.GetFilter().(*Int32Filter_Eq); ok {
		return x.Eq
	}
	return 0
}

func (x *Int32Filter) GetNe() int32 {
	if x, ok := x.GetFilter().(*Int32Filter_Ne); ok {
		return x.Ne
	}
	return 0
}

func (x *Int32Filter) GetLt() int32 {
	if x, ok := x.GetFilter().(*Int32Filter_Lt); ok {
		return x.Lt
	}
	return 0
}

func (x *Int32Filter) GetLte() int32 {
	if x, ok := x.GetFilter().(*Int32Filter_Lte); ok {
		return x.Lte
	}
	return 0
}

func (x *Int32Filter) GetGt() int32 {
	if x, ok := x.GetFilter().(*Int32Filter_Gt); ok {
		return x.Gt
	}
	return 0
}

func (x *Int32Filter) GetGte() int32 {
	if x, ok := x.GetFilter().(*Int32Filter_Gte); ok {
		return x.Gte
	}
	return 0
}

func (x *Int32Filter) GetBetween() *Int32Range {
	if x, ok := x.GetFilter().(*Int32Filter_Between); ok {
		return x.Between
	}
	return nil
}

func (x *Int32Filter) GetIn() *Int32List {
	if x, ok := x.GetFilter().(*Int32Filter_In); ok {
		return x.In
	}
	return nil
}

func (x *Int32Filter) GetNotIn() *Int32List {
	if x, ok := x.GetFilter().(*Int32Filter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

type isInt32Filter_Filter interface {
	isInt32Filter_Filter()
}

type Int32Filter_Eq struct {
	Eq int32 `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type Int32Filter_Ne struct {
	Ne int32 `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type Int32Filter_Lt struct {
	Lt int32 `protobuf:"varint,3,opt,name=lt,proto3,oneof"` // Less than value
}

type Int32Filter_Lte struct {
	Lte int32 `protobuf:"varint,4,opt,name=lte,proto3,oneof"` // Less than or equal to value
}

type Int32Filter_Gt struct {
	Gt int32 `protobuf:"varint,5,opt,name=gt,proto3,oneof"` // Greater than value
}

type Int32Filter_Gte struct {
	Gte int32 `protobuf:"varint,6,opt,name=gte,proto3,oneof"` // Greater than or equal to value
}

type Int32Filter_Between struct {
	Between *Int32Range `protobuf:"bytes,7,opt,name=between,proto3,oneof"` // Between min and max (inclusive)
}

type Int32Filter_In struct {
	In *Int32List `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type Int32Filter_NotIn struct {
	NotIn *Int32List `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

func (*Int32Filter_Eq) isInt32Filter_Filter() {}

func (*Int32Filter_Ne) isInt32Filter_Filter() {}

func (*Int32Filter_Lt) isInt32Filter_Filter() {}

func (*Int32Filter_Lte) isInt32Filter_Filter() {}

func (*Int32Filter_Gt) isInt32Filter_Filter() {}

func (*Int32Filter_Gte) isInt32Filter_Filter() {}

func (*Int32Filter_Between) isInt32Filter_Filter() {}

func (*Int32Filter_In) isInt32Filter_Filter() {}

func (*Int32Filter_NotIn) isInt32Filter_Filter() {}

// NullableInt32Filter represents filtering options for nullable int32 values
type NullableInt32Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*NullableInt32Filter_Eq
	//	*NullableInt32Filter_Ne
	//	*NullableInt32Filter_Lt
	//	*NullableInt32Filter_Lte
	//	*NullableInt32Filter_Gt
	//	*NullableInt32Filter_Gte
	//	*NullableInt32Filter_Between
	//	*NullableInt32Filter_In
	//	*NullableInt32Filter_NotIn
	//	*NullableInt32Filter_IsNull
	//	*NullableInt32Filter_IsNotNull
	Filter isNullableInt32Filter_Filter `protobuf_oneof:"filter"`
}

func (x *NullableInt32Filter) Reset() {
	*x = NullableInt32Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableInt32Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableInt32Filter) ProtoMessage() {}

func (x *NullableInt32Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableInt32Filter.ProtoReflect.Descriptor instead.
func (*NullableInt32Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (m *NullableInt32Filter) GetFilter() isNullableInt32Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *NullableInt32Filter) GetEq() int32 {
	if x, ok := x.GetFilter().(*NullableInt32Filter_Eq); ok {
		return x.Eq
	}
	return 0
}

func (x *NullableInt32Filter) GetNe() int32 {
	if x, ok := x.GetFilter().(*NullableInt32Filter_Ne); ok {
		return x.Ne
	}
	return 0
}

func (x *NullableInt32Filter) GetLt() int32 {
	if x, ok := x.GetFilter().(*NullableInt32Filter_Lt); ok {
		return x.Lt
	}
	return 0
}

func (x *NullableInt32Filter) GetLte() int32 {
	if x, ok := x.GetFilter().(*NullableInt32Filter_Lte); ok {
		return x.Lte
	}
	return 0
}

func (x *NullableInt32Filter) GetGt() int32 {
	if x, ok := x.GetFilter().(*NullableInt32Filter_Gt); ok {
		return x.Gt
	}
	return 0
}

func (x *NullableInt32Filter) GetGte() int32 {
	if x, ok := x.GetFilter().(*NullableInt32Filter_Gte); ok {
		return x.Gte
	}
	return 0
}

func (x *NullableInt32Filter) GetBetween() *Int32Range {
	if x, ok := x.GetFilter().(*NullableInt32Filter_Between); ok {
		return x.Between
	}
	return nil
}

func (x *NullableInt32Filter) GetIn() *Int32List {
	if x, ok := x.GetFilter().(*NullableInt32Filter_In); ok {
		return x.In
	}
	return nil
}

func (x *NullableInt32Filter) GetNotIn() *Int32List {
	if x, ok := x.GetFilter().(*NullableInt32Filter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

func (x *NullableInt32Filter) GetIsNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableInt32Filter_IsNull); ok {
		return x.IsNull
	}
	return nil
}

func (x *NullableInt32Filter) GetIsNotNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableInt32Filter_IsNotNull); ok {
		return x.IsNotNull
	}
	return nil
}

type isNullableInt32Filter_Filter interface {
	isNullableInt32Filter_Filter()
}

type NullableInt32Filter_Eq struct {
	Eq int32 `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type NullableInt32Filter_Ne struct {
	Ne int32 `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type NullableInt32Filter_Lt struct {
	Lt int32 `protobuf:"varint,3,opt,name=lt,proto3,oneof"` // Less than value
}

type NullableInt32Filter_Lte struct {
	Lte int32 `protobuf:"varint,4,opt,name=lte,proto3,oneof"` // Less than or equal to value
}

type NullableInt32Filter_Gt struct {
	Gt int32 `protobuf:"varint,5,opt,name=gt,proto3,oneof"` // Greater than value
}

type NullableInt32Filter_Gte struct {
	Gte int32 `protobuf:"varint,6,opt,name=gte,proto3,oneof"` // Greater than or equal to value
}

type NullableInt32Filter_Between struct {
	Between *Int32Range `protobuf:"bytes,7,opt,name=between,proto3,oneof"` // Between min and max (inclusive)
}

type NullableInt32Filter_In struct {
	In *Int32List `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type NullableInt32Filter_NotIn struct {
	NotIn *Int32List `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

type NullableInt32Filter_IsNull struct {
	IsNull *emptypb.Empty `protobuf:"bytes,10,opt,name=is_null,json=isNull,proto3,oneof"` // IS NULL check
}

type NullableInt32Filter_IsNotNull struct {
	IsNotNull *emptypb.Empty `protobuf:"bytes,11,opt,name=is_not_null,json=isNotNull,proto3,oneof"` // IS NOT NULL check
}

func (*NullableInt32Filter_Eq) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_Ne) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_Lt) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_Lte) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_Gt) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_Gte) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_Between) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_In) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_NotIn) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_IsNull) isNullableInt32Filter_Filter() {}

func (*NullableInt32Filter_IsNotNull) isNullableInt32Filter_Filter() {}

// Int32Range represents a range of int32 values
type Int32Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32                  `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Int32Range) Reset() {
	*x = Int32Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Range) ProtoMessage() {}

func (x *Int32Range) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Range.ProtoReflect.Descriptor instead.
func (*Int32Range) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *Int32Range) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Int32Range) GetMax() *wrapperspb.Int32Value {
	if x != nil {
		return x.Max
	}
	return nil
}

// Int32List represents a list of int32 values
type Int32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Int32List) Reset() {
	*x = Int32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32List) ProtoMessage() {}

func (x *Int32List) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32List.ProtoReflect.Descriptor instead.
func (*Int32List) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *Int32List) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Int64Filter represents filtering options for non-nullable int64 values
type Int64Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*Int64Filter_Eq
	//	*Int64Filter_Ne
	//	*Int64Filter_Lt
	//	*Int64Filter_Lte
	//	*Int64Filter_Gt
	//	*Int64Filter_Gte
	//	*Int64Filter_Between
	//	*Int64Filter_In
	//	*Int64Filter_NotIn
	Filter isInt64Filter_Filter `protobuf_oneof:"filter"`
}

func (x *Int64Filter) Reset() {
	*x = Int64Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Filter) ProtoMessage() {}

func (x *Int64Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Filter.ProtoReflect.Descriptor instead.
func (*Int64Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (m *Int64Filter) GetFilter() isInt64Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *Int64Filter) GetEq() int64 {
	if x, ok := x.GetFilter().(*Int64Filter_Eq); ok {
		return x.Eq
	}
	return 0
}

func (x *Int64Filter) GetNe() int64 {
	if x, ok := x.GetFilter().(*Int64Filter_Ne); ok {
		return x.Ne
	}
	return 0
}

func (x *Int64Filter) GetLt() int64 {
	if x, ok := x.GetFilter().(*Int64Filter_Lt); ok {
		return x.Lt
	}
	return 0
}

func (x *Int64Filter) GetLte() int64 {
	if x, ok := x.GetFilter().(*Int64Filter_Lte); ok {
		return x.Lte
	}
	return 0
}

func (x *Int64Filter) GetGt() int64 {
	if x, ok := x.GetFilter().(*Int64Filter_Gt); ok {
		return x.Gt
	}
	return 0
}

func (x *Int64Filter) GetGte() int64 {
	if x, ok := x.GetFilter().(*Int64Filter_Gte); ok {
		return x.Gte
	}
	return 0
}

func (x *Int64Filter) GetBetween() *Int64Range {
	if x, ok := x.GetFilter().(*Int64Filter_Between); ok {
		return x.Between
	}
	return nil
}

func (x *Int64Filter) GetIn() *Int64List {
	if x, ok := x.GetFilter().(*Int64Filter_In); ok {
		return x.In
	}
	return nil
}

func (x *Int64Filter) GetNotIn() *Int64List {
	if x, ok := x.GetFilter().(*Int64Filter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

type isInt64Filter_Filter interface {
	isInt64Filter_Filter()
}

type Int64Filter_Eq struct {
	Eq int64 `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type Int64Filter_Ne struct {
	Ne int64 `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type Int64Filter_Lt struct {
	Lt int64 `protobuf:"varint,3,opt,name=lt,proto3,oneof"` // Less than value
}

type Int64Filter_Lte struct {
	Lte int64 `protobuf:"varint,4,opt,name=lte,proto3,oneof"` // Less than or equal to value
}

type Int64Filter_Gt struct {
	Gt int64 `protobuf:"varint,5,opt,name=gt,proto3,oneof"` // Greater than value
}

type Int64Filter_Gte struct {
	Gte int64 `protobuf:"varint,6,opt,name=gte,proto3,oneof"` // Greater than or equal to value
}

type Int64Filter_Between struct {
	Between *Int64Range `protobuf:"bytes,7,opt,name=between,proto3,oneof"` // Between min and max (inclusive)
}

type Int64Filter_In struct {
	In *Int64List `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type Int64Filter_NotIn struct {
	NotIn *Int64List `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

func (*Int64Filter_Eq) isInt64Filter_Filter() {}

func (*Int64Filter_Ne) isInt64Filter_Filter() {}

func (*Int64Filter_Lt) isInt64Filter_Filter() {}

func (*Int64Filter_Lte) isInt64Filter_Filter() {}

func (*Int64Filter_Gt) isInt64Filter_Filter() {}

func (*Int64Filter_Gte) isInt64Filter_Filter() {}

func (*Int64Filter_Between) isInt64Filter_Filter() {}

func (*Int64Filter_In) isInt64Filter_Filter() {}

func (*Int64Filter_NotIn) isInt64Filter_Filter() {}

// NullableInt64Filter represents filtering options for nullable int64 values
type NullableInt64Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*NullableInt64Filter_Eq
	//	*NullableInt64Filter_Ne
	//	*NullableInt64Filter_Lt
	//	*NullableInt64Filter_Lte
	//	*NullableInt64Filter_Gt
	//	*NullableInt64Filter_Gte
	//	*NullableInt64Filter_Between
	//	*NullableInt64Filter_In
	//	*NullableInt64Filter_NotIn
	//	*NullableInt64Filter_IsNull
	//	*NullableInt64Filter_IsNotNull
	Filter isNullableInt64Filter_Filter `protobuf_oneof:"filter"`
}

func (x *NullableInt64Filter) Reset() {
	*x = NullableInt64Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableInt64Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableInt64Filter) ProtoMessage() {}

func (x *NullableInt64Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableInt64Filter.ProtoReflect.Descriptor instead.
func (*NullableInt64Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (m *NullableInt64Filter) GetFilter() isNullableInt64Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *NullableInt64Filter) GetEq() int64 {
	if x, ok := x.GetFilter().(*NullableInt64Filter_Eq); ok {
		return x.Eq
	}
	return 0
}

func (x *NullableInt64Filter) GetNe() int64 {
	if x, ok := x.GetFilter().(*NullableInt64Filter_Ne); ok {
		return x.Ne
	}
	return 0
}

func (x *NullableInt64Filter) GetLt() int64 {
	if x, ok := x.GetFilter().(*NullableInt64Filter_Lt); ok {
		return x.Lt
	}
	return 0
}

func (x *NullableInt64Filter) GetLte() int64 {
	if x, ok := x.GetFilter().(*NullableInt64Filter_Lte); ok {
		return x.Lte
	}
	return 0
}

func (x *NullableInt64Filter) GetGt() int64 {
	if x, ok := x.GetFilter().(*NullableInt64Filter_Gt); ok {
		return x.Gt
	}
	return 0
}

func (x *NullableInt64Filter) GetGte() int64 {
	if x, ok := x.GetFilter().(*NullableInt64Filter_Gte); ok {
		return x.Gte
	}
	return 0
}

func (x *NullableInt64Filter) GetBetween() *Int64Range {
	if x, ok := x.GetFilter().(*NullableInt64Filter_Between); ok {
		return x.Between
	}
	return nil
}

func (x *NullableInt64Filter) GetIn() *Int64List {
	if x, ok := x.GetFilter().(*NullableInt64Filter_In); ok {
		return x.In
	}
	return nil
}

func (x *NullableInt64Filter) GetNotIn() *Int64List {
	if x, ok := x.GetFilter().(*NullableInt64Filter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

func (x *NullableInt64Filter) GetIsNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableInt64Filter_IsNull); ok {
		return x.IsNull
	}
	return nil
}

func (x *NullableInt64Filter) GetIsNotNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableInt64Filter_IsNotNull); ok {
		return x.IsNotNull
	}
	return nil
}

type isNullableInt64Filter_Filter interface {
	isNullableInt64Filter_Filter()
}

type NullableInt64Filter_Eq struct {
	Eq int64 `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type NullableInt64Filter_Ne struct {
	Ne int64 `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type NullableInt64Filter_Lt struct {
	Lt int64 `protobuf:"varint,3,opt,name=lt,proto3,oneof"` // Less than value
}

type NullableInt64Filter_Lte struct {
	Lte int64 `protobuf:"varint,4,opt,name=lte,proto3,oneof"` // Less than or equal to value
}

type NullableInt64Filter_Gt struct {
	Gt int64 `protobuf:"varint,5,opt,name=gt,proto3,oneof"` // Greater than value
}

type NullableInt64Filter_Gte struct {
	Gte int64 `protobuf:"varint,6,opt,name=gte,proto3,oneof"` // Greater than or equal to value
}

type NullableInt64Filter_Between struct {
	Between *Int64Range `protobuf:"bytes,7,opt,name=between,proto3,oneof"` // Between min and max (inclusive)
}

type NullableInt64Filter_In struct {
	In *Int64List `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type NullableInt64Filter_NotIn struct {
	NotIn *Int64List `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

type NullableInt64Filter_IsNull struct {
	IsNull *emptypb.Empty `protobuf:"bytes,10,opt,name=is_null,json=isNull,proto3,oneof"` // IS NULL check
}

type NullableInt64Filter_IsNotNull struct {
	IsNotNull *emptypb.Empty `protobuf:"bytes,11,opt,name=is_not_null,json=isNotNull,proto3,oneof"` // IS NOT NULL check
}

func (*NullableInt64Filter_Eq) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_Ne) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_Lt) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_Lte) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_Gt) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_Gte) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_Between) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_In) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_NotIn) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_IsNull) isNullableInt64Filter_Filter() {}

func (*NullableInt64Filter_IsNotNull) isNullableInt64Filter_Filter() {}

// Int64Range represents a range of int64 values
type Int64Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int64                  `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Int64Range) Reset() {
	*x = Int64Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Range) ProtoMessage() {}

func (x *Int64Range) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Range.ProtoReflect.Descriptor instead.
func (*Int64Range) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *Int64Range) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Int64Range) GetMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

// Int64List represents a list of int64 values
type Int64List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Int64List) Reset() {
	*x = Int64List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64List) ProtoMessage() {}

func (x *Int64List) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64List.ProtoReflect.Descriptor instead.
func (*Int64List) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *Int64List) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// StringFilter represents filtering options for non-nullable string values
type StringFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*StringFilter_Eq
	//	*StringFilter_Ne
	//	*StringFilter_Contains
	//	*StringFilter_StartsWith
	//	*StringFilter_EndsWith
	//	*StringFilter_Like
	//	*StringFilter_NotLike
	//	*StringFilter_In
	//	*StringFilter_NotIn
	Filter isStringFilter_Filter `protobuf_oneof:"filter"`
}

func (x *StringFilter) Reset() {
	*x = StringFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFilter) ProtoMessage() {}

func (x *StringFilter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFilter.ProtoReflect.Descriptor instead.
func (*StringFilter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (m *StringFilter) GetFilter() isStringFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *StringFilter) GetEq() string {
	if x, ok := x.GetFilter().(*StringFilter_Eq); ok {
		return x.Eq
	}
	return ""
}

func (x *StringFilter) GetNe() string {
	if x, ok := x.GetFilter().(*StringFilter_Ne); ok {
		return x.Ne
	}
	return ""
}

func (x *StringFilter) GetContains() string {
	if x, ok := x.GetFilter().(*StringFilter_Contains); ok {
		return x.Contains
	}
	return ""
}

func (x *StringFilter) GetStartsWith() string {
	if x, ok := x.GetFilter().(*StringFilter_StartsWith); ok {
		return x.StartsWith
	}
	return ""
}

func (x *StringFilter) GetEndsWith() string {
	if x, ok := x.GetFilter().(*StringFilter_EndsWith); ok {
		return x.EndsWith
	}
	return ""
}

func (x *StringFilter) GetLike() string {
	if x, ok := x.GetFilter().(*StringFilter_Like); ok {
		return x.Like
	}
	return ""
}

func (x *StringFilter) GetNotLike() string {
	if x, ok := x.GetFilter().(*StringFilter_NotLike); ok {
		return x.NotLike
	}
	return ""
}

func (x *StringFilter) GetIn() *StringList {
	if x, ok := x.GetFilter().(*StringFilter_In); ok {
		return x.In
	}
	return nil
}

func (x *StringFilter) GetNotIn() *StringList {
	if x, ok := x.GetFilter().(*StringFilter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

type isStringFilter_Filter interface {
	isStringFilter_Filter()
}

type StringFilter_Eq struct {
	Eq string `protobuf:"bytes,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type StringFilter_Ne struct {
	Ne string `protobuf:"bytes,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type StringFilter_Contains struct {
	Contains string `protobuf:"bytes,3,opt,name=contains,proto3,oneof"` // Contains substring (SQL LIKE '%value%')
}

type StringFilter_StartsWith struct {
	StartsWith string `protobuf:"bytes,4,opt,name=starts_with,json=startsWith,proto3,oneof"` // Starts with prefix (SQL LIKE 'value%')
}

type StringFilter_EndsWith struct {
	EndsWith string `protobuf:"bytes,5,opt,name=ends_with,json=endsWith,proto3,oneof"` // Ends with suffix (SQL LIKE '%value')
}

type StringFilter_Like struct {
	Like string `protobuf:"bytes,6,opt,name=like,proto3,oneof"` // SQL LIKE pattern (% and _ wildcards)
}

type StringFilter_NotLike struct {
	NotLike string `protobuf:"bytes,7,opt,name=not_like,json=notLike,proto3,oneof"` // SQL NOT LIKE pattern
}

type StringFilter_In struct {
	In *StringList `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type StringFilter_NotIn struct {
	NotIn *StringList `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

func (*StringFilter_Eq) isStringFilter_Filter() {}

func (*StringFilter_Ne) isStringFilter_Filter() {}

func (*StringFilter_Contains) isStringFilter_Filter() {}

func (*StringFilter_StartsWith) isStringFilter_Filter() {}

func (*StringFilter_EndsWith) isStringFilter_Filter() {}

func (*StringFilter_Like) isStringFilter_Filter() {}

func (*StringFilter_NotLike) isStringFilter_Filter() {}

func (*StringFilter_In) isStringFilter_Filter() {}

func (*StringFilter_NotIn) isStringFilter_Filter() {}

// NullableStringFilter represents filtering options for nullable string values
type NullableStringFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*NullableStringFilter_Eq
	//	*NullableStringFilter_Ne
	//	*NullableStringFilter_Contains
	//	*NullableStringFilter_StartsWith
	//	*NullableStringFilter_EndsWith
	//	*NullableStringFilter_Like
	//	*NullableStringFilter_NotLike
	//	*NullableStringFilter_In
	//	*NullableStringFilter_NotIn
	//	*NullableStringFilter_IsNull
	//	*NullableStringFilter_IsNotNull
	Filter isNullableStringFilter_Filter `protobuf_oneof:"filter"`
}

func (x *NullableStringFilter) Reset() {
	*x = NullableStringFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableStringFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableStringFilter) ProtoMessage() {}

func (x *NullableStringFilter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableStringFilter.ProtoReflect.Descriptor instead.
func (*NullableStringFilter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (m *NullableStringFilter) GetFilter() isNullableStringFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *NullableStringFilter) GetEq() string {
	if x, ok := x.GetFilter().(*NullableStringFilter_Eq); ok {
		return x.Eq
	}
	return ""
}

func (x *NullableStringFilter) GetNe() string {
	if x, ok := x.GetFilter().(*NullableStringFilter_Ne); ok {
		return x.Ne
	}
	return ""
}

func (x *NullableStringFilter) GetContains() string {
	if x, ok := x.GetFilter().(*NullableStringFilter_Contains); ok {
		return x.Contains
	}
	return ""
}

func (x *NullableStringFilter) GetStartsWith() string {
	if x, ok := x.GetFilter().(*NullableStringFilter_StartsWith); ok {
		return x.StartsWith
	}
	return ""
}

func (x *NullableStringFilter) GetEndsWith() string {
	if x, ok := x.GetFilter().(*NullableStringFilter_EndsWith); ok {
		return x.EndsWith
	}
	return ""
}

func (x *NullableStringFilter) GetLike() string {
	if x, ok := x.GetFilter().(*NullableStringFilter_Like); ok {
		return x.Like
	}
	return ""
}

func (x *NullableStringFilter) GetNotLike() string {
	if x, ok := x.GetFilter().(*NullableStringFilter_NotLike); ok {
		return x.NotLike
	}
	return ""
}

func (x *NullableStringFilter) GetIn() *StringList {
	if x, ok := x.GetFilter().(*NullableStringFilter_In); ok {
		return x.In
	}
	return nil
}

func (x *NullableStringFilter) GetNotIn() *StringList {
	if x, ok := x.GetFilter().(*NullableStringFilter_NotIn); ok {
		return x.NotIn
	}
	return nil
}

func (x *NullableStringFilter) GetIsNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableStringFilter_IsNull); ok {
		return x.IsNull
	}
	return nil
}

func (x *NullableStringFilter) GetIsNotNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableStringFilter_IsNotNull); ok {
		return x.IsNotNull
	}
	return nil
}

type isNullableStringFilter_Filter interface {
	isNullableStringFilter_Filter()
}

type NullableStringFilter_Eq struct {
	Eq string `protobuf:"bytes,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type NullableStringFilter_Ne struct {
	Ne string `protobuf:"bytes,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type NullableStringFilter_Contains struct {
	Contains string `protobuf:"bytes,3,opt,name=contains,proto3,oneof"` // Contains substring (SQL LIKE '%value%')
}

type NullableStringFilter_StartsWith struct {
	StartsWith string `protobuf:"bytes,4,opt,name=starts_with,json=startsWith,proto3,oneof"` // Starts with prefix (SQL LIKE 'value%')
}

type NullableStringFilter_EndsWith struct {
	EndsWith string `protobuf:"bytes,5,opt,name=ends_with,json=endsWith,proto3,oneof"` // Ends with suffix (SQL LIKE '%value')
}

type NullableStringFilter_Like struct {
	Like string `protobuf:"bytes,6,opt,name=like,proto3,oneof"` // SQL LIKE pattern (% and _ wildcards)
}

type NullableStringFilter_NotLike struct {
	NotLike string `protobuf:"bytes,7,opt,name=not_like,json=notLike,proto3,oneof"` // SQL NOT LIKE pattern
}

type NullableStringFilter_In struct {
	In *StringList `protobuf:"bytes,8,opt,name=in,proto3,oneof"` // In list of values
}

type NullableStringFilter_NotIn struct {
	NotIn *StringList `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"` // Not in list of values
}

type NullableStringFilter_IsNull struct {
	IsNull *emptypb.Empty `protobuf:"bytes,10,opt,name=is_null,json=isNull,proto3,oneof"` // IS NULL check
}

type NullableStringFilter_IsNotNull struct {
	IsNotNull *emptypb.Empty `protobuf:"bytes,11,opt,name=is_not_null,json=isNotNull,proto3,oneof"` // IS NOT NULL check
}

func (*NullableStringFilter_Eq) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_Ne) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_Contains) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_StartsWith) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_EndsWith) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_Like) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_NotLike) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_In) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_NotIn) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_IsNull) isNullableStringFilter_Filter() {}

func (*NullableStringFilter_IsNotNull) isNullableStringFilter_Filter() {}

// StringList represents a list of string values
type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *StringList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// BoolFilter represents filtering options for non-nullable bool values
type BoolFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*BoolFilter_Eq
	//	*BoolFilter_Ne
	Filter isBoolFilter_Filter `protobuf_oneof:"filter"`
}

func (x *BoolFilter) Reset() {
	*x = BoolFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolFilter) ProtoMessage() {}

func (x *BoolFilter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolFilter.ProtoReflect.Descriptor instead.
func (*BoolFilter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (m *BoolFilter) GetFilter() isBoolFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *BoolFilter) GetEq() bool {
	if x, ok := x.GetFilter().(*BoolFilter_Eq); ok {
		return x.Eq
	}
	return false
}

func (x *BoolFilter) GetNe() bool {
	if x, ok := x.GetFilter().(*BoolFilter_Ne); ok {
		return x.Ne
	}
	return false
}

type isBoolFilter_Filter interface {
	isBoolFilter_Filter()
}

type BoolFilter_Eq struct {
	Eq bool `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type BoolFilter_Ne struct {
	Ne bool `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

func (*BoolFilter_Eq) isBoolFilter_Filter() {}

func (*BoolFilter_Ne) isBoolFilter_Filter() {}

// NullableBoolFilter represents filtering options for nullable bool values
type NullableBoolFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*NullableBoolFilter_Eq
	//	*NullableBoolFilter_Ne
	//	*NullableBoolFilter_IsNull
	//	*NullableBoolFilter_IsNotNull
	Filter isNullableBoolFilter_Filter `protobuf_oneof:"filter"`
}

func (x *NullableBoolFilter) Reset() {
	*x = NullableBoolFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableBoolFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableBoolFilter) ProtoMessage() {}

func (x *NullableBoolFilter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableBoolFilter.ProtoReflect.Descriptor instead.
func (*NullableBoolFilter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (m *NullableBoolFilter) GetFilter() isNullableBoolFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *NullableBoolFilter) GetEq() bool {
	if x, ok := x.GetFilter().(*NullableBoolFilter_Eq); ok {
		return x.Eq
	}
	return false
}

func (x *NullableBoolFilter) GetNe() bool {
	if x, ok := x.GetFilter().(*NullableBoolFilter_Ne); ok {
		return x.Ne
	}
	return false
}

func (x *NullableBoolFilter) GetIsNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableBoolFilter_IsNull); ok {
		return x.IsNull
	}
	return nil
}

func (x *NullableBoolFilter) GetIsNotNull() *emptypb.Empty {
	if x, ok := x.GetFilter().(*NullableBoolFilter_IsNotNull); ok {
		return x.IsNotNull
	}
	return nil
}

type isNullableBoolFilter_Filter interface {
	isNullableBoolFilter_Filter()
}

type NullableBoolFilter_Eq struct {
	Eq bool `protobuf:"varint,1,opt,name=eq,proto3,oneof"` // Equal to value
}

type NullableBoolFilter_Ne struct {
	Ne bool `protobuf:"varint,2,opt,name=ne,proto3,oneof"` // Not equal to value
}

type NullableBoolFilter_IsNull struct {
	IsNull *emptypb.Empty `protobuf:"bytes,3,opt,name=is_null,json=isNull,proto3,oneof"` // IS NULL check
}

type NullableBoolFilter_IsNotNull struct {
	IsNotNull *emptypb.Empty `protobuf:"bytes,4,opt,name=is_not_null,json=isNotNull,proto3,oneof"` // IS NOT NULL check
}

func (*NullableBoolFilter_Eq) isNullableBoolFilter_Filter() {}

func (*NullableBoolFilter_Ne) isNullableBoolFilter_Filter() {}

func (*NullableBoolFilter_IsNull) isNullableBoolFilter_Filter() {}

func (*NullableBoolFilter_IsNotNull) isNullableBoolFilter_Filter() {}

// MapKeyValueStringString represents a key-value pair filter for Map(String, String)
type MapKeyValueStringString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValueFilter *StringFilter `protobuf:"bytes,2,opt,name=value_filter,json=valueFilter,proto3" json:"value_filter,omitempty"`
}

func (x *MapKeyValueStringString) Reset() {
	*x = MapKeyValueStringString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapKeyValueStringString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKeyValueStringString) ProtoMessage() {}

func (x *MapKeyValueStringString) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKeyValueStringString.ProtoReflect.Descriptor instead.
func (*MapKeyValueStringString) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *MapKeyValueStringString) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapKeyValueStringString) GetValueFilter() *StringFilter {
	if x != nil {
		return x.ValueFilter
	}
	return nil
}

// MapStringStringFilter represents filtering options for Map(String, String) values
type MapStringStringFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*MapStringStringFilter_KeyValue
	//	*MapStringStringFilter_HasKey
	//	*MapStringStringFilter_NotHasKey
	//	*MapStringStringFilter_HasAnyKey
	//	*MapStringStringFilter_HasAllKeys
	Filter isMapStringStringFilter_Filter `protobuf_oneof:"filter"`
}

func (x *MapStringStringFilter) Reset() {
	*x = MapStringStringFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringStringFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringStringFilter) ProtoMessage() {}

func (x *MapStringStringFilter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringStringFilter.ProtoReflect.Descriptor instead.
func (*MapStringStringFilter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (m *MapStringStringFilter) GetFilter() isMapStringStringFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *MapStringStringFilter) GetKeyValue() *MapKeyValueStringString {
	if x, ok := x.GetFilter().(*MapStringStringFilter_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

func (x *MapStringStringFilter) GetHasKey() string {
	if x, ok := x.GetFilter().(*MapStringStringFilter_HasKey); ok {
		return x.HasKey
	}
	return ""
}

func (x *MapStringStringFilter) GetNotHasKey() string {
	if x, ok := x.GetFilter().(*MapStringStringFilter_NotHasKey); ok {
		return x.NotHasKey
	}
	return ""
}

func (x *MapStringStringFilter) GetHasAnyKey() *StringList {
	if x, ok := x.GetFilter().(*MapStringStringFilter_HasAnyKey); ok {
		return x.HasAnyKey
	}
	return nil
}

func (x *MapStringStringFilter) GetHasAllKeys() *StringList {
	if x, ok := x.GetFilter().(*MapStringStringFilter_HasAllKeys); ok {
		return x.HasAllKeys
	}
	return nil
}

type isMapStringStringFilter_Filter interface {
	isMapStringStringFilter_Filter()
}

type MapStringStringFilter_KeyValue struct {
	KeyValue *MapKeyValueStringString `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3,oneof"` // mapColumn['key'] op 'value'
}

type MapStringStringFilter_HasKey struct {
	HasKey string `protobuf:"bytes,2,opt,name=has_key,json=hasKey,proto3,oneof"` // mapContains(mapColumn, 'key')
}

type MapStringStringFilter_NotHasKey struct {
	NotHasKey string `protobuf:"bytes,3,opt,name=not_has_key,json=notHasKey,proto3,oneof"` // NOT mapContains(mapColumn, 'key')
}

type MapStringStringFilter_HasAnyKey struct {
	HasAnyKey *StringList `protobuf:"bytes,4,opt,name=has_any_key,json=hasAnyKey,proto3,oneof"` // mapContainsAny(mapColumn, ['k1', 'k2'])
}

type MapStringStringFilter_HasAllKeys struct {
	HasAllKeys *StringList `protobuf:"bytes,5,opt,name=has_all_keys,json=hasAllKeys,proto3,oneof"` // mapContainsAll(mapColumn, ['k1', 'k2'])
}

func (*MapStringStringFilter_KeyValue) isMapStringStringFilter_Filter() {}

func (*MapStringStringFilter_HasKey) isMapStringStringFilter_Filter() {}

func (*MapStringStringFilter_NotHasKey) isMapStringStringFilter_Filter() {}

func (*MapStringStringFilter_HasAnyKey) isMapStringStringFilter_Filter() {}

func (*MapStringStringFilter_HasAllKeys) isMapStringStringFilter_Filter() {}

// MapKeyValueStringUInt32 represents a key-value pair filter for Map(String, UInt32)
type MapKeyValueStringUInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValueFilter *UInt32Filter `protobuf:"bytes,2,opt,name=value_filter,json=valueFilter,proto3" json:"value_filter,omitempty"`
}

func (x *MapKeyValueStringUInt32) Reset() {
	*x = MapKeyValueStringUInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapKeyValueStringUInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKeyValueStringUInt32) ProtoMessage() {}

func (x *MapKeyValueStringUInt32) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKeyValueStringUInt32.ProtoReflect.Descriptor instead.
func (*MapKeyValueStringUInt32) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *MapKeyValueStringUInt32) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapKeyValueStringUInt32) GetValueFilter() *UInt32Filter {
	if x != nil {
		return x.ValueFilter
	}
	return nil
}

// MapStringUInt32Filter represents filtering options for Map(String, UInt32) values
type MapStringUInt32Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*MapStringUInt32Filter_KeyValue
	//	*MapStringUInt32Filter_HasKey
	//	*MapStringUInt32Filter_NotHasKey
	//	*MapStringUInt32Filter_HasAnyKey
	//	*MapStringUInt32Filter_HasAllKeys
	Filter isMapStringUInt32Filter_Filter `protobuf_oneof:"filter"`
}

func (x *MapStringUInt32Filter) Reset() {
	*x = MapStringUInt32Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringUInt32Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringUInt32Filter) ProtoMessage() {}

func (x *MapStringUInt32Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringUInt32Filter.ProtoReflect.Descriptor instead.
func (*MapStringUInt32Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (m *MapStringUInt32Filter) GetFilter() isMapStringUInt32Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *MapStringUInt32Filter) GetKeyValue() *MapKeyValueStringUInt32 {
	if x, ok := x.GetFilter().(*MapStringUInt32Filter_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

func (x *MapStringUInt32Filter) GetHasKey() string {
	if x, ok := x.GetFilter().(*MapStringUInt32Filter_HasKey); ok {
		return x.HasKey
	}
	return ""
}

func (x *MapStringUInt32Filter) GetNotHasKey() string {
	if x, ok := x.GetFilter().(*MapStringUInt32Filter_NotHasKey); ok {
		return x.NotHasKey
	}
	return ""
}

func (x *MapStringUInt32Filter) GetHasAnyKey() *StringList {
	if x, ok := x.GetFilter().(*MapStringUInt32Filter_HasAnyKey); ok {
		return x.HasAnyKey
	}
	return nil
}

func (x *MapStringUInt32Filter) GetHasAllKeys() *StringList {
	if x, ok := x.GetFilter().(*MapStringUInt32Filter_HasAllKeys); ok {
		return x.HasAllKeys
	}
	return nil
}

type isMapStringUInt32Filter_Filter interface {
	isMapStringUInt32Filter_Filter()
}

type MapStringUInt32Filter_KeyValue struct {
	KeyValue *MapKeyValueStringUInt32 `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3,oneof"` // mapColumn['key'] op value
}

type MapStringUInt32Filter_HasKey struct {
	HasKey string `protobuf:"bytes,2,opt,name=has_key,json=hasKey,proto3,oneof"` // mapContains(mapColumn, 'key')
}

type MapStringUInt32Filter_NotHasKey struct {
	NotHasKey string `protobuf:"bytes,3,opt,name=not_has_key,json=notHasKey,proto3,oneof"` // NOT mapContains(mapColumn, 'key')
}

type MapStringUInt32Filter_HasAnyKey struct {
	HasAnyKey *StringList `protobuf:"bytes,4,opt,name=has_any_key,json=hasAnyKey,proto3,oneof"` // mapContainsAny(mapColumn, ['k1', 'k2'])
}

type MapStringUInt32Filter_HasAllKeys struct {
	HasAllKeys *StringList `protobuf:"bytes,5,opt,name=has_all_keys,json=hasAllKeys,proto3,oneof"` // mapContainsAll(mapColumn, ['k1', 'k2'])
}

func (*MapStringUInt32Filter_KeyValue) isMapStringUInt32Filter_Filter() {}

func (*MapStringUInt32Filter_HasKey) isMapStringUInt32Filter_Filter() {}

func (*MapStringUInt32Filter_NotHasKey) isMapStringUInt32Filter_Filter() {}

func (*MapStringUInt32Filter_HasAnyKey) isMapStringUInt32Filter_Filter() {}

func (*MapStringUInt32Filter_HasAllKeys) isMapStringUInt32Filter_Filter() {}

// MapKeyValueStringInt32 represents a key-value pair filter for Map(String, Int32)
type MapKeyValueStringInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValueFilter *Int32Filter `protobuf:"bytes,2,opt,name=value_filter,json=valueFilter,proto3" json:"value_filter,omitempty"`
}

func (x *MapKeyValueStringInt32) Reset() {
	*x = MapKeyValueStringInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapKeyValueStringInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKeyValueStringInt32) ProtoMessage() {}

func (x *MapKeyValueStringInt32) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKeyValueStringInt32.ProtoReflect.Descriptor instead.
func (*MapKeyValueStringInt32) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *MapKeyValueStringInt32) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapKeyValueStringInt32) GetValueFilter() *Int32Filter {
	if x != nil {
		return x.ValueFilter
	}
	return nil
}

// MapStringInt32Filter represents filtering options for Map(String, Int32) values
type MapStringInt32Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*MapStringInt32Filter_KeyValue
	//	*MapStringInt32Filter_HasKey
	//	*MapStringInt32Filter_NotHasKey
	//	*MapStringInt32Filter_HasAnyKey
	//	*MapStringInt32Filter_HasAllKeys
	Filter isMapStringInt32Filter_Filter `protobuf_oneof:"filter"`
}

func (x *MapStringInt32Filter) Reset() {
	*x = MapStringInt32Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringInt32Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringInt32Filter) ProtoMessage() {}

func (x *MapStringInt32Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringInt32Filter.ProtoReflect.Descriptor instead.
func (*MapStringInt32Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (m *MapStringInt32Filter) GetFilter() isMapStringInt32Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *MapStringInt32Filter) GetKeyValue() *MapKeyValueStringInt32 {
	if x, ok := x.GetFilter().(*MapStringInt32Filter_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

func (x *MapStringInt32Filter) GetHasKey() string {
	if x, ok := x.GetFilter().(*MapStringInt32Filter_HasKey); ok {
		return x.HasKey
	}
	return ""
}

func (x *MapStringInt32Filter) GetNotHasKey() string {
	if x, ok := x.GetFilter().(*MapStringInt32Filter_NotHasKey); ok {
		return x.NotHasKey
	}
	return ""
}

func (x *MapStringInt32Filter) GetHasAnyKey() *StringList {
	if x, ok := x.GetFilter().(*MapStringInt32Filter_HasAnyKey); ok {
		return x.HasAnyKey
	}
	return nil
}

func (x *MapStringInt32Filter) GetHasAllKeys() *StringList {
	if x, ok := x.GetFilter().(*MapStringInt32Filter_HasAllKeys); ok {
		return x.HasAllKeys
	}
	return nil
}

type isMapStringInt32Filter_Filter interface {
	isMapStringInt32Filter_Filter()
}

type MapStringInt32Filter_KeyValue struct {
	KeyValue *MapKeyValueStringInt32 `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3,oneof"` // mapColumn['key'] op value
}

type MapStringInt32Filter_HasKey struct {
	HasKey string `protobuf:"bytes,2,opt,name=has_key,json=hasKey,proto3,oneof"` // mapContains(mapColumn, 'key')
}

type MapStringInt32Filter_NotHasKey struct {
	NotHasKey string `protobuf:"bytes,3,opt,name=not_has_key,json=notHasKey,proto3,oneof"` // NOT mapContains(mapColumn, 'key')
}

type MapStringInt32Filter_HasAnyKey struct {
	HasAnyKey *StringList `protobuf:"bytes,4,opt,name=has_any_key,json=hasAnyKey,proto3,oneof"` // mapContainsAny(mapColumn, ['k1', 'k2'])
}

type MapStringInt32Filter_HasAllKeys struct {
	HasAllKeys *StringList `protobuf:"bytes,5,opt,name=has_all_keys,json=hasAllKeys,proto3,oneof"` // mapContainsAll(mapColumn, ['k1', 'k2'])
}

func (*MapStringInt32Filter_KeyValue) isMapStringInt32Filter_Filter() {}

func (*MapStringInt32Filter_HasKey) isMapStringInt32Filter_Filter() {}

func (*MapStringInt32Filter_NotHasKey) isMapStringInt32Filter_Filter() {}

func (*MapStringInt32Filter_HasAnyKey) isMapStringInt32Filter_Filter() {}

func (*MapStringInt32Filter_HasAllKeys) isMapStringInt32Filter_Filter() {}

// MapKeyValueStringUInt64 represents a key-value pair filter for Map(String, UInt64)
type MapKeyValueStringUInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValueFilter *UInt64Filter `protobuf:"bytes,2,opt,name=value_filter,json=valueFilter,proto3" json:"value_filter,omitempty"`
}

func (x *MapKeyValueStringUInt64) Reset() {
	*x = MapKeyValueStringUInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapKeyValueStringUInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKeyValueStringUInt64) ProtoMessage() {}

func (x *MapKeyValueStringUInt64) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKeyValueStringUInt64.ProtoReflect.Descriptor instead.
func (*MapKeyValueStringUInt64) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *MapKeyValueStringUInt64) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapKeyValueStringUInt64) GetValueFilter() *UInt64Filter {
	if x != nil {
		return x.ValueFilter
	}
	return nil
}

// MapStringUInt64Filter represents filtering options for Map(String, UInt64) values
type MapStringUInt64Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*MapStringUInt64Filter_KeyValue
	//	*MapStringUInt64Filter_HasKey
	//	*MapStringUInt64Filter_NotHasKey
	//	*MapStringUInt64Filter_HasAnyKey
	//	*MapStringUInt64Filter_HasAllKeys
	Filter isMapStringUInt64Filter_Filter `protobuf_oneof:"filter"`
}

func (x *MapStringUInt64Filter) Reset() {
	*x = MapStringUInt64Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringUInt64Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringUInt64Filter) ProtoMessage() {}

func (x *MapStringUInt64Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringUInt64Filter.ProtoReflect.Descriptor instead.
func (*MapStringUInt64Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (m *MapStringUInt64Filter) GetFilter() isMapStringUInt64Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *MapStringUInt64Filter) GetKeyValue() *MapKeyValueStringUInt64 {
	if x, ok := x.GetFilter().(*MapStringUInt64Filter_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

func (x *MapStringUInt64Filter) GetHasKey() string {
	if x, ok := x.GetFilter().(*MapStringUInt64Filter_HasKey); ok {
		return x.HasKey
	}
	return ""
}

func (x *MapStringUInt64Filter) GetNotHasKey() string {
	if x, ok := x.GetFilter().(*MapStringUInt64Filter_NotHasKey); ok {
		return x.NotHasKey
	}
	return ""
}

func (x *MapStringUInt64Filter) GetHasAnyKey() *StringList {
	if x, ok := x.GetFilter().(*MapStringUInt64Filter_HasAnyKey); ok {
		return x.HasAnyKey
	}
	return nil
}

func (x *MapStringUInt64Filter) GetHasAllKeys() *StringList {
	if x, ok := x.GetFilter().(*MapStringUInt64Filter_HasAllKeys); ok {
		return x.HasAllKeys
	}
	return nil
}

type isMapStringUInt64Filter_Filter interface {
	isMapStringUInt64Filter_Filter()
}

type MapStringUInt64Filter_KeyValue struct {
	KeyValue *MapKeyValueStringUInt64 `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3,oneof"` // mapColumn['key'] op value
}

type MapStringUInt64Filter_HasKey struct {
	HasKey string `protobuf:"bytes,2,opt,name=has_key,json=hasKey,proto3,oneof"` // mapContains(mapColumn, 'key')
}

type MapStringUInt64Filter_NotHasKey struct {
	NotHasKey string `protobuf:"bytes,3,opt,name=not_has_key,json=notHasKey,proto3,oneof"` // NOT mapContains(mapColumn, 'key')
}

type MapStringUInt64Filter_HasAnyKey struct {
	HasAnyKey *StringList `protobuf:"bytes,4,opt,name=has_any_key,json=hasAnyKey,proto3,oneof"` // mapContainsAny(mapColumn, ['k1', 'k2'])
}

type MapStringUInt64Filter_HasAllKeys struct {
	HasAllKeys *StringList `protobuf:"bytes,5,opt,name=has_all_keys,json=hasAllKeys,proto3,oneof"` // mapContainsAll(mapColumn, ['k1', 'k2'])
}

func (*MapStringUInt64Filter_KeyValue) isMapStringUInt64Filter_Filter() {}

func (*MapStringUInt64Filter_HasKey) isMapStringUInt64Filter_Filter() {}

func (*MapStringUInt64Filter_NotHasKey) isMapStringUInt64Filter_Filter() {}

func (*MapStringUInt64Filter_HasAnyKey) isMapStringUInt64Filter_Filter() {}

func (*MapStringUInt64Filter_HasAllKeys) isMapStringUInt64Filter_Filter() {}

// MapKeyValueStringInt64 represents a key-value pair filter for Map(String, Int64)
type MapKeyValueStringInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValueFilter *Int64Filter `protobuf:"bytes,2,opt,name=value_filter,json=valueFilter,proto3" json:"value_filter,omitempty"`
}

func (x *MapKeyValueStringInt64) Reset() {
	*x = MapKeyValueStringInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapKeyValueStringInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKeyValueStringInt64) ProtoMessage() {}

func (x *MapKeyValueStringInt64) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKeyValueStringInt64.ProtoReflect.Descriptor instead.
func (*MapKeyValueStringInt64) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *MapKeyValueStringInt64) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapKeyValueStringInt64) GetValueFilter() *Int64Filter {
	if x != nil {
		return x.ValueFilter
	}
	return nil
}

// MapStringInt64Filter represents filtering options for Map(String, Int64) values
type MapStringInt64Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*MapStringInt64Filter_KeyValue
	//	*MapStringInt64Filter_HasKey
	//	*MapStringInt64Filter_NotHasKey
	//	*MapStringInt64Filter_HasAnyKey
	//	*MapStringInt64Filter_HasAllKeys
	Filter isMapStringInt64Filter_Filter `protobuf_oneof:"filter"`
}

func (x *MapStringInt64Filter) Reset() {
	*x = MapStringInt64Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringInt64Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringInt64Filter) ProtoMessage() {}

func (x *MapStringInt64Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringInt64Filter.ProtoReflect.Descriptor instead.
func (*MapStringInt64Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (m *MapStringInt64Filter) GetFilter() isMapStringInt64Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *MapStringInt64Filter) GetKeyValue() *MapKeyValueStringInt64 {
	if x, ok := x.GetFilter().(*MapStringInt64Filter_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

func (x *MapStringInt64Filter) GetHasKey() string {
	if x, ok := x.GetFilter().(*MapStringInt64Filter_HasKey); ok {
		return x.HasKey
	}
	return ""
}

func (x *MapStringInt64Filter) GetNotHasKey() string {
	if x, ok := x.GetFilter().(*MapStringInt64Filter_NotHasKey); ok {
		return x.NotHasKey
	}
	return ""
}

func (x *MapStringInt64Filter) GetHasAnyKey() *StringList {
	if x, ok := x.GetFilter().(*MapStringInt64Filter_HasAnyKey); ok {
		return x.HasAnyKey
	}
	return nil
}

func (x *MapStringInt64Filter) GetHasAllKeys() *StringList {
	if x, ok := x.GetFilter().(*MapStringInt64Filter_HasAllKeys); ok {
		return x.HasAllKeys
	}
	return nil
}

type isMapStringInt64Filter_Filter interface {
	isMapStringInt64Filter_Filter()
}

type MapStringInt64Filter_KeyValue struct {
	KeyValue *MapKeyValueStringInt64 `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3,oneof"` // mapColumn['key'] op value
}

type MapStringInt64Filter_HasKey struct {
	HasKey string `protobuf:"bytes,2,opt,name=has_key,json=hasKey,proto3,oneof"` // mapContains(mapColumn, 'key')
}

type MapStringInt64Filter_NotHasKey struct {
	NotHasKey string `protobuf:"bytes,3,opt,name=not_has_key,json=notHasKey,proto3,oneof"` // NOT mapContains(mapColumn, 'key')
}

type MapStringInt64Filter_HasAnyKey struct {
	HasAnyKey *StringList `protobuf:"bytes,4,opt,name=has_any_key,json=hasAnyKey,proto3,oneof"` // mapContainsAny(mapColumn, ['k1', 'k2'])
}

type MapStringInt64Filter_HasAllKeys struct {
	HasAllKeys *StringList `protobuf:"bytes,5,opt,name=has_all_keys,json=hasAllKeys,proto3,oneof"` // mapContainsAll(mapColumn, ['k1', 'k2'])
}

func (*MapStringInt64Filter_KeyValue) isMapStringInt64Filter_Filter() {}

func (*MapStringInt64Filter_HasKey) isMapStringInt64Filter_Filter() {}

func (*MapStringInt64Filter_NotHasKey) isMapStringInt64Filter_Filter() {}

func (*MapStringInt64Filter_HasAnyKey) isMapStringInt64Filter_Filter() {}

func (*MapStringInt64Filter_HasAllKeys) isMapStringInt64Filter_Filter() {}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x63, 0x62, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x83, 0x02, 0x0a, 0x0c, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x67,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x67, 0x74, 0x12, 0x12, 0x0a,
	0x03, 0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x67, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12,
	0x21, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf8, 0x02, 0x0a, 0x14, 0x4e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x02, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x67, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x67, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x67,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x21, 0x0a,
	0x02, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x38, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73,
	0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x4f, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x22, 0x24, 0x0a, 0x0a, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x0c, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x02, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x10, 0x0a,
	0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03,
	0x6c, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x02, 0x67, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x49, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf8,
	0x02, 0x0a, 0x14, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x02, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x02, 0x67, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x49, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x0b, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x24, 0x0a, 0x0a, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xff, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x67, 0x74, 0x12, 0x12, 0x0a, 0x03,
	0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x67, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x20, 0x0a,
	0x02, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12,
	0x27, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xf4, 0x02, 0x0a, 0x13, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x02,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x10,
	0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x03, 0x6c, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x02, 0x67, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x6e, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x49, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x0a, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x23, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xff, 0x01,
	0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x6e,
	0x65, 0x12, 0x10, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x02, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x67, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x67, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0xf4, 0x02, 0x0a, 0x13, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x02, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x02, 0x67, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12,
	0x31, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x23, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x0c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x65, 0x12,
	0x1c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x6b,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x4c, 0x69,
	0x6b, 0x65, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x42,
	0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x91, 0x03, 0x0a, 0x14, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x08,
	0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6e, 0x6f, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e,
	0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x24, 0x0a,
	0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x02, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0xaf, 0x01, 0x0a, 0x12, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x38, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73,
	0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x61, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x83, 0x02, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x68, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f,
	0x61, 0x6e, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x6e, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x17, 0x4d, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x83, 0x02,
	0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x6e,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x68,
	0x61, 0x73, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x81, 0x02, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x68, 0x61, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74,
	0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6e,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x68, 0x61, 0x73, 0x41, 0x6e, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x83, 0x02, 0x0a, 0x15,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4d,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x6e, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x5f, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x81, 0x02, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x48, 0x61,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x61,
	0x73, 0x41, 0x6e, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2a, 0x1e, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73,
	0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_common_proto_goTypes = []any{
	(SortOrder)(0),                  // 0: cbt.SortOrder
	(*UInt32Filter)(nil),            // 1: cbt.UInt32Filter
	(*NullableUInt32Filter)(nil),    // 2: cbt.NullableUInt32Filter
	(*UInt32Range)(nil),             // 3: cbt.UInt32Range
	(*UInt32List)(nil),              // 4: cbt.UInt32List
	(*UInt64Filter)(nil),            // 5: cbt.UInt64Filter
	(*NullableUInt64Filter)(nil),    // 6: cbt.NullableUInt64Filter
	(*UInt64Range)(nil),             // 7: cbt.UInt64Range
	(*UInt64List)(nil),              // 8: cbt.UInt64List
	(*Int32Filter)(nil),             // 9: cbt.Int32Filter
	(*NullableInt32Filter)(nil),     // 10: cbt.NullableInt32Filter
	(*Int32Range)(nil),              // 11: cbt.Int32Range
	(*Int32List)(nil),               // 12: cbt.Int32List
	(*Int64Filter)(nil),             // 13: cbt.Int64Filter
	(*NullableInt64Filter)(nil),     // 14: cbt.NullableInt64Filter
	(*Int64Range)(nil),              // 15: cbt.Int64Range
	(*Int64List)(nil),               // 16: cbt.Int64List
	(*StringFilter)(nil),            // 17: cbt.StringFilter
	(*NullableStringFilter)(nil),    // 18: cbt.NullableStringFilter
	(*StringList)(nil),              // 19: cbt.StringList
	(*BoolFilter)(nil),              // 20: cbt.BoolFilter
	(*NullableBoolFilter)(nil),      // 21: cbt.NullableBoolFilter
	(*MapKeyValueStringString)(nil), // 22: cbt.MapKeyValueStringString
	(*MapStringStringFilter)(nil),   // 23: cbt.MapStringStringFilter
	(*MapKeyValueStringUInt32)(nil), // 24: cbt.MapKeyValueStringUInt32
	(*MapStringUInt32Filter)(nil),   // 25: cbt.MapStringUInt32Filter
	(*MapKeyValueStringInt32)(nil),  // 26: cbt.MapKeyValueStringInt32
	(*MapStringInt32Filter)(nil),    // 27: cbt.MapStringInt32Filter
	(*MapKeyValueStringUInt64)(nil), // 28: cbt.MapKeyValueStringUInt64
	(*MapStringUInt64Filter)(nil),   // 29: cbt.MapStringUInt64Filter
	(*MapKeyValueStringInt64)(nil),  // 30: cbt.MapKeyValueStringInt64
	(*MapStringInt64Filter)(nil),    // 31: cbt.MapStringInt64Filter
	(*emptypb.Empty)(nil),           // 32: google.protobuf.Empty
	(*wrapperspb.UInt32Value)(nil),  // 33: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),  // 34: google.protobuf.UInt64Value
	(*wrapperspb.Int32Value)(nil),   // 35: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),   // 36: google.protobuf.Int64Value
}
var file_common_proto_depIdxs = []int32{
	3,  // 0: cbt.UInt32Filter.between:type_name -> cbt.UInt32Range
	4,  // 1: cbt.UInt32Filter.in:type_name -> cbt.UInt32List
	4,  // 2: cbt.UInt32Filter.not_in:type_name -> cbt.UInt32List
	3,  // 3: cbt.NullableUInt32Filter.between:type_name -> cbt.UInt32Range
	4,  // 4: cbt.NullableUInt32Filter.in:type_name -> cbt.UInt32List
	4,  // 5: cbt.NullableUInt32Filter.not_in:type_name -> cbt.UInt32List
	32, // 6: cbt.NullableUInt32Filter.is_null:type_name -> google.protobuf.Empty
	32, // 7: cbt.NullableUInt32Filter.is_not_null:type_name -> google.protobuf.Empty
	33, // 8: cbt.UInt32Range.max:type_name -> google.protobuf.UInt32Value
	7,  // 9: cbt.UInt64Filter.between:type_name -> cbt.UInt64Range
	8,  // 10: cbt.UInt64Filter.in:type_name -> cbt.UInt64List
	8,  // 11: cbt.UInt64Filter.not_in:type_name -> cbt.UInt64List
	7,  // 12: cbt.NullableUInt64Filter.between:type_name -> cbt.UInt64Range
	8,  // 13: cbt.NullableUInt64Filter.in:type_name -> cbt.UInt64List
	8,  // 14: cbt.NullableUInt64Filter.not_in:type_name -> cbt.UInt64List
	32, // 15: cbt.NullableUInt64Filter.is_null:type_name -> google.protobuf.Empty
	32, // 16: cbt.NullableUInt64Filter.is_not_null:type_name -> google.protobuf.Empty
	34, // 17: cbt.UInt64Range.max:type_name -> google.protobuf.UInt64Value
	11, // 18: cbt.Int32Filter.between:type_name -> cbt.Int32Range
	12, // 19: cbt.Int32Filter.in:type_name -> cbt.Int32List
	12, // 20: cbt.Int32Filter.not_in:type_name -> cbt.Int32List
	11, // 21: cbt.NullableInt32Filter.between:type_name -> cbt.Int32Range
	12, // 22: cbt.NullableInt32Filter.in:type_name -> cbt.Int32List
	12, // 23: cbt.NullableInt32Filter.not_in:type_name -> cbt.Int32List
	32, // 24: cbt.NullableInt32Filter.is_null:type_name -> google.protobuf.Empty
	32, // 25: cbt.NullableInt32Filter.is_not_null:type_name -> google.protobuf.Empty
	35, // 26: cbt.Int32Range.max:type_name -> google.protobuf.Int32Value
	15, // 27: cbt.Int64Filter.between:type_name -> cbt.Int64Range
	16, // 28: cbt.Int64Filter.in:type_name -> cbt.Int64List
	16, // 29: cbt.Int64Filter.not_in:type_name -> cbt.Int64List
	15, // 30: cbt.NullableInt64Filter.between:type_name -> cbt.Int64Range
	16, // 31: cbt.NullableInt64Filter.in:type_name -> cbt.Int64List
	16, // 32: cbt.NullableInt64Filter.not_in:type_name -> cbt.Int64List
	32, // 33: cbt.NullableInt64Filter.is_null:type_name -> google.protobuf.Empty
	32, // 34: cbt.NullableInt64Filter.is_not_null:type_name -> google.protobuf.Empty
	36, // 35: cbt.Int64Range.max:type_name -> google.protobuf.Int64Value
	19, // 36: cbt.StringFilter.in:type_name -> cbt.StringList
	19, // 37: cbt.StringFilter.not_in:type_name -> cbt.StringList
	19, // 38: cbt.NullableStringFilter.in:type_name -> cbt.StringList
	19, // 39: cbt.NullableStringFilter.not_in:type_name -> cbt.StringList
	32, // 40: cbt.NullableStringFilter.is_null:type_name -> google.protobuf.Empty
	32, // 41: cbt.NullableStringFilter.is_not_null:type_name -> google.protobuf.Empty
	32, // 42: cbt.NullableBoolFilter.is_null:type_name -> google.protobuf.Empty
	32, // 43: cbt.NullableBoolFilter.is_not_null:type_name -> google.protobuf.Empty
	17, // 44: cbt.MapKeyValueStringString.value_filter:type_name -> cbt.StringFilter
	22, // 45: cbt.MapStringStringFilter.key_value:type_name -> cbt.MapKeyValueStringString
	19, // 46: cbt.MapStringStringFilter.has_any_key:type_name -> cbt.StringList
	19, // 47: cbt.MapStringStringFilter.has_all_keys:type_name -> cbt.StringList
	1,  // 48: cbt.MapKeyValueStringUInt32.value_filter:type_name -> cbt.UInt32Filter
	24, // 49: cbt.MapStringUInt32Filter.key_value:type_name -> cbt.MapKeyValueStringUInt32
	19, // 50: cbt.MapStringUInt32Filter.has_any_key:type_name -> cbt.StringList
	19, // 51: cbt.MapStringUInt32Filter.has_all_keys:type_name -> cbt.StringList
	9,  // 52: cbt.MapKeyValueStringInt32.value_filter:type_name -> cbt.Int32Filter
	26, // 53: cbt.MapStringInt32Filter.key_value:type_name -> cbt.MapKeyValueStringInt32
	19, // 54: cbt.MapStringInt32Filter.has_any_key:type_name -> cbt.StringList
	19, // 55: cbt.MapStringInt32Filter.has_all_keys:type_name -> cbt.StringList
	5,  // 56: cbt.MapKeyValueStringUInt64.value_filter:type_name -> cbt.UInt64Filter
	28, // 57: cbt.MapStringUInt64Filter.key_value:type_name -> cbt.MapKeyValueStringUInt64
	19, // 58: cbt.MapStringUInt64Filter.has_any_key:type_name -> cbt.StringList
	19, // 59: cbt.MapStringUInt64Filter.has_all_keys:type_name -> cbt.StringList
	13, // 60: cbt.MapKeyValueStringInt64.value_filter:type_name -> cbt.Int64Filter
	30, // 61: cbt.MapStringInt64Filter.key_value:type_name -> cbt.MapKeyValueStringInt64
	19, // 62: cbt.MapStringInt64Filter.has_any_key:type_name -> cbt.StringList
	19, // 63: cbt.MapStringInt64Filter.has_all_keys:type_name -> cbt.StringList
	64, // [64:64] is the sub-list for method output_type
	64, // [64:64] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UInt32Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NullableUInt32Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UInt32Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UInt32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UInt64Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*NullableUInt64Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UInt64Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UInt64List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Int32Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*NullableInt32Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Int32Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Int32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Int64Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*NullableInt64Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Int64Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Int64List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*StringFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*NullableStringFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*BoolFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*NullableBoolFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*MapKeyValueStringString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*MapStringStringFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*MapKeyValueStringUInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MapStringUInt32Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*MapKeyValueStringInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*MapStringInt32Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*MapKeyValueStringUInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*MapStringUInt64Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*MapKeyValueStringInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*MapStringInt64Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_proto_msgTypes[0].OneofWrappers = []any{
		(*UInt32Filter_Eq)(nil),
		(*UInt32Filter_Ne)(nil),
		(*UInt32Filter_Lt)(nil),
		(*UInt32Filter_Lte)(nil),
		(*UInt32Filter_Gt)(nil),
		(*UInt32Filter_Gte)(nil),
		(*UInt32Filter_Between)(nil),
		(*UInt32Filter_In)(nil),
		(*UInt32Filter_NotIn)(nil),
	}
	file_common_proto_msgTypes[1].OneofWrappers = []any{
		(*NullableUInt32Filter_Eq)(nil),
		(*NullableUInt32Filter_Ne)(nil),
		(*NullableUInt32Filter_Lt)(nil),
		(*NullableUInt32Filter_Lte)(nil),
		(*NullableUInt32Filter_Gt)(nil),
		(*NullableUInt32Filter_Gte)(nil),
		(*NullableUInt32Filter_Between)(nil),
		(*NullableUInt32Filter_In)(nil),
		(*NullableUInt32Filter_NotIn)(nil),
		(*NullableUInt32Filter_IsNull)(nil),
		(*NullableUInt32Filter_IsNotNull)(nil),
	}
	file_common_proto_msgTypes[4].OneofWrappers = []any{
		(*UInt64Filter_Eq)(nil),
		(*UInt64Filter_Ne)(nil),
		(*UInt64Filter_Lt)(nil),
		(*UInt64Filter_Lte)(nil),
		(*UInt64Filter_Gt)(nil),
		(*UInt64Filter_Gte)(nil),
		(*UInt64Filter_Between)(nil),
		(*UInt64Filter_In)(nil),
		(*UInt64Filter_NotIn)(nil),
	}
	file_common_proto_msgTypes[5].OneofWrappers = []any{
		(*NullableUInt64Filter_Eq)(nil),
		(*NullableUInt64Filter_Ne)(nil),
		(*NullableUInt64Filter_Lt)(nil),
		(*NullableUInt64Filter_Lte)(nil),
		(*NullableUInt64Filter_Gt)(nil),
		(*NullableUInt64Filter_Gte)(nil),
		(*NullableUInt64Filter_Between)(nil),
		(*NullableUInt64Filter_In)(nil),
		(*NullableUInt64Filter_NotIn)(nil),
		(*NullableUInt64Filter_IsNull)(nil),
		(*NullableUInt64Filter_IsNotNull)(nil),
	}
	file_common_proto_msgTypes[8].OneofWrappers = []any{
		(*Int32Filter_Eq)(nil),
		(*Int32Filter_Ne)(nil),
		(*Int32Filter_Lt)(nil),
		(*Int32Filter_Lte)(nil),
		(*Int32Filter_Gt)(nil),
		(*Int32Filter_Gte)(nil),
		(*Int32Filter_Between)(nil),
		(*Int32Filter_In)(nil),
		(*Int32Filter_NotIn)(nil),
	}
	file_common_proto_msgTypes[9].OneofWrappers = []any{
		(*NullableInt32Filter_Eq)(nil),
		(*NullableInt32Filter_Ne)(nil),
		(*NullableInt32Filter_Lt)(nil),
		(*NullableInt32Filter_Lte)(nil),
		(*NullableInt32Filter_Gt)(nil),
		(*NullableInt32Filter_Gte)(nil),
		(*NullableInt32Filter_Between)(nil),
		(*NullableInt32Filter_In)(nil),
		(*NullableInt32Filter_NotIn)(nil),
		(*NullableInt32Filter_IsNull)(nil),
		(*NullableInt32Filter_IsNotNull)(nil),
	}
	file_common_proto_msgTypes[12].OneofWrappers = []any{
		(*Int64Filter_Eq)(nil),
		(*Int64Filter_Ne)(nil),
		(*Int64Filter_Lt)(nil),
		(*Int64Filter_Lte)(nil),
		(*Int64Filter_Gt)(nil),
		(*Int64Filter_Gte)(nil),
		(*Int64Filter_Between)(nil),
		(*Int64Filter_In)(nil),
		(*Int64Filter_NotIn)(nil),
	}
	file_common_proto_msgTypes[13].OneofWrappers = []any{
		(*NullableInt64Filter_Eq)(nil),
		(*NullableInt64Filter_Ne)(nil),
		(*NullableInt64Filter_Lt)(nil),
		(*NullableInt64Filter_Lte)(nil),
		(*NullableInt64Filter_Gt)(nil),
		(*NullableInt64Filter_Gte)(nil),
		(*NullableInt64Filter_Between)(nil),
		(*NullableInt64Filter_In)(nil),
		(*NullableInt64Filter_NotIn)(nil),
		(*NullableInt64Filter_IsNull)(nil),
		(*NullableInt64Filter_IsNotNull)(nil),
	}
	file_common_proto_msgTypes[16].OneofWrappers = []any{
		(*StringFilter_Eq)(nil),
		(*StringFilter_Ne)(nil),
		(*StringFilter_Contains)(nil),
		(*StringFilter_StartsWith)(nil),
		(*StringFilter_EndsWith)(nil),
		(*StringFilter_Like)(nil),
		(*StringFilter_NotLike)(nil),
		(*StringFilter_In)(nil),
		(*StringFilter_NotIn)(nil),
	}
	file_common_proto_msgTypes[17].OneofWrappers = []any{
		(*NullableStringFilter_Eq)(nil),
		(*NullableStringFilter_Ne)(nil),
		(*NullableStringFilter_Contains)(nil),
		(*NullableStringFilter_StartsWith)(nil),
		(*NullableStringFilter_EndsWith)(nil),
		(*NullableStringFilter_Like)(nil),
		(*NullableStringFilter_NotLike)(nil),
		(*NullableStringFilter_In)(nil),
		(*NullableStringFilter_NotIn)(nil),
		(*NullableStringFilter_IsNull)(nil),
		(*NullableStringFilter_IsNotNull)(nil),
	}
	file_common_proto_msgTypes[19].OneofWrappers = []any{
		(*BoolFilter_Eq)(nil),
		(*BoolFilter_Ne)(nil),
	}
	file_common_proto_msgTypes[20].OneofWrappers = []any{
		(*NullableBoolFilter_Eq)(nil),
		(*NullableBoolFilter_Ne)(nil),
		(*NullableBoolFilter_IsNull)(nil),
		(*NullableBoolFilter_IsNotNull)(nil),
	}
	file_common_proto_msgTypes[22].OneofWrappers = []any{
		(*MapStringStringFilter_KeyValue)(nil),
		(*MapStringStringFilter_HasKey)(nil),
		(*MapStringStringFilter_NotHasKey)(nil),
		(*MapStringStringFilter_HasAnyKey)(nil),
		(*MapStringStringFilter_HasAllKeys)(nil),
	}
	file_common_proto_msgTypes[24].OneofWrappers = []any{
		(*MapStringUInt32Filter_KeyValue)(nil),
		(*MapStringUInt32Filter_HasKey)(nil),
		(*MapStringUInt32Filter_NotHasKey)(nil),
		(*MapStringUInt32Filter_HasAnyKey)(nil),
		(*MapStringUInt32Filter_HasAllKeys)(nil),
	}
	file_common_proto_msgTypes[26].OneofWrappers = []any{
		(*MapStringInt32Filter_KeyValue)(nil),
		(*MapStringInt32Filter_HasKey)(nil),
		(*MapStringInt32Filter_NotHasKey)(nil),
		(*MapStringInt32Filter_HasAnyKey)(nil),
		(*MapStringInt32Filter_HasAllKeys)(nil),
	}
	file_common_proto_msgTypes[28].OneofWrappers = []any{
		(*MapStringUInt64Filter_KeyValue)(nil),
		(*MapStringUInt64Filter_HasKey)(nil),
		(*MapStringUInt64Filter_NotHasKey)(nil),
		(*MapStringUInt64Filter_HasAnyKey)(nil),
		(*MapStringUInt64Filter_HasAllKeys)(nil),
	}
	file_common_proto_msgTypes[30].OneofWrappers = []any{
		(*MapStringInt64Filter_KeyValue)(nil),
		(*MapStringInt64Filter_HasKey)(nil),
		(*MapStringInt64Filter_NotHasKey)(nil),
		(*MapStringInt64Filter_HasAnyKey)(nil),
		(*MapStringInt64Filter_HasAllKeys)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
