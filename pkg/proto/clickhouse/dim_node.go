// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for dim_node

package clickhouse

import (
	"fmt"
)

// BuildListDimNodeQuery constructs a parameterized SQL query from a ListDimNodeRequest
func BuildListDimNodeQuery(req *ListDimNodeRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.ValidatorIndex == nil {
		return SQLQuery{}, fmt.Errorf("primary key field validator_index is required")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.ValidatorIndex.Filter.(type) {
	case *UInt32Filter_Eq:
		qb.AddCondition("validator_index", "=", filter.Eq)
	case *UInt32Filter_Ne:
		qb.AddCondition("validator_index", "!=", filter.Ne)
	case *UInt32Filter_Lt:
		qb.AddCondition("validator_index", "<", filter.Lt)
	case *UInt32Filter_Lte:
		qb.AddCondition("validator_index", "<=", filter.Lte)
	case *UInt32Filter_Gt:
		qb.AddCondition("validator_index", ">", filter.Gt)
	case *UInt32Filter_Gte:
		qb.AddCondition("validator_index", ">=", filter.Gte)
	case *UInt32Filter_Between:
		qb.AddBetweenCondition("validator_index", filter.Between.Min, filter.Between.Max)
	case *UInt32Filter_In:
		if len(filter.In.Values) > 0 {
			qb.AddInCondition("validator_index", UInt32SliceToInterface(filter.In.Values))
		}
	case *UInt32Filter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			qb.AddNotInCondition("validator_index", UInt32SliceToInterface(filter.NotIn.Values))
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("updated_date_time", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("updated_date_time", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: name
	if req.Name != nil {
		switch filter := req.Name.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("name", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("name", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("name", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("name", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("name", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("name", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("name", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("name", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("name", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: groups

	// Add filter for column: tags

	// Add filter for column: attributes
	if req.Attributes != nil {
		switch filter := req.Attributes.Filter.(type) {
		case *MapStringStringFilter_KeyValue:
			// Handle key-value filter with string values
			switch kvFilter := filter.KeyValue.ValueFilter.Filter.(type) {
			case *StringFilter_Eq:
				qb.AddMapKeyCondition("attributes", filter.KeyValue.Key, "=", kvFilter.Eq)
			case *StringFilter_Ne:
				qb.AddMapKeyCondition("attributes", filter.KeyValue.Key, "!=", kvFilter.Ne)
			case *StringFilter_Like:
				qb.AddMapKeyLikeCondition("attributes", filter.KeyValue.Key, kvFilter.Like)
			case *StringFilter_StartsWith:
				qb.AddMapKeyLikeCondition("attributes", filter.KeyValue.Key, kvFilter.StartsWith + "%")
			case *StringFilter_EndsWith:
				qb.AddMapKeyLikeCondition("attributes", filter.KeyValue.Key, "%" + kvFilter.EndsWith)
			case *StringFilter_Contains:
				qb.AddMapKeyLikeCondition("attributes", filter.KeyValue.Key, "%" + kvFilter.Contains + "%")
			}
		case *MapStringStringFilter_HasKey:
			qb.AddMapContainsCondition("attributes", filter.HasKey)
		case *MapStringStringFilter_NotHasKey:
			qb.AddNotMapContainsCondition("attributes", filter.NotHasKey)
		case *MapStringStringFilter_HasAnyKey:
			if len(filter.HasAnyKey.Values) > 0 {
				qb.AddMapContainsAnyCondition("attributes", filter.HasAnyKey.Values)
			}
		case *MapStringStringFilter_HasAllKeys:
			if len(filter.HasAllKeys.Values) > 0 {
				for _, key := range filter.HasAllKeys.Values {
					qb.AddMapContainsCondition("attributes", key)
				}
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: source
	if req.Source != nil {
		switch filter := req.Source.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("source", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("source", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("source", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("source", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("source", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("source", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("source", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("source", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("source", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
		if limit > 1000 {
			limit = 1000 // Maximum allowed
		}
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "name", "groups", "tags", "attributes", "validator_index", "source"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY validator_index"
	}

	return BuildParameterizedQuery("dim_node", qb, orderByClause, limit, offset, options...), nil
}

// BuildGetDimNodeQuery constructs a parameterized SQL query from a GetDimNodeRequest
func BuildGetDimNodeQuery(req *GetDimNodeRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.ValidatorIndex == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field validator_index is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("validator_index", "=", req.ValidatorIndex)

	// Build ORDER BY clause
	orderByClause := " ORDER BY validator_index"

	// Return single record
	return BuildParameterizedQuery("dim_node", qb, orderByClause, 1, 0, options...), nil
}
