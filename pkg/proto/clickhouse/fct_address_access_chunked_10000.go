// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for fct_address_access_chunked_10000

package clickhouse

import (
	"fmt"
)

// BuildListFctAddressAccessChunked10000Query constructs a parameterized SQL query from a ListFctAddressAccessChunked10000Request
func BuildListFctAddressAccessChunked10000Query(req *ListFctAddressAccessChunked10000Request, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.ChunkStartBlockNumber == nil {
		return SQLQuery{}, fmt.Errorf("primary key field chunk_start_block_number is required")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.ChunkStartBlockNumber.Filter.(type) {
	case *UInt32Filter_Eq:
		qb.AddCondition("chunk_start_block_number", "=", filter.Eq)
	case *UInt32Filter_Ne:
		qb.AddCondition("chunk_start_block_number", "!=", filter.Ne)
	case *UInt32Filter_Lt:
		qb.AddCondition("chunk_start_block_number", "<", filter.Lt)
	case *UInt32Filter_Lte:
		qb.AddCondition("chunk_start_block_number", "<=", filter.Lte)
	case *UInt32Filter_Gt:
		qb.AddCondition("chunk_start_block_number", ">", filter.Gt)
	case *UInt32Filter_Gte:
		qb.AddCondition("chunk_start_block_number", ">=", filter.Gte)
	case *UInt32Filter_Between:
		qb.AddBetweenCondition("chunk_start_block_number", filter.Between.Min, filter.Between.Max.GetValue())
	case *UInt32Filter_In:
		if len(filter.In.Values) > 0 {
			qb.AddInCondition("chunk_start_block_number", UInt32SliceToInterface(filter.In.Values))
		}
	case *UInt32Filter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			qb.AddNotInCondition("chunk_start_block_number", UInt32SliceToInterface(filter.NotIn.Values))
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("updated_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("updated_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: first_accessed_accounts
	if req.FirstAccessedAccounts != nil {
		switch filter := req.FirstAccessedAccounts.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("first_accessed_accounts", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("first_accessed_accounts", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("first_accessed_accounts", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("first_accessed_accounts", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("first_accessed_accounts", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("first_accessed_accounts", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("first_accessed_accounts", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("first_accessed_accounts", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("first_accessed_accounts", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: last_accessed_accounts
	if req.LastAccessedAccounts != nil {
		switch filter := req.LastAccessedAccounts.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("last_accessed_accounts", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("last_accessed_accounts", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("last_accessed_accounts", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("last_accessed_accounts", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("last_accessed_accounts", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("last_accessed_accounts", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("last_accessed_accounts", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("last_accessed_accounts", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("last_accessed_accounts", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "chunk_start_block_number", "first_accessed_accounts", "last_accessed_accounts"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY chunk_start_block_number"
	}

	// Build column list
	columns := []string{"updated_date_time", "chunk_start_block_number", "first_accessed_accounts", "last_accessed_accounts"}

	return BuildParameterizedQuery("fct_address_access_chunked_10000", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetFctAddressAccessChunked10000Query constructs a parameterized SQL query from a GetFctAddressAccessChunked10000Request
func BuildGetFctAddressAccessChunked10000Query(req *GetFctAddressAccessChunked10000Request, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.ChunkStartBlockNumber == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field chunk_start_block_number is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("chunk_start_block_number", "=", req.ChunkStartBlockNumber)

	// Build ORDER BY clause
	orderByClause := " ORDER BY chunk_start_block_number"

	// Build column list
	columns := []string{"updated_date_time", "chunk_start_block_number", "first_accessed_accounts", "last_accessed_accounts"}

	// Return single record
	return BuildParameterizedQuery("fct_address_access_chunked_10000", columns, qb, orderByClause, 1, 0, options...)
}
