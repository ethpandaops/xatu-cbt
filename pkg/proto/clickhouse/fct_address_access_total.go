// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for fct_address_access_total

package clickhouse

import (
	"fmt"
)

// BuildListFctAddressAccessTotalQuery constructs a parameterized SQL query from a ListFctAddressAccessTotalRequest
func BuildListFctAddressAccessTotalQuery(req *ListFctAddressAccessTotalRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.UpdatedDateTime == nil {
		return SQLQuery{}, fmt.Errorf("primary key field updated_date_time is required")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.UpdatedDateTime.Filter.(type) {
	case *UInt32Filter_Eq:
		qb.AddCondition("updated_date_time", "=", filter.Eq)
	case *UInt32Filter_Ne:
		qb.AddCondition("updated_date_time", "!=", filter.Ne)
	case *UInt32Filter_Lt:
		qb.AddCondition("updated_date_time", "<", filter.Lt)
	case *UInt32Filter_Lte:
		qb.AddCondition("updated_date_time", "<=", filter.Lte)
	case *UInt32Filter_Gt:
		qb.AddCondition("updated_date_time", ">", filter.Gt)
	case *UInt32Filter_Gte:
		qb.AddCondition("updated_date_time", ">=", filter.Gte)
	case *UInt32Filter_Between:
		qb.AddBetweenCondition("updated_date_time", filter.Between.Min, filter.Between.Max)
	case *UInt32Filter_In:
		if len(filter.In.Values) > 0 {
			qb.AddInCondition("updated_date_time", UInt32SliceToInterface(filter.In.Values))
		}
	case *UInt32Filter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			qb.AddNotInCondition("updated_date_time", UInt32SliceToInterface(filter.NotIn.Values))
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: total_accounts
	if req.TotalAccounts != nil {
		switch filter := req.TotalAccounts.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("total_accounts", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("total_accounts", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("total_accounts", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("total_accounts", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("total_accounts", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("total_accounts", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("total_accounts", filter.Between.Min, filter.Between.Max)
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("total_accounts", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("total_accounts", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: expired_accounts
	if req.ExpiredAccounts != nil {
		switch filter := req.ExpiredAccounts.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("expired_accounts", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("expired_accounts", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("expired_accounts", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("expired_accounts", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("expired_accounts", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("expired_accounts", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("expired_accounts", filter.Between.Min, filter.Between.Max)
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("expired_accounts", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("expired_accounts", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: total_contract_accounts
	if req.TotalContractAccounts != nil {
		switch filter := req.TotalContractAccounts.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("total_contract_accounts", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("total_contract_accounts", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("total_contract_accounts", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("total_contract_accounts", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("total_contract_accounts", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("total_contract_accounts", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("total_contract_accounts", filter.Between.Min, filter.Between.Max)
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("total_contract_accounts", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("total_contract_accounts", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: expired_contracts
	if req.ExpiredContracts != nil {
		switch filter := req.ExpiredContracts.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("expired_contracts", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("expired_contracts", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("expired_contracts", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("expired_contracts", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("expired_contracts", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("expired_contracts", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("expired_contracts", filter.Between.Min, filter.Between.Max)
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("expired_contracts", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("expired_contracts", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "total_accounts", "expired_accounts", "total_contract_accounts", "expired_contracts"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY updated_date_time"
	}

	// Build column list
	columns := []string{"updated_date_time", "total_accounts", "expired_accounts", "total_contract_accounts", "expired_contracts"}

	return BuildParameterizedQuery("fct_address_access_total", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetFctAddressAccessTotalQuery constructs a parameterized SQL query from a GetFctAddressAccessTotalRequest
func BuildGetFctAddressAccessTotalQuery(req *GetFctAddressAccessTotalRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.UpdatedDateTime == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field updated_date_time is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("updated_date_time", "=", req.UpdatedDateTime)

	// Build ORDER BY clause
	orderByClause := " ORDER BY updated_date_time"

	// Build column list
	columns := []string{"updated_date_time", "total_accounts", "expired_accounts", "total_contract_accounts", "expired_contracts"}

	// Return single record
	return BuildParameterizedQuery("fct_address_access_total", columns, qb, orderByClause, 1, 0, options...)
}
