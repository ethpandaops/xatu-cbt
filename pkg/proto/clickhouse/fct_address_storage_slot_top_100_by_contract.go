// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for fct_address_storage_slot_top_100_by_contract

package clickhouse

import (
	"fmt"
)

// BuildListFctAddressStorageSlotTop100ByContractQuery constructs a parameterized SQL query from a ListFctAddressStorageSlotTop100ByContractRequest
func BuildListFctAddressStorageSlotTop100ByContractQuery(req *ListFctAddressStorageSlotTop100ByContractRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.Rank == nil {
		return SQLQuery{}, fmt.Errorf("primary key field rank is required")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.Rank.Filter.(type) {
	case *UInt32Filter_Eq:
		qb.AddCondition("rank", "=", filter.Eq)
	case *UInt32Filter_Ne:
		qb.AddCondition("rank", "!=", filter.Ne)
	case *UInt32Filter_Lt:
		qb.AddCondition("rank", "<", filter.Lt)
	case *UInt32Filter_Lte:
		qb.AddCondition("rank", "<=", filter.Lte)
	case *UInt32Filter_Gt:
		qb.AddCondition("rank", ">", filter.Gt)
	case *UInt32Filter_Gte:
		qb.AddCondition("rank", ">=", filter.Gte)
	case *UInt32Filter_Between:
		qb.AddBetweenCondition("rank", filter.Between.Min, filter.Between.Max.GetValue())
	case *UInt32Filter_In:
		if len(filter.In.Values) > 0 {
			qb.AddInCondition("rank", UInt32SliceToInterface(filter.In.Values))
		}
	case *UInt32Filter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			qb.AddNotInCondition("rank", UInt32SliceToInterface(filter.NotIn.Values))
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("updated_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("updated_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: contract_address
	if req.ContractAddress != nil {
		switch filter := req.ContractAddress.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("contract_address", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("contract_address", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("contract_address", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("contract_address", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("contract_address", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("contract_address", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("contract_address", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("contract_address", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("contract_address", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: total_storage_slots
	if req.TotalStorageSlots != nil {
		switch filter := req.TotalStorageSlots.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("total_storage_slots", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("total_storage_slots", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("total_storage_slots", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("total_storage_slots", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("total_storage_slots", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("total_storage_slots", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("total_storage_slots", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("total_storage_slots", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("total_storage_slots", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "rank", "contract_address", "total_storage_slots"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY rank"
	}

	// Build column list
	columns := []string{"updated_date_time", "rank", "contract_address", "total_storage_slots"}

	return BuildParameterizedQuery("fct_address_storage_slot_top_100_by_contract", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetFctAddressStorageSlotTop100ByContractQuery constructs a parameterized SQL query from a GetFctAddressStorageSlotTop100ByContractRequest
func BuildGetFctAddressStorageSlotTop100ByContractQuery(req *GetFctAddressStorageSlotTop100ByContractRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.Rank == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field rank is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("rank", "=", req.Rank)

	// Build ORDER BY clause
	orderByClause := " ORDER BY rank"

	// Build column list
	columns := []string{"updated_date_time", "rank", "contract_address", "total_storage_slots"}

	// Return single record
	return BuildParameterizedQuery("fct_address_storage_slot_top_100_by_contract", columns, qb, orderByClause, 1, 0, options...)
}
