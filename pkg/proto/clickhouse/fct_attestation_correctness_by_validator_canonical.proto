syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Attestation correctness by validator for the finalized chain

message FctAttestationCorrectnessByValidatorCanonical {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The epoch number containing the slot
  uint32 epoch = 14;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15;
  // The index of the validator attesting
  uint32 attesting_validator_index = 16;
  // The beacon block root hash that was attested
  google.protobuf.StringValue block_root = 17;
  // The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago
  google.protobuf.UInt32Value slot_distance = 18;
  // The distance from the slot when the attestation was included in a block
  google.protobuf.UInt32Value inclusion_distance = 19;
  // Can be "canonical", "orphaned", "missed" or "unknown" (validator attested but block data not available)
  string status = 20;
}

// ListFctAttestationCorrectnessByValidatorCanonicalRequest is the request message for listing fct_attestation_correctness_by_validator_canonical records
message ListFctAttestationCorrectnessByValidatorCanonicalRequest {
  // Filter by slot_start_date_time (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by attesting_validator_index (ORDER BY column 2 - optional)
  UInt32Filter attesting_validator_index = 2;

  // Filter by updated_date_time (optional)
  UInt32Filter updated_date_time = 3;
  // Filter by slot (optional)
  UInt32Filter slot = 4;
  // Filter by epoch (optional)
  UInt32Filter epoch = 5;
  // Filter by epoch_start_date_time (optional)
  UInt32Filter epoch_start_date_time = 6;
  // Filter by block_root (optional)
  NullableStringFilter block_root = 7;
  // Filter by slot_distance (optional)
  NullableUInt32Filter slot_distance = 8;
  // Filter by inclusion_distance (optional)
  NullableUInt32Filter inclusion_distance = 9;
  // Filter by status (optional)
  StringFilter status = 10;

  // The maximum number of fct_attestation_correctness_by_validator_canonical to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 11;
  // A page token, received from a previous `ListFctAttestationCorrectnessByValidatorCanonical` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 12;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 13;
}

// ListFctAttestationCorrectnessByValidatorCanonicalResponse is the response message for listing fct_attestation_correctness_by_validator_canonical records
message ListFctAttestationCorrectnessByValidatorCanonicalResponse {
  // The list of fct_attestation_correctness_by_validator_canonical.
  repeated FctAttestationCorrectnessByValidatorCanonical fct_attestation_correctness_by_validator_canonical = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// GetFctAttestationCorrectnessByValidatorCanonicalRequest is the request message for getting a single fct_attestation_correctness_by_validator_canonical record by primary key
message GetFctAttestationCorrectnessByValidatorCanonicalRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// GetFctAttestationCorrectnessByValidatorCanonicalResponse is the response message for getting a single fct_attestation_correctness_by_validator_canonical record
message GetFctAttestationCorrectnessByValidatorCanonicalResponse {
  FctAttestationCorrectnessByValidatorCanonical item = 1;
}

// FctAttestationCorrectnessByValidatorCanonicalService provides RPC methods for querying fct_attestation_correctness_by_validator_canonical data
service FctAttestationCorrectnessByValidatorCanonicalService {
  // List returns paginated fct_attestation_correctness_by_validator_canonical records
  rpc List(ListFctAttestationCorrectnessByValidatorCanonicalRequest) returns (ListFctAttestationCorrectnessByValidatorCanonicalResponse);
  // Get returns a single fct_attestation_correctness_by_validator_canonical record by primary key
  rpc Get(GetFctAttestationCorrectnessByValidatorCanonicalRequest) returns (GetFctAttestationCorrectnessByValidatorCanonicalResponse);
}
