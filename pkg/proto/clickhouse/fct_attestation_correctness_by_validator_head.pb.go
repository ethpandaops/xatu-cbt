// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: fct_attestation_correctness_by_validator_head.proto

package clickhouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FctAttestationCorrectnessByValidatorHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// The slot number
	Slot uint32 `protobuf:"varint,12,opt,name=slot,proto3" json:"slot,omitempty"`
	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,13,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// The epoch number containing the slot
	Epoch uint32 `protobuf:"varint,14,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The wall clock time when the epoch started
	EpochStartDateTime uint32 `protobuf:"varint,15,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// The index of the validator attesting
	AttestingValidatorIndex uint32 `protobuf:"varint,16,opt,name=attesting_validator_index,json=attestingValidatorIndex,proto3" json:"attesting_validator_index,omitempty"`
	// The beacon block root hash that was attested, null means the attestation was missed
	BlockRoot *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago
	SlotDistance *wrapperspb.UInt32Value `protobuf:"bytes,18,opt,name=slot_distance,json=slotDistance,proto3" json:"slot_distance,omitempty"`
	// The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc.
	PropagationDistance *wrapperspb.UInt32Value `protobuf:"bytes,19,opt,name=propagation_distance,json=propagationDistance,proto3" json:"propagation_distance,omitempty"`
}

func (x *FctAttestationCorrectnessByValidatorHead) Reset() {
	*x = FctAttestationCorrectnessByValidatorHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FctAttestationCorrectnessByValidatorHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FctAttestationCorrectnessByValidatorHead) ProtoMessage() {}

func (x *FctAttestationCorrectnessByValidatorHead) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FctAttestationCorrectnessByValidatorHead.ProtoReflect.Descriptor instead.
func (*FctAttestationCorrectnessByValidatorHead) Descriptor() ([]byte, []int) {
	return file_fct_attestation_correctness_by_validator_head_proto_rawDescGZIP(), []int{0}
}

func (x *FctAttestationCorrectnessByValidatorHead) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *FctAttestationCorrectnessByValidatorHead) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *FctAttestationCorrectnessByValidatorHead) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *FctAttestationCorrectnessByValidatorHead) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *FctAttestationCorrectnessByValidatorHead) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *FctAttestationCorrectnessByValidatorHead) GetAttestingValidatorIndex() uint32 {
	if x != nil {
		return x.AttestingValidatorIndex
	}
	return 0
}

func (x *FctAttestationCorrectnessByValidatorHead) GetBlockRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *FctAttestationCorrectnessByValidatorHead) GetSlotDistance() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotDistance
	}
	return nil
}

func (x *FctAttestationCorrectnessByValidatorHead) GetPropagationDistance() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PropagationDistance
	}
	return nil
}

// ListFctAttestationCorrectnessByValidatorHeadRequest is the request message for listing fct_attestation_correctness_by_validator_head records
type ListFctAttestationCorrectnessByValidatorHeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time (PRIMARY KEY - required)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by attesting_validator_index (ORDER BY column 2 - optional)
	AttestingValidatorIndex *UInt32Filter `protobuf:"bytes,2,opt,name=attesting_validator_index,json=attestingValidatorIndex,proto3" json:"attesting_validator_index,omitempty"`
	// Filter by updated_date_time (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,3,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by slot (optional)
	Slot *UInt32Filter `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by epoch (optional)
	Epoch *UInt32Filter `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by epoch_start_date_time (optional)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,6,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by block_root (optional)
	BlockRoot *NullableStringFilter `protobuf:"bytes,7,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// Filter by slot_distance (optional)
	SlotDistance *NullableUInt32Filter `protobuf:"bytes,8,opt,name=slot_distance,json=slotDistance,proto3" json:"slot_distance,omitempty"`
	// Filter by propagation_distance (optional)
	PropagationDistance *NullableUInt32Filter `protobuf:"bytes,9,opt,name=propagation_distance,json=propagationDistance,proto3" json:"propagation_distance,omitempty"`
	// The maximum number of fct_attestation_correctness_by_validator_head to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListFctAttestationCorrectnessByValidatorHead` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,11,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,12,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) Reset() {
	*x = ListFctAttestationCorrectnessByValidatorHeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctAttestationCorrectnessByValidatorHeadRequest) ProtoMessage() {}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctAttestationCorrectnessByValidatorHeadRequest.ProtoReflect.Descriptor instead.
func (*ListFctAttestationCorrectnessByValidatorHeadRequest) Descriptor() ([]byte, []int) {
	return file_fct_attestation_correctness_by_validator_head_proto_rawDescGZIP(), []int{1}
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetAttestingValidatorIndex() *UInt32Filter {
	if x != nil {
		return x.AttestingValidatorIndex
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetBlockRoot() *NullableStringFilter {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetSlotDistance() *NullableUInt32Filter {
	if x != nil {
		return x.SlotDistance
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetPropagationDistance() *NullableUInt32Filter {
	if x != nil {
		return x.PropagationDistance
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFctAttestationCorrectnessByValidatorHeadRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListFctAttestationCorrectnessByValidatorHeadResponse is the response message for listing fct_attestation_correctness_by_validator_head records
type ListFctAttestationCorrectnessByValidatorHeadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fct_attestation_correctness_by_validator_head.
	FctAttestationCorrectnessByValidatorHead []*FctAttestationCorrectnessByValidatorHead `protobuf:"bytes,1,rep,name=fct_attestation_correctness_by_validator_head,json=fctAttestationCorrectnessByValidatorHead,proto3" json:"fct_attestation_correctness_by_validator_head,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFctAttestationCorrectnessByValidatorHeadResponse) Reset() {
	*x = ListFctAttestationCorrectnessByValidatorHeadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctAttestationCorrectnessByValidatorHeadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctAttestationCorrectnessByValidatorHeadResponse) ProtoMessage() {}

func (x *ListFctAttestationCorrectnessByValidatorHeadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctAttestationCorrectnessByValidatorHeadResponse.ProtoReflect.Descriptor instead.
func (*ListFctAttestationCorrectnessByValidatorHeadResponse) Descriptor() ([]byte, []int) {
	return file_fct_attestation_correctness_by_validator_head_proto_rawDescGZIP(), []int{2}
}

func (x *ListFctAttestationCorrectnessByValidatorHeadResponse) GetFctAttestationCorrectnessByValidatorHead() []*FctAttestationCorrectnessByValidatorHead {
	if x != nil {
		return x.FctAttestationCorrectnessByValidatorHead
	}
	return nil
}

func (x *ListFctAttestationCorrectnessByValidatorHeadResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetFctAttestationCorrectnessByValidatorHeadRequest is the request message for getting a single fct_attestation_correctness_by_validator_head record by primary key
type GetFctAttestationCorrectnessByValidatorHeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetFctAttestationCorrectnessByValidatorHeadRequest) Reset() {
	*x = GetFctAttestationCorrectnessByValidatorHeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctAttestationCorrectnessByValidatorHeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctAttestationCorrectnessByValidatorHeadRequest) ProtoMessage() {}

func (x *GetFctAttestationCorrectnessByValidatorHeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctAttestationCorrectnessByValidatorHeadRequest.ProtoReflect.Descriptor instead.
func (*GetFctAttestationCorrectnessByValidatorHeadRequest) Descriptor() ([]byte, []int) {
	return file_fct_attestation_correctness_by_validator_head_proto_rawDescGZIP(), []int{3}
}

func (x *GetFctAttestationCorrectnessByValidatorHeadRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// GetFctAttestationCorrectnessByValidatorHeadResponse is the response message for getting a single fct_attestation_correctness_by_validator_head record
type GetFctAttestationCorrectnessByValidatorHeadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *FctAttestationCorrectnessByValidatorHead `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetFctAttestationCorrectnessByValidatorHeadResponse) Reset() {
	*x = GetFctAttestationCorrectnessByValidatorHeadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctAttestationCorrectnessByValidatorHeadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctAttestationCorrectnessByValidatorHeadResponse) ProtoMessage() {}

func (x *GetFctAttestationCorrectnessByValidatorHeadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_correctness_by_validator_head_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctAttestationCorrectnessByValidatorHeadResponse.ProtoReflect.Descriptor instead.
func (*GetFctAttestationCorrectnessByValidatorHeadResponse) Descriptor() ([]byte, []int) {
	return file_fct_attestation_correctness_by_validator_head_proto_rawDescGZIP(), []int{4}
}

func (x *GetFctAttestationCorrectnessByValidatorHeadResponse) GetItem() *FctAttestationCorrectnessByValidatorHead {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_fct_attestation_correctness_by_validator_head_proto protoreflect.FileDescriptor

var file_fct_attestation_correctness_by_validator_head_proto_rawDesc = []byte{
	0x0a, 0x33, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x03, 0x0a, 0x28, 0x46, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x15,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x19, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x6c, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xbc, 0x05, 0x0a,
	0x33, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x19, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x17,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x27, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xef, 0x01, 0x0a, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x2d, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x52, 0x28, 0x66, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x65, 0x0a,
	0x32, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32, 0xa8,
	0x02, 0x0a, 0x2f, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x7b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x78, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fct_attestation_correctness_by_validator_head_proto_rawDescOnce sync.Once
	file_fct_attestation_correctness_by_validator_head_proto_rawDescData = file_fct_attestation_correctness_by_validator_head_proto_rawDesc
)

func file_fct_attestation_correctness_by_validator_head_proto_rawDescGZIP() []byte {
	file_fct_attestation_correctness_by_validator_head_proto_rawDescOnce.Do(func() {
		file_fct_attestation_correctness_by_validator_head_proto_rawDescData = protoimpl.X.CompressGZIP(file_fct_attestation_correctness_by_validator_head_proto_rawDescData)
	})
	return file_fct_attestation_correctness_by_validator_head_proto_rawDescData
}

var file_fct_attestation_correctness_by_validator_head_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fct_attestation_correctness_by_validator_head_proto_goTypes = []any{
	(*FctAttestationCorrectnessByValidatorHead)(nil),             // 0: cbt.FctAttestationCorrectnessByValidatorHead
	(*ListFctAttestationCorrectnessByValidatorHeadRequest)(nil),  // 1: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest
	(*ListFctAttestationCorrectnessByValidatorHeadResponse)(nil), // 2: cbt.ListFctAttestationCorrectnessByValidatorHeadResponse
	(*GetFctAttestationCorrectnessByValidatorHeadRequest)(nil),   // 3: cbt.GetFctAttestationCorrectnessByValidatorHeadRequest
	(*GetFctAttestationCorrectnessByValidatorHeadResponse)(nil),  // 4: cbt.GetFctAttestationCorrectnessByValidatorHeadResponse
	(*wrapperspb.StringValue)(nil),                               // 5: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                               // 6: google.protobuf.UInt32Value
	(*UInt32Filter)(nil),                                         // 7: cbt.UInt32Filter
	(*NullableStringFilter)(nil),                                 // 8: cbt.NullableStringFilter
	(*NullableUInt32Filter)(nil),                                 // 9: cbt.NullableUInt32Filter
}
var file_fct_attestation_correctness_by_validator_head_proto_depIdxs = []int32{
	5,  // 0: cbt.FctAttestationCorrectnessByValidatorHead.block_root:type_name -> google.protobuf.StringValue
	6,  // 1: cbt.FctAttestationCorrectnessByValidatorHead.slot_distance:type_name -> google.protobuf.UInt32Value
	6,  // 2: cbt.FctAttestationCorrectnessByValidatorHead.propagation_distance:type_name -> google.protobuf.UInt32Value
	7,  // 3: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	7,  // 4: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest.attesting_validator_index:type_name -> cbt.UInt32Filter
	7,  // 5: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest.updated_date_time:type_name -> cbt.UInt32Filter
	7,  // 6: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest.slot:type_name -> cbt.UInt32Filter
	7,  // 7: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest.epoch:type_name -> cbt.UInt32Filter
	7,  // 8: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	8,  // 9: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest.block_root:type_name -> cbt.NullableStringFilter
	9,  // 10: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest.slot_distance:type_name -> cbt.NullableUInt32Filter
	9,  // 11: cbt.ListFctAttestationCorrectnessByValidatorHeadRequest.propagation_distance:type_name -> cbt.NullableUInt32Filter
	0,  // 12: cbt.ListFctAttestationCorrectnessByValidatorHeadResponse.fct_attestation_correctness_by_validator_head:type_name -> cbt.FctAttestationCorrectnessByValidatorHead
	0,  // 13: cbt.GetFctAttestationCorrectnessByValidatorHeadResponse.item:type_name -> cbt.FctAttestationCorrectnessByValidatorHead
	1,  // 14: cbt.FctAttestationCorrectnessByValidatorHeadService.List:input_type -> cbt.ListFctAttestationCorrectnessByValidatorHeadRequest
	3,  // 15: cbt.FctAttestationCorrectnessByValidatorHeadService.Get:input_type -> cbt.GetFctAttestationCorrectnessByValidatorHeadRequest
	2,  // 16: cbt.FctAttestationCorrectnessByValidatorHeadService.List:output_type -> cbt.ListFctAttestationCorrectnessByValidatorHeadResponse
	4,  // 17: cbt.FctAttestationCorrectnessByValidatorHeadService.Get:output_type -> cbt.GetFctAttestationCorrectnessByValidatorHeadResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_fct_attestation_correctness_by_validator_head_proto_init() }
func file_fct_attestation_correctness_by_validator_head_proto_init() {
	if File_fct_attestation_correctness_by_validator_head_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fct_attestation_correctness_by_validator_head_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FctAttestationCorrectnessByValidatorHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_correctness_by_validator_head_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctAttestationCorrectnessByValidatorHeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_correctness_by_validator_head_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctAttestationCorrectnessByValidatorHeadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_correctness_by_validator_head_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctAttestationCorrectnessByValidatorHeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_correctness_by_validator_head_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctAttestationCorrectnessByValidatorHeadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fct_attestation_correctness_by_validator_head_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fct_attestation_correctness_by_validator_head_proto_goTypes,
		DependencyIndexes: file_fct_attestation_correctness_by_validator_head_proto_depIdxs,
		MessageInfos:      file_fct_attestation_correctness_by_validator_head_proto_msgTypes,
	}.Build()
	File_fct_attestation_correctness_by_validator_head_proto = out.File
	file_fct_attestation_correctness_by_validator_head_proto_rawDesc = nil
	file_fct_attestation_correctness_by_validator_head_proto_goTypes = nil
	file_fct_attestation_correctness_by_validator_head_proto_depIdxs = nil
}
