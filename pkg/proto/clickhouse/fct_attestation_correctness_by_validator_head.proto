syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "clickhouse/annotations.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Attestation correctness by validator for the finalized chain

message FctAttestationCorrectnessByValidatorHead {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The epoch number containing the slot
  uint32 epoch = 14;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15;
  // The index of the validator attesting
  uint32 attesting_validator_index = 16;
  // The beacon block root hash that was attested, null means the attestation was missed
  google.protobuf.StringValue block_root = 17;
  // The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago
  google.protobuf.UInt32Value slot_distance = 18;
  // The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc.
  google.protobuf.UInt32Value propagation_distance = 19;
}

// Request for listing fct_attestation_correctness_by_validator_head records
message ListFctAttestationCorrectnessByValidatorHeadRequest {
  // Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1 [(google.api.field_behavior) = REQUIRED];

  // Filter by attesting_validator_index - The index of the validator attesting (ORDER BY column 2 - optional)
  UInt32Filter attesting_validator_index = 2 [(google.api.field_behavior) = OPTIONAL];

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 3 [(google.api.field_behavior) = OPTIONAL];
  // Filter by slot - The slot number (optional)
  UInt32Filter slot = 4 [(google.api.field_behavior) = OPTIONAL];
  // Filter by epoch - The epoch number containing the slot (optional)
  UInt32Filter epoch = 5 [(google.api.field_behavior) = OPTIONAL];
  // Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
  UInt32Filter epoch_start_date_time = 6 [(google.api.field_behavior) = OPTIONAL];
  // Filter by block_root - The beacon block root hash that was attested, null means the attestation was missed (optional)
  NullableStringFilter block_root = 7 [(google.api.field_behavior) = OPTIONAL];
  // Filter by slot_distance - The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (optional)
  NullableUInt32Filter slot_distance = 8 [(google.api.field_behavior) = OPTIONAL];
  // Filter by propagation_distance - The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (optional)
  NullableUInt32Filter propagation_distance = 9 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of fct_attestation_correctness_by_validator_head to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 10 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListFctAttestationCorrectnessByValidatorHead` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 11 [(google.api.field_behavior) = OPTIONAL];
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 12 [(google.api.field_behavior) = OPTIONAL];
}

// Response for listing fct_attestation_correctness_by_validator_head records
message ListFctAttestationCorrectnessByValidatorHeadResponse {
  // The list of fct_attestation_correctness_by_validator_head.
  repeated FctAttestationCorrectnessByValidatorHead fct_attestation_correctness_by_validator_head = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single fct_attestation_correctness_by_validator_head record by primary key
message GetFctAttestationCorrectnessByValidatorHeadRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// Response for getting a single fct_attestation_correctness_by_validator_head record
message GetFctAttestationCorrectnessByValidatorHeadResponse {
  FctAttestationCorrectnessByValidatorHead item = 1;
}

// Query fct_attestation_correctness_by_validator_head data
service FctAttestationCorrectnessByValidatorHeadService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListFctAttestationCorrectnessByValidatorHeadRequest) returns (ListFctAttestationCorrectnessByValidatorHeadResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_attestation_correctness_by_validator_head"
    };
  }
  // Get record | Retrieve a single record by slot_start_date_time
  rpc Get(GetFctAttestationCorrectnessByValidatorHeadRequest) returns (GetFctAttestationCorrectnessByValidatorHeadResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_attestation_correctness_by_validator_head/{slot_start_date_time}"
    };
  }
}
