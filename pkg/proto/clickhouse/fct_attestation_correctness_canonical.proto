syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "clickhouse/annotations.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Attestation correctness of a block for the finalized chain

message FctAttestationCorrectnessCanonical {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The epoch number containing the slot
  uint32 epoch = 14;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15;
  // The beacon block root hash
  google.protobuf.StringValue block_root = 16;
  // The maximum number of scheduled votes for the block
  uint32 votes_max = 17;
  // The number of votes for the block proposed in the current slot
  google.protobuf.UInt32Value votes_head = 18;
  // The number of votes for any blocks proposed in previous slots
  google.protobuf.UInt32Value votes_other = 19;
}

// Request for listing fct_attestation_correctness_canonical records
message ListFctAttestationCorrectnessCanonicalRequest {
  // Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required unless using alternatives: slot)
  UInt32Filter slot_start_date_time = 1 [(google.api.field_behavior) = OPTIONAL, (clickhouse.v1.required_group) = "primary_key"];

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 2 [(google.api.field_behavior) = OPTIONAL];
  // Filter by slot - The slot number (PROJECTION: p_by_slot - alternative to slot_start_date_time)
  UInt32Filter slot = 3 [(google.api.field_behavior) = OPTIONAL, (clickhouse.v1.projection_name) = "p_by_slot", (clickhouse.v1.projection_alternative_for) = "slot_start_date_time", (clickhouse.v1.required_group) = "primary_key"];
  // Filter by epoch - The epoch number containing the slot (optional)
  UInt32Filter epoch = 4 [(google.api.field_behavior) = OPTIONAL];
  // Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
  UInt32Filter epoch_start_date_time = 5 [(google.api.field_behavior) = OPTIONAL];
  // Filter by block_root - The beacon block root hash (optional)
  NullableStringFilter block_root = 6 [(google.api.field_behavior) = OPTIONAL];
  // Filter by votes_max - The maximum number of scheduled votes for the block (optional)
  UInt32Filter votes_max = 7 [(google.api.field_behavior) = OPTIONAL];
  // Filter by votes_head - The number of votes for the block proposed in the current slot (optional)
  NullableUInt32Filter votes_head = 8 [(google.api.field_behavior) = OPTIONAL];
  // Filter by votes_other - The number of votes for any blocks proposed in previous slots (optional)
  NullableUInt32Filter votes_other = 9 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of fct_attestation_correctness_canonical to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 10 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListFctAttestationCorrectnessCanonical` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 11 [(google.api.field_behavior) = OPTIONAL];
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 12 [(google.api.field_behavior) = OPTIONAL];
}

// Response for listing fct_attestation_correctness_canonical records
message ListFctAttestationCorrectnessCanonicalResponse {
  // The list of fct_attestation_correctness_canonical.
  repeated FctAttestationCorrectnessCanonical fct_attestation_correctness_canonical = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single fct_attestation_correctness_canonical record by primary key
message GetFctAttestationCorrectnessCanonicalRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// Response for getting a single fct_attestation_correctness_canonical record
message GetFctAttestationCorrectnessCanonicalResponse {
  FctAttestationCorrectnessCanonical item = 1;
}

// Query fct_attestation_correctness_canonical data
service FctAttestationCorrectnessCanonicalService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListFctAttestationCorrectnessCanonicalRequest) returns (ListFctAttestationCorrectnessCanonicalResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_attestation_correctness_canonical"
    };
  }
  // Get record | Retrieve a single record by slot_start_date_time
  rpc Get(GetFctAttestationCorrectnessCanonicalRequest) returns (GetFctAttestationCorrectnessCanonicalResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_attestation_correctness_canonical/{slot_start_date_time}"
    };
  }
}
