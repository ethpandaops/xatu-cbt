syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Attestation correctness of a block for the unfinalized chain. Forks in the chain may cause multiple block roots for the same slot to be present

message FctAttestationCorrectnessHead {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The epoch number containing the slot
  uint32 epoch = 14;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15;
  // The beacon block root hash
  google.protobuf.StringValue block_root = 16;
  // The maximum number of scheduled votes for the block
  uint32 votes_max = 17;
  // The number of votes for the block proposed in the current slot
  google.protobuf.UInt32Value votes_head = 18;
  // The number of votes for any blocks proposed in previous slots
  google.protobuf.UInt32Value votes_other = 19;
}

// ListFctAttestationCorrectnessHeadRequest is the request message for listing fct_attestation_correctness_head records
message ListFctAttestationCorrectnessHeadRequest {
  // Filter by slot_start_date_time (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by updated_date_time (optional)
  UInt32Filter updated_date_time = 2;
  // Filter by slot (optional)
  UInt32Filter slot = 3;
  // Filter by epoch (optional)
  UInt32Filter epoch = 4;
  // Filter by epoch_start_date_time (optional)
  UInt32Filter epoch_start_date_time = 5;
  // Filter by block_root (optional)
  NullableStringFilter block_root = 6;
  // Filter by votes_max (optional)
  UInt32Filter votes_max = 7;
  // Filter by votes_head (optional)
  NullableUInt32Filter votes_head = 8;
  // Filter by votes_other (optional)
  NullableUInt32Filter votes_other = 9;

  // The maximum number of fct_attestation_correctness_head to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 10;
  // A page token, received from a previous `ListFctAttestationCorrectnessHead` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 11;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 12;
}

// ListFctAttestationCorrectnessHeadResponse is the response message for listing fct_attestation_correctness_head records
message ListFctAttestationCorrectnessHeadResponse {
  // The list of fct_attestation_correctness_head.
  repeated FctAttestationCorrectnessHead fct_attestation_correctness_head = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// GetFctAttestationCorrectnessHeadRequest is the request message for getting a single fct_attestation_correctness_head record by primary key
message GetFctAttestationCorrectnessHeadRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// GetFctAttestationCorrectnessHeadResponse is the response message for getting a single fct_attestation_correctness_head record
message GetFctAttestationCorrectnessHeadResponse {
  FctAttestationCorrectnessHead item = 1;
}

// FctAttestationCorrectnessHeadService provides RPC methods for querying fct_attestation_correctness_head data
service FctAttestationCorrectnessHeadService {
  // List returns paginated fct_attestation_correctness_head records
  rpc List(ListFctAttestationCorrectnessHeadRequest) returns (ListFctAttestationCorrectnessHeadResponse);
  // Get returns a single fct_attestation_correctness_head record by primary key
  rpc Get(GetFctAttestationCorrectnessHeadRequest) returns (GetFctAttestationCorrectnessHeadResponse);
}
