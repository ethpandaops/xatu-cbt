// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: fct_attestation_first_seen_by_node.proto

package clickhouse

import (
	_ "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse/clickhouse"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FctAttestationFirstSeenByNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// The slot number
	Slot uint32 `protobuf:"varint,12,opt,name=slot,proto3" json:"slot,omitempty"`
	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,13,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// The epoch number containing the slot
	Epoch uint32 `protobuf:"varint,14,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The wall clock time when the epoch started
	EpochStartDateTime uint32 `protobuf:"varint,15,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Number of attestations first seen by this node in this slot
	AttestationCount uint32 `protobuf:"varint,16,opt,name=attestation_count,json=attestationCount,proto3" json:"attestation_count,omitempty"`
	// Average time from slot start to see attestations (milliseconds)
	AvgSeenSlotStartDiff float32 `protobuf:"fixed32,17,opt,name=avg_seen_slot_start_diff,json=avgSeenSlotStartDiff,proto3" json:"avg_seen_slot_start_diff,omitempty"`
	// Minimum time from slot start to see an attestation (milliseconds)
	MinSeenSlotStartDiff uint32 `protobuf:"varint,18,opt,name=min_seen_slot_start_diff,json=minSeenSlotStartDiff,proto3" json:"min_seen_slot_start_diff,omitempty"`
	// Maximum time from slot start to see an attestation (milliseconds)
	MaxSeenSlotStartDiff uint32 `protobuf:"varint,19,opt,name=max_seen_slot_start_diff,json=maxSeenSlotStartDiff,proto3" json:"max_seen_slot_start_diff,omitempty"`
	// Representative beacon block root (from most common attestation target)
	BlockRoot string `protobuf:"bytes,20,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// Username of the node
	Username string `protobuf:"bytes,21,opt,name=username,proto3" json:"username,omitempty"`
	// ID of the node
	NodeId string `protobuf:"bytes,22,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified"
	Classification string `protobuf:"bytes,23,opt,name=classification,proto3" json:"classification,omitempty"`
	// Name of the client
	MetaClientName string `protobuf:"bytes,24,opt,name=meta_client_name,json=metaClientName,proto3" json:"meta_client_name,omitempty"`
	// Version of the client
	MetaClientVersion string `protobuf:"bytes,25,opt,name=meta_client_version,json=metaClientVersion,proto3" json:"meta_client_version,omitempty"`
	// Implementation of the client
	MetaClientImplementation string `protobuf:"bytes,26,opt,name=meta_client_implementation,json=metaClientImplementation,proto3" json:"meta_client_implementation,omitempty"`
	// City of the client
	MetaClientGeoCity string `protobuf:"bytes,27,opt,name=meta_client_geo_city,json=metaClientGeoCity,proto3" json:"meta_client_geo_city,omitempty"`
	// Country of the client
	MetaClientGeoCountry string `protobuf:"bytes,28,opt,name=meta_client_geo_country,json=metaClientGeoCountry,proto3" json:"meta_client_geo_country,omitempty"`
	// Country code of the client
	MetaClientGeoCountryCode string `protobuf:"bytes,29,opt,name=meta_client_geo_country_code,json=metaClientGeoCountryCode,proto3" json:"meta_client_geo_country_code,omitempty"`
	// Continent code of the client
	MetaClientGeoContinentCode string `protobuf:"bytes,30,opt,name=meta_client_geo_continent_code,json=metaClientGeoContinentCode,proto3" json:"meta_client_geo_continent_code,omitempty"`
	// Longitude of the client
	MetaClientGeoLongitude *wrapperspb.DoubleValue `protobuf:"bytes,31,opt,name=meta_client_geo_longitude,json=metaClientGeoLongitude,proto3" json:"meta_client_geo_longitude,omitempty"`
	// Latitude of the client
	MetaClientGeoLatitude *wrapperspb.DoubleValue `protobuf:"bytes,32,opt,name=meta_client_geo_latitude,json=metaClientGeoLatitude,proto3" json:"meta_client_geo_latitude,omitempty"`
	// Autonomous system number of the client
	MetaClientGeoAutonomousSystemNumber *wrapperspb.UInt32Value `protobuf:"bytes,33,opt,name=meta_client_geo_autonomous_system_number,json=metaClientGeoAutonomousSystemNumber,proto3" json:"meta_client_geo_autonomous_system_number,omitempty"`
	// Autonomous system organization of the client
	MetaClientGeoAutonomousSystemOrganization *wrapperspb.StringValue `protobuf:"bytes,34,opt,name=meta_client_geo_autonomous_system_organization,json=metaClientGeoAutonomousSystemOrganization,proto3" json:"meta_client_geo_autonomous_system_organization,omitempty"`
	// Ethereum consensus client version
	MetaConsensusVersion string `protobuf:"bytes,35,opt,name=meta_consensus_version,json=metaConsensusVersion,proto3" json:"meta_consensus_version,omitempty"`
	// Ethereum consensus client implementation
	MetaConsensusImplementation string `protobuf:"bytes,36,opt,name=meta_consensus_implementation,json=metaConsensusImplementation,proto3" json:"meta_consensus_implementation,omitempty"`
}

func (x *FctAttestationFirstSeenByNode) Reset() {
	*x = FctAttestationFirstSeenByNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FctAttestationFirstSeenByNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FctAttestationFirstSeenByNode) ProtoMessage() {}

func (x *FctAttestationFirstSeenByNode) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FctAttestationFirstSeenByNode.ProtoReflect.Descriptor instead.
func (*FctAttestationFirstSeenByNode) Descriptor() ([]byte, []int) {
	return file_fct_attestation_first_seen_by_node_proto_rawDescGZIP(), []int{0}
}

func (x *FctAttestationFirstSeenByNode) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *FctAttestationFirstSeenByNode) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *FctAttestationFirstSeenByNode) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *FctAttestationFirstSeenByNode) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *FctAttestationFirstSeenByNode) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *FctAttestationFirstSeenByNode) GetAttestationCount() uint32 {
	if x != nil {
		return x.AttestationCount
	}
	return 0
}

func (x *FctAttestationFirstSeenByNode) GetAvgSeenSlotStartDiff() float32 {
	if x != nil {
		return x.AvgSeenSlotStartDiff
	}
	return 0
}

func (x *FctAttestationFirstSeenByNode) GetMinSeenSlotStartDiff() uint32 {
	if x != nil {
		return x.MinSeenSlotStartDiff
	}
	return 0
}

func (x *FctAttestationFirstSeenByNode) GetMaxSeenSlotStartDiff() uint32 {
	if x != nil {
		return x.MaxSeenSlotStartDiff
	}
	return 0
}

func (x *FctAttestationFirstSeenByNode) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientName() string {
	if x != nil {
		return x.MetaClientName
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientVersion() string {
	if x != nil {
		return x.MetaClientVersion
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientImplementation() string {
	if x != nil {
		return x.MetaClientImplementation
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientGeoCity() string {
	if x != nil {
		return x.MetaClientGeoCity
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientGeoCountry() string {
	if x != nil {
		return x.MetaClientGeoCountry
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientGeoCountryCode() string {
	if x != nil {
		return x.MetaClientGeoCountryCode
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientGeoContinentCode() string {
	if x != nil {
		return x.MetaClientGeoContinentCode
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientGeoLongitude() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MetaClientGeoLongitude
	}
	return nil
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientGeoLatitude() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MetaClientGeoLatitude
	}
	return nil
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientGeoAutonomousSystemNumber() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MetaClientGeoAutonomousSystemNumber
	}
	return nil
}

func (x *FctAttestationFirstSeenByNode) GetMetaClientGeoAutonomousSystemOrganization() *wrapperspb.StringValue {
	if x != nil {
		return x.MetaClientGeoAutonomousSystemOrganization
	}
	return nil
}

func (x *FctAttestationFirstSeenByNode) GetMetaConsensusVersion() string {
	if x != nil {
		return x.MetaConsensusVersion
	}
	return ""
}

func (x *FctAttestationFirstSeenByNode) GetMetaConsensusImplementation() string {
	if x != nil {
		return x.MetaConsensusImplementation
	}
	return ""
}

// Request for listing fct_attestation_first_seen_by_node records
type ListFctAttestationFirstSeenByNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required unless using alternatives: slot)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by meta_client_name - Name of the client (ORDER BY column 2 - optional)
	MetaClientName *StringFilter `protobuf:"bytes,2,opt,name=meta_client_name,json=metaClientName,proto3" json:"meta_client_name,omitempty"`
	// Filter by updated_date_time - Timestamp when the record was last updated (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,3,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by slot - The slot number (PROJECTION: p_by_slot - alternative to slot_start_date_time)
	Slot *UInt32Filter `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by epoch - The epoch number containing the slot (optional)
	Epoch *UInt32Filter `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,6,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by attestation_count - Number of attestations first seen by this node in this slot (optional)
	AttestationCount *UInt32Filter `protobuf:"bytes,7,opt,name=attestation_count,json=attestationCount,proto3" json:"attestation_count,omitempty"`
	// Filter by avg_seen_slot_start_diff - Average time from slot start to see attestations (milliseconds) (optional)
	AvgSeenSlotStartDiff *wrapperspb.FloatValue `protobuf:"bytes,8,opt,name=avg_seen_slot_start_diff,json=avgSeenSlotStartDiff,proto3" json:"avg_seen_slot_start_diff,omitempty"`
	// Filter by min_seen_slot_start_diff - Minimum time from slot start to see an attestation (milliseconds) (optional)
	MinSeenSlotStartDiff *UInt32Filter `protobuf:"bytes,9,opt,name=min_seen_slot_start_diff,json=minSeenSlotStartDiff,proto3" json:"min_seen_slot_start_diff,omitempty"`
	// Filter by max_seen_slot_start_diff - Maximum time from slot start to see an attestation (milliseconds) (optional)
	MaxSeenSlotStartDiff *UInt32Filter `protobuf:"bytes,10,opt,name=max_seen_slot_start_diff,json=maxSeenSlotStartDiff,proto3" json:"max_seen_slot_start_diff,omitempty"`
	// Filter by block_root - Representative beacon block root (from most common attestation target) (optional)
	BlockRoot *StringFilter `protobuf:"bytes,11,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// Filter by username - Username of the node (optional)
	Username *StringFilter `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	// Filter by node_id - ID of the node (optional)
	NodeId *StringFilter `protobuf:"bytes,13,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Filter by classification - Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified" (optional)
	Classification *StringFilter `protobuf:"bytes,14,opt,name=classification,proto3" json:"classification,omitempty"`
	// Filter by meta_client_version - Version of the client (optional)
	MetaClientVersion *StringFilter `protobuf:"bytes,15,opt,name=meta_client_version,json=metaClientVersion,proto3" json:"meta_client_version,omitempty"`
	// Filter by meta_client_implementation - Implementation of the client (optional)
	MetaClientImplementation *StringFilter `protobuf:"bytes,16,opt,name=meta_client_implementation,json=metaClientImplementation,proto3" json:"meta_client_implementation,omitempty"`
	// Filter by meta_client_geo_city - City of the client (optional)
	MetaClientGeoCity *StringFilter `protobuf:"bytes,17,opt,name=meta_client_geo_city,json=metaClientGeoCity,proto3" json:"meta_client_geo_city,omitempty"`
	// Filter by meta_client_geo_country - Country of the client (optional)
	MetaClientGeoCountry *StringFilter `protobuf:"bytes,18,opt,name=meta_client_geo_country,json=metaClientGeoCountry,proto3" json:"meta_client_geo_country,omitempty"`
	// Filter by meta_client_geo_country_code - Country code of the client (optional)
	MetaClientGeoCountryCode *StringFilter `protobuf:"bytes,19,opt,name=meta_client_geo_country_code,json=metaClientGeoCountryCode,proto3" json:"meta_client_geo_country_code,omitempty"`
	// Filter by meta_client_geo_continent_code - Continent code of the client (optional)
	MetaClientGeoContinentCode *StringFilter `protobuf:"bytes,20,opt,name=meta_client_geo_continent_code,json=metaClientGeoContinentCode,proto3" json:"meta_client_geo_continent_code,omitempty"`
	// Filter by meta_client_geo_longitude - Longitude of the client (optional)
	MetaClientGeoLongitude *wrapperspb.DoubleValue `protobuf:"bytes,21,opt,name=meta_client_geo_longitude,json=metaClientGeoLongitude,proto3" json:"meta_client_geo_longitude,omitempty"`
	// Filter by meta_client_geo_latitude - Latitude of the client (optional)
	MetaClientGeoLatitude *wrapperspb.DoubleValue `protobuf:"bytes,22,opt,name=meta_client_geo_latitude,json=metaClientGeoLatitude,proto3" json:"meta_client_geo_latitude,omitempty"`
	// Filter by meta_client_geo_autonomous_system_number - Autonomous system number of the client (optional)
	MetaClientGeoAutonomousSystemNumber *NullableUInt32Filter `protobuf:"bytes,23,opt,name=meta_client_geo_autonomous_system_number,json=metaClientGeoAutonomousSystemNumber,proto3" json:"meta_client_geo_autonomous_system_number,omitempty"`
	// Filter by meta_client_geo_autonomous_system_organization - Autonomous system organization of the client (optional)
	MetaClientGeoAutonomousSystemOrganization *NullableStringFilter `protobuf:"bytes,24,opt,name=meta_client_geo_autonomous_system_organization,json=metaClientGeoAutonomousSystemOrganization,proto3" json:"meta_client_geo_autonomous_system_organization,omitempty"`
	// Filter by meta_consensus_version - Ethereum consensus client version (optional)
	MetaConsensusVersion *StringFilter `protobuf:"bytes,25,opt,name=meta_consensus_version,json=metaConsensusVersion,proto3" json:"meta_consensus_version,omitempty"`
	// Filter by meta_consensus_implementation - Ethereum consensus client implementation (optional)
	MetaConsensusImplementation *StringFilter `protobuf:"bytes,26,opt,name=meta_consensus_implementation,json=metaConsensusImplementation,proto3" json:"meta_consensus_implementation,omitempty"`
	// The maximum number of fct_attestation_first_seen_by_node to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,27,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListFctAttestationFirstSeenByNode` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,28,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,29,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListFctAttestationFirstSeenByNodeRequest) Reset() {
	*x = ListFctAttestationFirstSeenByNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctAttestationFirstSeenByNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctAttestationFirstSeenByNodeRequest) ProtoMessage() {}

func (x *ListFctAttestationFirstSeenByNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctAttestationFirstSeenByNodeRequest.ProtoReflect.Descriptor instead.
func (*ListFctAttestationFirstSeenByNodeRequest) Descriptor() ([]byte, []int) {
	return file_fct_attestation_first_seen_by_node_proto_rawDescGZIP(), []int{1}
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientName() *StringFilter {
	if x != nil {
		return x.MetaClientName
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetAttestationCount() *UInt32Filter {
	if x != nil {
		return x.AttestationCount
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetAvgSeenSlotStartDiff() *wrapperspb.FloatValue {
	if x != nil {
		return x.AvgSeenSlotStartDiff
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMinSeenSlotStartDiff() *UInt32Filter {
	if x != nil {
		return x.MinSeenSlotStartDiff
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMaxSeenSlotStartDiff() *UInt32Filter {
	if x != nil {
		return x.MaxSeenSlotStartDiff
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetBlockRoot() *StringFilter {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetUsername() *StringFilter {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetNodeId() *StringFilter {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetClassification() *StringFilter {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientVersion() *StringFilter {
	if x != nil {
		return x.MetaClientVersion
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientImplementation() *StringFilter {
	if x != nil {
		return x.MetaClientImplementation
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientGeoCity() *StringFilter {
	if x != nil {
		return x.MetaClientGeoCity
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientGeoCountry() *StringFilter {
	if x != nil {
		return x.MetaClientGeoCountry
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientGeoCountryCode() *StringFilter {
	if x != nil {
		return x.MetaClientGeoCountryCode
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientGeoContinentCode() *StringFilter {
	if x != nil {
		return x.MetaClientGeoContinentCode
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientGeoLongitude() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MetaClientGeoLongitude
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientGeoLatitude() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MetaClientGeoLatitude
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientGeoAutonomousSystemNumber() *NullableUInt32Filter {
	if x != nil {
		return x.MetaClientGeoAutonomousSystemNumber
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaClientGeoAutonomousSystemOrganization() *NullableStringFilter {
	if x != nil {
		return x.MetaClientGeoAutonomousSystemOrganization
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaConsensusVersion() *StringFilter {
	if x != nil {
		return x.MetaConsensusVersion
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetMetaConsensusImplementation() *StringFilter {
	if x != nil {
		return x.MetaConsensusImplementation
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFctAttestationFirstSeenByNodeRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response for listing fct_attestation_first_seen_by_node records
type ListFctAttestationFirstSeenByNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fct_attestation_first_seen_by_node.
	FctAttestationFirstSeenByNode []*FctAttestationFirstSeenByNode `protobuf:"bytes,1,rep,name=fct_attestation_first_seen_by_node,json=fctAttestationFirstSeenByNode,proto3" json:"fct_attestation_first_seen_by_node,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFctAttestationFirstSeenByNodeResponse) Reset() {
	*x = ListFctAttestationFirstSeenByNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctAttestationFirstSeenByNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctAttestationFirstSeenByNodeResponse) ProtoMessage() {}

func (x *ListFctAttestationFirstSeenByNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctAttestationFirstSeenByNodeResponse.ProtoReflect.Descriptor instead.
func (*ListFctAttestationFirstSeenByNodeResponse) Descriptor() ([]byte, []int) {
	return file_fct_attestation_first_seen_by_node_proto_rawDescGZIP(), []int{2}
}

func (x *ListFctAttestationFirstSeenByNodeResponse) GetFctAttestationFirstSeenByNode() []*FctAttestationFirstSeenByNode {
	if x != nil {
		return x.FctAttestationFirstSeenByNode
	}
	return nil
}

func (x *ListFctAttestationFirstSeenByNodeResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request for getting a single fct_attestation_first_seen_by_node record by primary key
type GetFctAttestationFirstSeenByNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetFctAttestationFirstSeenByNodeRequest) Reset() {
	*x = GetFctAttestationFirstSeenByNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctAttestationFirstSeenByNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctAttestationFirstSeenByNodeRequest) ProtoMessage() {}

func (x *GetFctAttestationFirstSeenByNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctAttestationFirstSeenByNodeRequest.ProtoReflect.Descriptor instead.
func (*GetFctAttestationFirstSeenByNodeRequest) Descriptor() ([]byte, []int) {
	return file_fct_attestation_first_seen_by_node_proto_rawDescGZIP(), []int{3}
}

func (x *GetFctAttestationFirstSeenByNodeRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// Response for getting a single fct_attestation_first_seen_by_node record
type GetFctAttestationFirstSeenByNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *FctAttestationFirstSeenByNode `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetFctAttestationFirstSeenByNodeResponse) Reset() {
	*x = GetFctAttestationFirstSeenByNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctAttestationFirstSeenByNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctAttestationFirstSeenByNodeResponse) ProtoMessage() {}

func (x *GetFctAttestationFirstSeenByNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_first_seen_by_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctAttestationFirstSeenByNodeResponse.ProtoReflect.Descriptor instead.
func (*GetFctAttestationFirstSeenByNodeResponse) Descriptor() ([]byte, []int) {
	return file_fct_attestation_first_seen_by_node_proto_rawDescGZIP(), []int{4}
}

func (x *GetFctAttestationFirstSeenByNodeResponse) GetItem() *FctAttestationFirstSeenByNode {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_fct_attestation_first_seen_by_node_proto protoreflect.FileDescriptor

var file_fct_attestation_first_seen_by_node_proto_rawDesc = []byte{
	0x0a, 0x28, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x0b, 0x0a, 0x1d, 0x46,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x61, 0x76, 0x67, 0x53, 0x65, 0x65, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x36, 0x0a, 0x18, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x65, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x65, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6f, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d,
	0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x19, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x6d, 0x65,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x6f, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x73, 0x0a, 0x28, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x23, 0x6d, 0x65, 0x74,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f,
	0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x7f, 0x0a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x29, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x47, 0x65, 0x6f, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x11, 0x0a, 0x28,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x12, 0xe0, 0x41, 0x01, 0x9a, 0xb5,
	0x18, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x11, 0x73,
	0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x37, 0xe0, 0x41, 0x01, 0x8a, 0xb5, 0x18, 0x14,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x92, 0xb5, 0x18, 0x09, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x9a, 0xb5, 0x18, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x49, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x18, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x61, 0x76, 0x67, 0x53, 0x65, 0x65,
	0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x4e,
	0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x65,
	0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x4e,
	0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x65,
	0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x35,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x11, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x18,
	0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11,
	0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x69, 0x74,
	0x79, 0x12, 0x4d, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x56, 0x0a, 0x1c, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x18,
	0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x1e, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1a, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x61,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x75,
	0x0a, 0x28, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x6f, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x23, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x41,
	0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f,
	0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x29,
	0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x41, 0x75, 0x74,
	0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x16, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x1d, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1b, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x29, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x22, 0x66, 0x63, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x1d, 0x66, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5a,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x28, 0x47, 0x65,
	0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32, 0xf2,
	0x02, 0x0a, 0x24, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2d, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43,
	0x12, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x7b, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x7d, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61,
	0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_fct_attestation_first_seen_by_node_proto_rawDescOnce sync.Once
	file_fct_attestation_first_seen_by_node_proto_rawDescData = file_fct_attestation_first_seen_by_node_proto_rawDesc
)

func file_fct_attestation_first_seen_by_node_proto_rawDescGZIP() []byte {
	file_fct_attestation_first_seen_by_node_proto_rawDescOnce.Do(func() {
		file_fct_attestation_first_seen_by_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_fct_attestation_first_seen_by_node_proto_rawDescData)
	})
	return file_fct_attestation_first_seen_by_node_proto_rawDescData
}

var file_fct_attestation_first_seen_by_node_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fct_attestation_first_seen_by_node_proto_goTypes = []any{
	(*FctAttestationFirstSeenByNode)(nil),             // 0: cbt.FctAttestationFirstSeenByNode
	(*ListFctAttestationFirstSeenByNodeRequest)(nil),  // 1: cbt.ListFctAttestationFirstSeenByNodeRequest
	(*ListFctAttestationFirstSeenByNodeResponse)(nil), // 2: cbt.ListFctAttestationFirstSeenByNodeResponse
	(*GetFctAttestationFirstSeenByNodeRequest)(nil),   // 3: cbt.GetFctAttestationFirstSeenByNodeRequest
	(*GetFctAttestationFirstSeenByNodeResponse)(nil),  // 4: cbt.GetFctAttestationFirstSeenByNodeResponse
	(*wrapperspb.DoubleValue)(nil),                    // 5: google.protobuf.DoubleValue
	(*wrapperspb.UInt32Value)(nil),                    // 6: google.protobuf.UInt32Value
	(*wrapperspb.StringValue)(nil),                    // 7: google.protobuf.StringValue
	(*UInt32Filter)(nil),                              // 8: cbt.UInt32Filter
	(*StringFilter)(nil),                              // 9: cbt.StringFilter
	(*wrapperspb.FloatValue)(nil),                     // 10: google.protobuf.FloatValue
	(*NullableUInt32Filter)(nil),                      // 11: cbt.NullableUInt32Filter
	(*NullableStringFilter)(nil),                      // 12: cbt.NullableStringFilter
}
var file_fct_attestation_first_seen_by_node_proto_depIdxs = []int32{
	5,  // 0: cbt.FctAttestationFirstSeenByNode.meta_client_geo_longitude:type_name -> google.protobuf.DoubleValue
	5,  // 1: cbt.FctAttestationFirstSeenByNode.meta_client_geo_latitude:type_name -> google.protobuf.DoubleValue
	6,  // 2: cbt.FctAttestationFirstSeenByNode.meta_client_geo_autonomous_system_number:type_name -> google.protobuf.UInt32Value
	7,  // 3: cbt.FctAttestationFirstSeenByNode.meta_client_geo_autonomous_system_organization:type_name -> google.protobuf.StringValue
	8,  // 4: cbt.ListFctAttestationFirstSeenByNodeRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	9,  // 5: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_name:type_name -> cbt.StringFilter
	8,  // 6: cbt.ListFctAttestationFirstSeenByNodeRequest.updated_date_time:type_name -> cbt.UInt32Filter
	8,  // 7: cbt.ListFctAttestationFirstSeenByNodeRequest.slot:type_name -> cbt.UInt32Filter
	8,  // 8: cbt.ListFctAttestationFirstSeenByNodeRequest.epoch:type_name -> cbt.UInt32Filter
	8,  // 9: cbt.ListFctAttestationFirstSeenByNodeRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	8,  // 10: cbt.ListFctAttestationFirstSeenByNodeRequest.attestation_count:type_name -> cbt.UInt32Filter
	10, // 11: cbt.ListFctAttestationFirstSeenByNodeRequest.avg_seen_slot_start_diff:type_name -> google.protobuf.FloatValue
	8,  // 12: cbt.ListFctAttestationFirstSeenByNodeRequest.min_seen_slot_start_diff:type_name -> cbt.UInt32Filter
	8,  // 13: cbt.ListFctAttestationFirstSeenByNodeRequest.max_seen_slot_start_diff:type_name -> cbt.UInt32Filter
	9,  // 14: cbt.ListFctAttestationFirstSeenByNodeRequest.block_root:type_name -> cbt.StringFilter
	9,  // 15: cbt.ListFctAttestationFirstSeenByNodeRequest.username:type_name -> cbt.StringFilter
	9,  // 16: cbt.ListFctAttestationFirstSeenByNodeRequest.node_id:type_name -> cbt.StringFilter
	9,  // 17: cbt.ListFctAttestationFirstSeenByNodeRequest.classification:type_name -> cbt.StringFilter
	9,  // 18: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_version:type_name -> cbt.StringFilter
	9,  // 19: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_implementation:type_name -> cbt.StringFilter
	9,  // 20: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_geo_city:type_name -> cbt.StringFilter
	9,  // 21: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_geo_country:type_name -> cbt.StringFilter
	9,  // 22: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_geo_country_code:type_name -> cbt.StringFilter
	9,  // 23: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_geo_continent_code:type_name -> cbt.StringFilter
	5,  // 24: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_geo_longitude:type_name -> google.protobuf.DoubleValue
	5,  // 25: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_geo_latitude:type_name -> google.protobuf.DoubleValue
	11, // 26: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_geo_autonomous_system_number:type_name -> cbt.NullableUInt32Filter
	12, // 27: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_client_geo_autonomous_system_organization:type_name -> cbt.NullableStringFilter
	9,  // 28: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_consensus_version:type_name -> cbt.StringFilter
	9,  // 29: cbt.ListFctAttestationFirstSeenByNodeRequest.meta_consensus_implementation:type_name -> cbt.StringFilter
	0,  // 30: cbt.ListFctAttestationFirstSeenByNodeResponse.fct_attestation_first_seen_by_node:type_name -> cbt.FctAttestationFirstSeenByNode
	0,  // 31: cbt.GetFctAttestationFirstSeenByNodeResponse.item:type_name -> cbt.FctAttestationFirstSeenByNode
	1,  // 32: cbt.FctAttestationFirstSeenByNodeService.List:input_type -> cbt.ListFctAttestationFirstSeenByNodeRequest
	3,  // 33: cbt.FctAttestationFirstSeenByNodeService.Get:input_type -> cbt.GetFctAttestationFirstSeenByNodeRequest
	2,  // 34: cbt.FctAttestationFirstSeenByNodeService.List:output_type -> cbt.ListFctAttestationFirstSeenByNodeResponse
	4,  // 35: cbt.FctAttestationFirstSeenByNodeService.Get:output_type -> cbt.GetFctAttestationFirstSeenByNodeResponse
	34, // [34:36] is the sub-list for method output_type
	32, // [32:34] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_fct_attestation_first_seen_by_node_proto_init() }
func file_fct_attestation_first_seen_by_node_proto_init() {
	if File_fct_attestation_first_seen_by_node_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fct_attestation_first_seen_by_node_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FctAttestationFirstSeenByNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_first_seen_by_node_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctAttestationFirstSeenByNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_first_seen_by_node_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctAttestationFirstSeenByNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_first_seen_by_node_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctAttestationFirstSeenByNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_first_seen_by_node_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctAttestationFirstSeenByNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fct_attestation_first_seen_by_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fct_attestation_first_seen_by_node_proto_goTypes,
		DependencyIndexes: file_fct_attestation_first_seen_by_node_proto_depIdxs,
		MessageInfos:      file_fct_attestation_first_seen_by_node_proto_msgTypes,
	}.Build()
	File_fct_attestation_first_seen_by_node_proto = out.File
	file_fct_attestation_first_seen_by_node_proto_rawDesc = nil
	file_fct_attestation_first_seen_by_node_proto_goTypes = nil
	file_fct_attestation_first_seen_by_node_proto_depIdxs = nil
}
