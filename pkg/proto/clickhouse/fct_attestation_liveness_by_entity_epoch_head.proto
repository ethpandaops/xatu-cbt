syntax = "proto3";

package cbt;

import "common.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "clickhouse/annotations.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Attestation liveness aggregated by entity and epoch for the head chain. Reduces slot-level data by ~32x.

message FctAttestationLivenessByEntityEpochHead {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The epoch number
  uint32 epoch = 12;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 13;
  // The entity (staking provider) associated with the validators, unknown if not mapped
  string entity = 14;
  // Attestation status: attested or missed
  string status = 15;
  // Sum of attestations for this epoch/entity/status combination
  uint64 attestation_count = 16;
}

// Request for listing fct_attestation_liveness_by_entity_epoch_head records
message ListFctAttestationLivenessByEntityEpochHeadRequest {
  // Filter by epoch_start_date_time - The wall clock time when the epoch started (PRIMARY KEY - required unless using alternatives: epoch)
  UInt32Filter epoch_start_date_time = 1 [(google.api.field_behavior) = OPTIONAL, (clickhouse.v1.required_group) = "primary_key"];

  // Filter by entity - The entity (staking provider) associated with the validators, unknown if not mapped (ORDER BY column 2 - optional)
  StringFilter entity = 2 [(google.api.field_behavior) = OPTIONAL];

  // Filter by status - Attestation status: attested or missed (ORDER BY column 3 - optional)
  StringFilter status = 3 [(google.api.field_behavior) = OPTIONAL];

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 4 [(google.api.field_behavior) = OPTIONAL];
  // Filter by epoch - The epoch number (PROJECTION: p_by_epoch - alternative to epoch_start_date_time)
  UInt32Filter epoch = 5 [(google.api.field_behavior) = OPTIONAL, (clickhouse.v1.projection_name) = "p_by_epoch", (clickhouse.v1.projection_alternative_for) = "epoch_start_date_time", (clickhouse.v1.required_group) = "primary_key"];
  // Filter by attestation_count - Sum of attestations for this epoch/entity/status combination (optional)
  UInt64Filter attestation_count = 6 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of fct_attestation_liveness_by_entity_epoch_head to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 7 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListFctAttestationLivenessByEntityEpochHead` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 8 [(google.api.field_behavior) = OPTIONAL];
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 9 [(google.api.field_behavior) = OPTIONAL];
}

// Response for listing fct_attestation_liveness_by_entity_epoch_head records
message ListFctAttestationLivenessByEntityEpochHeadResponse {
  // The list of fct_attestation_liveness_by_entity_epoch_head.
  repeated FctAttestationLivenessByEntityEpochHead fct_attestation_liveness_by_entity_epoch_head = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single fct_attestation_liveness_by_entity_epoch_head record by primary key
message GetFctAttestationLivenessByEntityEpochHeadRequest {
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 1; // Primary key (required)
}

// Response for getting a single fct_attestation_liveness_by_entity_epoch_head record
message GetFctAttestationLivenessByEntityEpochHeadResponse {
  FctAttestationLivenessByEntityEpochHead item = 1;
}

// Query fct_attestation_liveness_by_entity_epoch_head data
service FctAttestationLivenessByEntityEpochHeadService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListFctAttestationLivenessByEntityEpochHeadRequest) returns (ListFctAttestationLivenessByEntityEpochHeadResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_attestation_liveness_by_entity_epoch_head"
    };
  }
  // Get record | Retrieve a single record by epoch_start_date_time
  rpc Get(GetFctAttestationLivenessByEntityEpochHeadRequest) returns (GetFctAttestationLivenessByEntityEpochHeadResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_attestation_liveness_by_entity_epoch_head/{epoch_start_date_time}"
    };
  }
}
