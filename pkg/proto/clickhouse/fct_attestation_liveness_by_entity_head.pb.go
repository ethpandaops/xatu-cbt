// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: fct_attestation_liveness_by_entity_head.proto

package clickhouse

import (
	_ "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse/clickhouse"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FctAttestationLivenessByEntityHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// The slot number
	Slot uint32 `protobuf:"varint,12,opt,name=slot,proto3" json:"slot,omitempty"`
	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,13,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// The epoch number containing the slot
	Epoch uint32 `protobuf:"varint,14,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The wall clock time when the epoch started
	EpochStartDateTime uint32 `protobuf:"varint,15,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// The entity (staking provider) associated with the validators, unknown if not mapped
	Entity string `protobuf:"bytes,16,opt,name=entity,proto3" json:"entity,omitempty"`
	// Attestation status: attested or missed
	Status string `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// Number of attestations for this entity/status combination
	AttestationCount uint32 `protobuf:"varint,18,opt,name=attestation_count,json=attestationCount,proto3" json:"attestation_count,omitempty"`
}

func (x *FctAttestationLivenessByEntityHead) Reset() {
	*x = FctAttestationLivenessByEntityHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FctAttestationLivenessByEntityHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FctAttestationLivenessByEntityHead) ProtoMessage() {}

func (x *FctAttestationLivenessByEntityHead) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FctAttestationLivenessByEntityHead.ProtoReflect.Descriptor instead.
func (*FctAttestationLivenessByEntityHead) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_proto_rawDescGZIP(), []int{0}
}

func (x *FctAttestationLivenessByEntityHead) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *FctAttestationLivenessByEntityHead) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *FctAttestationLivenessByEntityHead) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *FctAttestationLivenessByEntityHead) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *FctAttestationLivenessByEntityHead) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *FctAttestationLivenessByEntityHead) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *FctAttestationLivenessByEntityHead) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FctAttestationLivenessByEntityHead) GetAttestationCount() uint32 {
	if x != nil {
		return x.AttestationCount
	}
	return 0
}

// Request for listing fct_attestation_liveness_by_entity_head records
type ListFctAttestationLivenessByEntityHeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required unless using alternatives: slot)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by entity - The entity (staking provider) associated with the validators, unknown if not mapped (ORDER BY column 2 - optional)
	Entity *StringFilter `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
	// Filter by status - Attestation status: attested or missed (ORDER BY column 3 - optional)
	Status *StringFilter `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Filter by updated_date_time - Timestamp when the record was last updated (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,4,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by slot - The slot number (PROJECTION: p_by_slot - alternative to slot_start_date_time)
	Slot *UInt32Filter `protobuf:"bytes,5,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by epoch - The epoch number containing the slot (optional)
	Epoch *UInt32Filter `protobuf:"bytes,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,7,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by attestation_count - Number of attestations for this entity/status combination (optional)
	AttestationCount *UInt32Filter `protobuf:"bytes,8,opt,name=attestation_count,json=attestationCount,proto3" json:"attestation_count,omitempty"`
	// The maximum number of fct_attestation_liveness_by_entity_head to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,9,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListFctAttestationLivenessByEntityHead` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,10,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,11,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) Reset() {
	*x = ListFctAttestationLivenessByEntityHeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctAttestationLivenessByEntityHeadRequest) ProtoMessage() {}

func (x *ListFctAttestationLivenessByEntityHeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctAttestationLivenessByEntityHeadRequest.ProtoReflect.Descriptor instead.
func (*ListFctAttestationLivenessByEntityHeadRequest) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_proto_rawDescGZIP(), []int{1}
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetEntity() *StringFilter {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetStatus() *StringFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetAttestationCount() *UInt32Filter {
	if x != nil {
		return x.AttestationCount
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFctAttestationLivenessByEntityHeadRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response for listing fct_attestation_liveness_by_entity_head records
type ListFctAttestationLivenessByEntityHeadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fct_attestation_liveness_by_entity_head.
	FctAttestationLivenessByEntityHead []*FctAttestationLivenessByEntityHead `protobuf:"bytes,1,rep,name=fct_attestation_liveness_by_entity_head,json=fctAttestationLivenessByEntityHead,proto3" json:"fct_attestation_liveness_by_entity_head,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFctAttestationLivenessByEntityHeadResponse) Reset() {
	*x = ListFctAttestationLivenessByEntityHeadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctAttestationLivenessByEntityHeadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctAttestationLivenessByEntityHeadResponse) ProtoMessage() {}

func (x *ListFctAttestationLivenessByEntityHeadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctAttestationLivenessByEntityHeadResponse.ProtoReflect.Descriptor instead.
func (*ListFctAttestationLivenessByEntityHeadResponse) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_proto_rawDescGZIP(), []int{2}
}

func (x *ListFctAttestationLivenessByEntityHeadResponse) GetFctAttestationLivenessByEntityHead() []*FctAttestationLivenessByEntityHead {
	if x != nil {
		return x.FctAttestationLivenessByEntityHead
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request for getting a single fct_attestation_liveness_by_entity_head record by primary key
type GetFctAttestationLivenessByEntityHeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetFctAttestationLivenessByEntityHeadRequest) Reset() {
	*x = GetFctAttestationLivenessByEntityHeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctAttestationLivenessByEntityHeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctAttestationLivenessByEntityHeadRequest) ProtoMessage() {}

func (x *GetFctAttestationLivenessByEntityHeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctAttestationLivenessByEntityHeadRequest.ProtoReflect.Descriptor instead.
func (*GetFctAttestationLivenessByEntityHeadRequest) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_proto_rawDescGZIP(), []int{3}
}

func (x *GetFctAttestationLivenessByEntityHeadRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// Response for getting a single fct_attestation_liveness_by_entity_head record
type GetFctAttestationLivenessByEntityHeadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *FctAttestationLivenessByEntityHead `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetFctAttestationLivenessByEntityHeadResponse) Reset() {
	*x = GetFctAttestationLivenessByEntityHeadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctAttestationLivenessByEntityHeadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctAttestationLivenessByEntityHeadResponse) ProtoMessage() {}

func (x *GetFctAttestationLivenessByEntityHeadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctAttestationLivenessByEntityHeadResponse.ProtoReflect.Descriptor instead.
func (*GetFctAttestationLivenessByEntityHeadResponse) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_proto_rawDescGZIP(), []int{4}
}

func (x *GetFctAttestationLivenessByEntityHeadResponse) GetItem() *FctAttestationLivenessByEntityHead {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_fct_attestation_liveness_by_entity_head_proto protoreflect.FileDescriptor

var file_fct_attestation_liveness_by_entity_head_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x63, 0x62, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbb, 0x02, 0x0a, 0x22, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x31, 0x0a,
	0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaf, 0x05,
	0x0a, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x56, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x12, 0xe0, 0x41, 0x01, 0x9a, 0xb5, 0x18, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x37, 0xe0, 0x41,
	0x01, 0x8a, 0xb5, 0x18, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x92, 0xb5, 0x18, 0x09, 0x70, 0x5f, 0x62,
	0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x9a, 0xb5, 0x18, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x49, 0x0a, 0x15, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0xd6, 0x01, 0x0a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7c, 0x0a, 0x27, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x52, 0x22, 0x66, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5f, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x46,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x2d, 0x47, 0x65, 0x74,
	0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32, 0x95, 0x03, 0x0a, 0x29, 0x46, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12,
	0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x12, 0xbc, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x2f, 0x7b, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7d, 0x42,
	0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74,
	0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63,
	0x62, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fct_attestation_liveness_by_entity_head_proto_rawDescOnce sync.Once
	file_fct_attestation_liveness_by_entity_head_proto_rawDescData = file_fct_attestation_liveness_by_entity_head_proto_rawDesc
)

func file_fct_attestation_liveness_by_entity_head_proto_rawDescGZIP() []byte {
	file_fct_attestation_liveness_by_entity_head_proto_rawDescOnce.Do(func() {
		file_fct_attestation_liveness_by_entity_head_proto_rawDescData = protoimpl.X.CompressGZIP(file_fct_attestation_liveness_by_entity_head_proto_rawDescData)
	})
	return file_fct_attestation_liveness_by_entity_head_proto_rawDescData
}

var file_fct_attestation_liveness_by_entity_head_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fct_attestation_liveness_by_entity_head_proto_goTypes = []any{
	(*FctAttestationLivenessByEntityHead)(nil),             // 0: cbt.FctAttestationLivenessByEntityHead
	(*ListFctAttestationLivenessByEntityHeadRequest)(nil),  // 1: cbt.ListFctAttestationLivenessByEntityHeadRequest
	(*ListFctAttestationLivenessByEntityHeadResponse)(nil), // 2: cbt.ListFctAttestationLivenessByEntityHeadResponse
	(*GetFctAttestationLivenessByEntityHeadRequest)(nil),   // 3: cbt.GetFctAttestationLivenessByEntityHeadRequest
	(*GetFctAttestationLivenessByEntityHeadResponse)(nil),  // 4: cbt.GetFctAttestationLivenessByEntityHeadResponse
	(*UInt32Filter)(nil), // 5: cbt.UInt32Filter
	(*StringFilter)(nil), // 6: cbt.StringFilter
}
var file_fct_attestation_liveness_by_entity_head_proto_depIdxs = []int32{
	5,  // 0: cbt.ListFctAttestationLivenessByEntityHeadRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	6,  // 1: cbt.ListFctAttestationLivenessByEntityHeadRequest.entity:type_name -> cbt.StringFilter
	6,  // 2: cbt.ListFctAttestationLivenessByEntityHeadRequest.status:type_name -> cbt.StringFilter
	5,  // 3: cbt.ListFctAttestationLivenessByEntityHeadRequest.updated_date_time:type_name -> cbt.UInt32Filter
	5,  // 4: cbt.ListFctAttestationLivenessByEntityHeadRequest.slot:type_name -> cbt.UInt32Filter
	5,  // 5: cbt.ListFctAttestationLivenessByEntityHeadRequest.epoch:type_name -> cbt.UInt32Filter
	5,  // 6: cbt.ListFctAttestationLivenessByEntityHeadRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	5,  // 7: cbt.ListFctAttestationLivenessByEntityHeadRequest.attestation_count:type_name -> cbt.UInt32Filter
	0,  // 8: cbt.ListFctAttestationLivenessByEntityHeadResponse.fct_attestation_liveness_by_entity_head:type_name -> cbt.FctAttestationLivenessByEntityHead
	0,  // 9: cbt.GetFctAttestationLivenessByEntityHeadResponse.item:type_name -> cbt.FctAttestationLivenessByEntityHead
	1,  // 10: cbt.FctAttestationLivenessByEntityHeadService.List:input_type -> cbt.ListFctAttestationLivenessByEntityHeadRequest
	3,  // 11: cbt.FctAttestationLivenessByEntityHeadService.Get:input_type -> cbt.GetFctAttestationLivenessByEntityHeadRequest
	2,  // 12: cbt.FctAttestationLivenessByEntityHeadService.List:output_type -> cbt.ListFctAttestationLivenessByEntityHeadResponse
	4,  // 13: cbt.FctAttestationLivenessByEntityHeadService.Get:output_type -> cbt.GetFctAttestationLivenessByEntityHeadResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_fct_attestation_liveness_by_entity_head_proto_init() }
func file_fct_attestation_liveness_by_entity_head_proto_init() {
	if File_fct_attestation_liveness_by_entity_head_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fct_attestation_liveness_by_entity_head_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FctAttestationLivenessByEntityHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_liveness_by_entity_head_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctAttestationLivenessByEntityHeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_liveness_by_entity_head_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctAttestationLivenessByEntityHeadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_liveness_by_entity_head_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctAttestationLivenessByEntityHeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_liveness_by_entity_head_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctAttestationLivenessByEntityHeadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fct_attestation_liveness_by_entity_head_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fct_attestation_liveness_by_entity_head_proto_goTypes,
		DependencyIndexes: file_fct_attestation_liveness_by_entity_head_proto_depIdxs,
		MessageInfos:      file_fct_attestation_liveness_by_entity_head_proto_msgTypes,
	}.Build()
	File_fct_attestation_liveness_by_entity_head_proto = out.File
	file_fct_attestation_liveness_by_entity_head_proto_rawDesc = nil
	file_fct_attestation_liveness_by_entity_head_proto_goTypes = nil
	file_fct_attestation_liveness_by_entity_head_proto_depIdxs = nil
}
