// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: fct_attestation_liveness_by_entity_head_epoch.proto

package clickhouse

import (
	_ "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse/clickhouse"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FctAttestationLivenessByEntityHeadEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// The epoch number
	Epoch uint32 `protobuf:"varint,12,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The wall clock time when the epoch started
	EpochStartDateTime uint32 `protobuf:"varint,13,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// The entity (staking provider) associated with the validators, unknown if not mapped
	Entity string `protobuf:"bytes,14,opt,name=entity,proto3" json:"entity,omitempty"`
	// Attestation status: attested or missed
	Status string `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// Sum of attestations for this epoch/entity/status combination
	AttestationCount uint64 `protobuf:"varint,16,opt,name=attestation_count,json=attestationCount,proto3" json:"attestation_count,omitempty"`
}

func (x *FctAttestationLivenessByEntityHeadEpoch) Reset() {
	*x = FctAttestationLivenessByEntityHeadEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FctAttestationLivenessByEntityHeadEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FctAttestationLivenessByEntityHeadEpoch) ProtoMessage() {}

func (x *FctAttestationLivenessByEntityHeadEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FctAttestationLivenessByEntityHeadEpoch.ProtoReflect.Descriptor instead.
func (*FctAttestationLivenessByEntityHeadEpoch) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescGZIP(), []int{0}
}

func (x *FctAttestationLivenessByEntityHeadEpoch) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *FctAttestationLivenessByEntityHeadEpoch) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *FctAttestationLivenessByEntityHeadEpoch) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *FctAttestationLivenessByEntityHeadEpoch) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *FctAttestationLivenessByEntityHeadEpoch) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FctAttestationLivenessByEntityHeadEpoch) GetAttestationCount() uint64 {
	if x != nil {
		return x.AttestationCount
	}
	return 0
}

// Request for listing fct_attestation_liveness_by_entity_head_epoch records
type ListFctAttestationLivenessByEntityHeadEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by epoch_start_date_time - The wall clock time when the epoch started (PRIMARY KEY - required unless using alternatives: epoch)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by entity - The entity (staking provider) associated with the validators, unknown if not mapped (ORDER BY column 2 - optional)
	Entity *StringFilter `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
	// Filter by status - Attestation status: attested or missed (ORDER BY column 3 - optional)
	Status *StringFilter `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Filter by updated_date_time - Timestamp when the record was last updated (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,4,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by epoch - The epoch number (PROJECTION: p_by_epoch - alternative to epoch_start_date_time)
	Epoch *UInt32Filter `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by attestation_count - Sum of attestations for this epoch/entity/status combination (optional)
	AttestationCount *UInt64Filter `protobuf:"bytes,6,opt,name=attestation_count,json=attestationCount,proto3" json:"attestation_count,omitempty"`
	// The maximum number of fct_attestation_liveness_by_entity_head_epoch to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListFctAttestationLivenessByEntityHeadEpoch` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,8,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,9,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) Reset() {
	*x = ListFctAttestationLivenessByEntityHeadEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctAttestationLivenessByEntityHeadEpochRequest) ProtoMessage() {}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctAttestationLivenessByEntityHeadEpochRequest.ProtoReflect.Descriptor instead.
func (*ListFctAttestationLivenessByEntityHeadEpochRequest) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescGZIP(), []int{1}
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) GetEntity() *StringFilter {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) GetStatus() *StringFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) GetAttestationCount() *UInt64Filter {
	if x != nil {
		return x.AttestationCount
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFctAttestationLivenessByEntityHeadEpochRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response for listing fct_attestation_liveness_by_entity_head_epoch records
type ListFctAttestationLivenessByEntityHeadEpochResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fct_attestation_liveness_by_entity_head_epoch.
	FctAttestationLivenessByEntityHeadEpoch []*FctAttestationLivenessByEntityHeadEpoch `protobuf:"bytes,1,rep,name=fct_attestation_liveness_by_entity_head_epoch,json=fctAttestationLivenessByEntityHeadEpoch,proto3" json:"fct_attestation_liveness_by_entity_head_epoch,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFctAttestationLivenessByEntityHeadEpochResponse) Reset() {
	*x = ListFctAttestationLivenessByEntityHeadEpochResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctAttestationLivenessByEntityHeadEpochResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctAttestationLivenessByEntityHeadEpochResponse) ProtoMessage() {}

func (x *ListFctAttestationLivenessByEntityHeadEpochResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctAttestationLivenessByEntityHeadEpochResponse.ProtoReflect.Descriptor instead.
func (*ListFctAttestationLivenessByEntityHeadEpochResponse) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescGZIP(), []int{2}
}

func (x *ListFctAttestationLivenessByEntityHeadEpochResponse) GetFctAttestationLivenessByEntityHeadEpoch() []*FctAttestationLivenessByEntityHeadEpoch {
	if x != nil {
		return x.FctAttestationLivenessByEntityHeadEpoch
	}
	return nil
}

func (x *ListFctAttestationLivenessByEntityHeadEpochResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request for getting a single fct_attestation_liveness_by_entity_head_epoch record by primary key
type GetFctAttestationLivenessByEntityHeadEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wall clock time when the epoch started
	EpochStartDateTime uint32 `protobuf:"varint,1,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetFctAttestationLivenessByEntityHeadEpochRequest) Reset() {
	*x = GetFctAttestationLivenessByEntityHeadEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctAttestationLivenessByEntityHeadEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctAttestationLivenessByEntityHeadEpochRequest) ProtoMessage() {}

func (x *GetFctAttestationLivenessByEntityHeadEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctAttestationLivenessByEntityHeadEpochRequest.ProtoReflect.Descriptor instead.
func (*GetFctAttestationLivenessByEntityHeadEpochRequest) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescGZIP(), []int{3}
}

func (x *GetFctAttestationLivenessByEntityHeadEpochRequest) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

// Response for getting a single fct_attestation_liveness_by_entity_head_epoch record
type GetFctAttestationLivenessByEntityHeadEpochResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *FctAttestationLivenessByEntityHeadEpoch `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetFctAttestationLivenessByEntityHeadEpochResponse) Reset() {
	*x = GetFctAttestationLivenessByEntityHeadEpochResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctAttestationLivenessByEntityHeadEpochResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctAttestationLivenessByEntityHeadEpochResponse) ProtoMessage() {}

func (x *GetFctAttestationLivenessByEntityHeadEpochResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctAttestationLivenessByEntityHeadEpochResponse.ProtoReflect.Descriptor instead.
func (*GetFctAttestationLivenessByEntityHeadEpochResponse) Descriptor() ([]byte, []int) {
	return file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescGZIP(), []int{4}
}

func (x *GetFctAttestationLivenessByEntityHeadEpochResponse) GetItem() *FctAttestationLivenessByEntityHeadEpoch {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_fct_attestation_liveness_by_entity_head_epoch_proto protoreflect.FileDescriptor

var file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDesc = []byte{
	0x0a, 0x33, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x27, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xc1, 0x04, 0x0a, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x12, 0xe0, 0x41,
	0x01, 0x9a, 0xb5, 0x18, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x39, 0xe0, 0x41, 0x01, 0x8a,
	0xb5, 0x18, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x92, 0xb5, 0x18, 0x0a, 0x70, 0x5f, 0x62, 0x79,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x9a, 0xb5, 0x18, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x11,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xec, 0x01, 0x0a, 0x33, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65,
	0x61, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8c, 0x01, 0x0a, 0x2d, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x27, 0x66, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x76,
	0x0a, 0x32, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32, 0xbb, 0x03, 0x0a, 0x2e, 0x46, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x37, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0xcd, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x12, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x2f, 0x7b, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x7d, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78,
	0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescOnce sync.Once
	file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescData = file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDesc
)

func file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescGZIP() []byte {
	file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescOnce.Do(func() {
		file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescData = protoimpl.X.CompressGZIP(file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescData)
	})
	return file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDescData
}

var file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fct_attestation_liveness_by_entity_head_epoch_proto_goTypes = []any{
	(*FctAttestationLivenessByEntityHeadEpoch)(nil),             // 0: cbt.FctAttestationLivenessByEntityHeadEpoch
	(*ListFctAttestationLivenessByEntityHeadEpochRequest)(nil),  // 1: cbt.ListFctAttestationLivenessByEntityHeadEpochRequest
	(*ListFctAttestationLivenessByEntityHeadEpochResponse)(nil), // 2: cbt.ListFctAttestationLivenessByEntityHeadEpochResponse
	(*GetFctAttestationLivenessByEntityHeadEpochRequest)(nil),   // 3: cbt.GetFctAttestationLivenessByEntityHeadEpochRequest
	(*GetFctAttestationLivenessByEntityHeadEpochResponse)(nil),  // 4: cbt.GetFctAttestationLivenessByEntityHeadEpochResponse
	(*UInt32Filter)(nil), // 5: cbt.UInt32Filter
	(*StringFilter)(nil), // 6: cbt.StringFilter
	(*UInt64Filter)(nil), // 7: cbt.UInt64Filter
}
var file_fct_attestation_liveness_by_entity_head_epoch_proto_depIdxs = []int32{
	5,  // 0: cbt.ListFctAttestationLivenessByEntityHeadEpochRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	6,  // 1: cbt.ListFctAttestationLivenessByEntityHeadEpochRequest.entity:type_name -> cbt.StringFilter
	6,  // 2: cbt.ListFctAttestationLivenessByEntityHeadEpochRequest.status:type_name -> cbt.StringFilter
	5,  // 3: cbt.ListFctAttestationLivenessByEntityHeadEpochRequest.updated_date_time:type_name -> cbt.UInt32Filter
	5,  // 4: cbt.ListFctAttestationLivenessByEntityHeadEpochRequest.epoch:type_name -> cbt.UInt32Filter
	7,  // 5: cbt.ListFctAttestationLivenessByEntityHeadEpochRequest.attestation_count:type_name -> cbt.UInt64Filter
	0,  // 6: cbt.ListFctAttestationLivenessByEntityHeadEpochResponse.fct_attestation_liveness_by_entity_head_epoch:type_name -> cbt.FctAttestationLivenessByEntityHeadEpoch
	0,  // 7: cbt.GetFctAttestationLivenessByEntityHeadEpochResponse.item:type_name -> cbt.FctAttestationLivenessByEntityHeadEpoch
	1,  // 8: cbt.FctAttestationLivenessByEntityHeadEpochService.List:input_type -> cbt.ListFctAttestationLivenessByEntityHeadEpochRequest
	3,  // 9: cbt.FctAttestationLivenessByEntityHeadEpochService.Get:input_type -> cbt.GetFctAttestationLivenessByEntityHeadEpochRequest
	2,  // 10: cbt.FctAttestationLivenessByEntityHeadEpochService.List:output_type -> cbt.ListFctAttestationLivenessByEntityHeadEpochResponse
	4,  // 11: cbt.FctAttestationLivenessByEntityHeadEpochService.Get:output_type -> cbt.GetFctAttestationLivenessByEntityHeadEpochResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_fct_attestation_liveness_by_entity_head_epoch_proto_init() }
func file_fct_attestation_liveness_by_entity_head_epoch_proto_init() {
	if File_fct_attestation_liveness_by_entity_head_epoch_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FctAttestationLivenessByEntityHeadEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctAttestationLivenessByEntityHeadEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctAttestationLivenessByEntityHeadEpochResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctAttestationLivenessByEntityHeadEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctAttestationLivenessByEntityHeadEpochResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fct_attestation_liveness_by_entity_head_epoch_proto_goTypes,
		DependencyIndexes: file_fct_attestation_liveness_by_entity_head_epoch_proto_depIdxs,
		MessageInfos:      file_fct_attestation_liveness_by_entity_head_epoch_proto_msgTypes,
	}.Build()
	File_fct_attestation_liveness_by_entity_head_epoch_proto = out.File
	file_fct_attestation_liveness_by_entity_head_epoch_proto_rawDesc = nil
	file_fct_attestation_liveness_by_entity_head_epoch_proto_goTypes = nil
	file_fct_attestation_liveness_by_entity_head_epoch_proto_depIdxs = nil
}
