syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Block details for the finalized chain including orphaned blocks

message FctBlock {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number from beacon block payload
  uint32 slot = 12;
  // The wall clock time when the reorg slot started
  uint32 slot_start_date_time = 13;
  // The epoch number from beacon block payload
  uint32 epoch = 14;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15;
  // The root hash of the beacon block
  string block_root = 16;
  // The version of the beacon block
  string block_version = 17;
  // The total bytes of the beacon block payload
  google.protobuf.UInt32Value block_total_bytes = 18;
  // The total bytes of the beacon block payload when compressed using snappy
  google.protobuf.UInt32Value block_total_bytes_compressed = 19;
  // The root hash of the parent beacon block
  string parent_root = 20;
  // The root hash of the beacon state at this block
  string state_root = 21;
  // The index of the validator that proposed the beacon block
  uint32 proposer_index = 22;
  // The block hash of the associated execution block
  string eth1_data_block_hash = 23;
  // The root of the deposit tree in the associated execution block
  string eth1_data_deposit_root = 24;
  // The block hash of the execution payload
  string execution_payload_block_hash = 25;
  // The block number of the execution payload
  uint32 execution_payload_block_number = 26;
  // The recipient of the fee for this execution payload
  string execution_payload_fee_recipient = 27;
  // Base fee per gas for execution payload
  google.protobuf.StringValue execution_payload_base_fee_per_gas = 28;
  // Gas used for blobs in execution payload
  google.protobuf.UInt64Value execution_payload_blob_gas_used = 29;
  // Excess gas used for blobs in execution payload
  google.protobuf.UInt64Value execution_payload_excess_blob_gas = 30;
  // Gas limit for execution payload
  google.protobuf.UInt64Value execution_payload_gas_limit = 31;
  // Gas used for execution payload
  google.protobuf.UInt64Value execution_payload_gas_used = 32;
  // The state root of the execution payload
  string execution_payload_state_root = 33;
  // The parent hash of the execution payload
  string execution_payload_parent_hash = 34;
  // The transaction count of the execution payload
  google.protobuf.UInt32Value execution_payload_transactions_count = 35;
  // The transaction total bytes of the execution payload
  google.protobuf.UInt32Value execution_payload_transactions_total_bytes = 36;
  // The transaction total bytes of the execution payload when compressed using snappy
  google.protobuf.UInt32Value execution_payload_transactions_total_bytes_compressed = 37;
  // Can be "canonical" or "orphaned"
  string status = 38;
}

// Request for listing fct_block records
message ListFctBlockRequest {
  // Filter by slot_start_date_time - The wall clock time when the reorg slot started (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1 [(google.api.field_behavior) = REQUIRED];

  // Filter by block_root - The root hash of the beacon block (ORDER BY column 2 - optional)
  StringFilter block_root = 2 [(google.api.field_behavior) = OPTIONAL];

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 3 [(google.api.field_behavior) = OPTIONAL];
  // Filter by slot - The slot number from beacon block payload (optional)
  UInt32Filter slot = 4 [(google.api.field_behavior) = OPTIONAL];
  // Filter by epoch - The epoch number from beacon block payload (optional)
  UInt32Filter epoch = 5 [(google.api.field_behavior) = OPTIONAL];
  // Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
  UInt32Filter epoch_start_date_time = 6 [(google.api.field_behavior) = OPTIONAL];
  // Filter by block_version - The version of the beacon block (optional)
  StringFilter block_version = 7 [(google.api.field_behavior) = OPTIONAL];
  // Filter by block_total_bytes - The total bytes of the beacon block payload (optional)
  NullableUInt32Filter block_total_bytes = 8 [(google.api.field_behavior) = OPTIONAL];
  // Filter by block_total_bytes_compressed - The total bytes of the beacon block payload when compressed using snappy (optional)
  NullableUInt32Filter block_total_bytes_compressed = 9 [(google.api.field_behavior) = OPTIONAL];
  // Filter by parent_root - The root hash of the parent beacon block (optional)
  StringFilter parent_root = 10 [(google.api.field_behavior) = OPTIONAL];
  // Filter by state_root - The root hash of the beacon state at this block (optional)
  StringFilter state_root = 11 [(google.api.field_behavior) = OPTIONAL];
  // Filter by proposer_index - The index of the validator that proposed the beacon block (optional)
  UInt32Filter proposer_index = 12 [(google.api.field_behavior) = OPTIONAL];
  // Filter by eth1_data_block_hash - The block hash of the associated execution block (optional)
  StringFilter eth1_data_block_hash = 13 [(google.api.field_behavior) = OPTIONAL];
  // Filter by eth1_data_deposit_root - The root of the deposit tree in the associated execution block (optional)
  StringFilter eth1_data_deposit_root = 14 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_block_hash - The block hash of the execution payload (optional)
  StringFilter execution_payload_block_hash = 15 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_block_number - The block number of the execution payload (optional)
  UInt32Filter execution_payload_block_number = 16 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_fee_recipient - The recipient of the fee for this execution payload (optional)
  StringFilter execution_payload_fee_recipient = 17 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_base_fee_per_gas - Base fee per gas for execution payload (optional)
  NullableStringFilter execution_payload_base_fee_per_gas = 18 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_blob_gas_used - Gas used for blobs in execution payload (optional)
  NullableUInt64Filter execution_payload_blob_gas_used = 19 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_excess_blob_gas - Excess gas used for blobs in execution payload (optional)
  NullableUInt64Filter execution_payload_excess_blob_gas = 20 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_gas_limit - Gas limit for execution payload (optional)
  NullableUInt64Filter execution_payload_gas_limit = 21 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_gas_used - Gas used for execution payload (optional)
  NullableUInt64Filter execution_payload_gas_used = 22 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_state_root - The state root of the execution payload (optional)
  StringFilter execution_payload_state_root = 23 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_parent_hash - The parent hash of the execution payload (optional)
  StringFilter execution_payload_parent_hash = 24 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_transactions_count - The transaction count of the execution payload (optional)
  NullableUInt32Filter execution_payload_transactions_count = 25 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_transactions_total_bytes - The transaction total bytes of the execution payload (optional)
  NullableUInt32Filter execution_payload_transactions_total_bytes = 26 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_transactions_total_bytes_compressed - The transaction total bytes of the execution payload when compressed using snappy (optional)
  NullableUInt32Filter execution_payload_transactions_total_bytes_compressed = 27 [(google.api.field_behavior) = OPTIONAL];
  // Filter by status - Can be "canonical" or "orphaned" (optional)
  StringFilter status = 28 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of fct_block to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 29 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListFctBlock` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 30 [(google.api.field_behavior) = OPTIONAL];
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 31 [(google.api.field_behavior) = OPTIONAL];
}

// Response for listing fct_block records
message ListFctBlockResponse {
  // The list of fct_block.
  repeated FctBlock fct_block = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single fct_block record by primary key
message GetFctBlockRequest {
  // The wall clock time when the reorg slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// Response for getting a single fct_block record
message GetFctBlockResponse {
  FctBlock item = 1;
}

// Query fct_block data
service FctBlockService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListFctBlockRequest) returns (ListFctBlockResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_block"
    };
  }
  // Get record | Retrieve a single record by slot_start_date_time
  rpc Get(GetFctBlockRequest) returns (GetFctBlockResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_block/{slot_start_date_time}"
    };
  }
}
