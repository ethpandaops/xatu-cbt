syntax = "proto3";

package cbt;

import "common.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Blob count of a block for the unfinalized chain. Forks in the chain may cause multiple block roots for the same slot to be present

message FctBlockBlobCountHead {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The epoch number containing the slot
  uint32 epoch = 14;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15;
  // The beacon block root hash
  string block_root = 16;
  // The number of blobs in the block
  uint32 blob_count = 17;
}

// Request for listing fct_block_blob_count_head records
message ListFctBlockBlobCountHeadRequest {
  // Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1 [(google.api.field_behavior) = REQUIRED];

  // Filter by block_root - The beacon block root hash (ORDER BY column 2 - optional)
  StringFilter block_root = 2 [(google.api.field_behavior) = OPTIONAL];

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 3 [(google.api.field_behavior) = OPTIONAL];
  // Filter by slot - The slot number (optional)
  UInt32Filter slot = 4 [(google.api.field_behavior) = OPTIONAL];
  // Filter by epoch - The epoch number containing the slot (optional)
  UInt32Filter epoch = 5 [(google.api.field_behavior) = OPTIONAL];
  // Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
  UInt32Filter epoch_start_date_time = 6 [(google.api.field_behavior) = OPTIONAL];
  // Filter by blob_count - The number of blobs in the block (optional)
  UInt32Filter blob_count = 7 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of fct_block_blob_count_head to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 8 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListFctBlockBlobCountHead` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 9 [(google.api.field_behavior) = OPTIONAL];
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 10 [(google.api.field_behavior) = OPTIONAL];
}

// Response for listing fct_block_blob_count_head records
message ListFctBlockBlobCountHeadResponse {
  // The list of fct_block_blob_count_head.
  repeated FctBlockBlobCountHead fct_block_blob_count_head = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single fct_block_blob_count_head record by primary key
message GetFctBlockBlobCountHeadRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// Response for getting a single fct_block_blob_count_head record
message GetFctBlockBlobCountHeadResponse {
  FctBlockBlobCountHead item = 1;
}

// Query fct_block_blob_count_head data
service FctBlockBlobCountHeadService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListFctBlockBlobCountHeadRequest) returns (ListFctBlockBlobCountHeadResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_block_blob_count_head"
    };
  }
  // Get record | Retrieve a single record by slot_start_date_time
  rpc Get(GetFctBlockBlobCountHeadRequest) returns (GetFctBlockBlobCountHeadResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_block_blob_count_head/{slot_start_date_time}"
    };
  }
}
