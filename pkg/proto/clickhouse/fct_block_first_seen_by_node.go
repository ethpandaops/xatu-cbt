// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for fct_block_first_seen_by_node

package clickhouse

import (
	"fmt"
)

// BuildListFctBlockFirstSeenByNodeQuery constructs a parameterized SQL query from a ListFctBlockFirstSeenByNodeRequest
//
// Available projections:
//   - p_by_slot (primary key: slot)
//
// Use WithProjection() option to select a specific projection.
func BuildListFctBlockFirstSeenByNodeQuery(req *ListFctBlockFirstSeenByNodeRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.Slot == nil && req.SlotStartDateTime == nil {
		return SQLQuery{}, fmt.Errorf("at least one primary key field is required: slot, slot_start_date_time")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.SlotStartDateTime.Filter.(type) {
	case *UInt32Filter_Eq:
		qb.AddCondition("slot_start_date_time", "=", DateTimeValue{filter.Eq})
	case *UInt32Filter_Ne:
		qb.AddCondition("slot_start_date_time", "!=", DateTimeValue{filter.Ne})
	case *UInt32Filter_Lt:
		qb.AddCondition("slot_start_date_time", "<", DateTimeValue{filter.Lt})
	case *UInt32Filter_Lte:
		qb.AddCondition("slot_start_date_time", "<=", DateTimeValue{filter.Lte})
	case *UInt32Filter_Gt:
		qb.AddCondition("slot_start_date_time", ">", DateTimeValue{filter.Gt})
	case *UInt32Filter_Gte:
		qb.AddCondition("slot_start_date_time", ">=", DateTimeValue{filter.Gte})
	case *UInt32Filter_Between:
		qb.AddBetweenCondition("slot_start_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
	case *UInt32Filter_In:
		if len(filter.In.Values) > 0 {
			converted := make([]interface{}, len(filter.In.Values))
			for i, v := range filter.In.Values {
				converted[i] = DateTimeValue{v}
			}
			qb.AddInCondition("slot_start_date_time", converted)
		}
	case *UInt32Filter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			converted := make([]interface{}, len(filter.NotIn.Values))
			for i, v := range filter.NotIn.Values {
				converted[i] = DateTimeValue{v}
			}
			qb.AddNotInCondition("slot_start_date_time", converted)
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("updated_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("updated_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: source
	if req.Source != nil {
		switch filter := req.Source.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("source", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("source", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("source", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("source", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("source", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("source", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("source", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("source", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("source", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: slot
	if req.Slot != nil {
		switch filter := req.Slot.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("slot", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("slot", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("slot", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("slot", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("slot", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("slot", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("slot", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("slot", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("slot", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: epoch
	if req.Epoch != nil {
		switch filter := req.Epoch.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("epoch", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("epoch", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("epoch", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("epoch", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("epoch", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("epoch", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("epoch", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("epoch", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("epoch", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: epoch_start_date_time
	if req.EpochStartDateTime != nil {
		switch filter := req.EpochStartDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("epoch_start_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("epoch_start_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("epoch_start_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("epoch_start_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("epoch_start_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("epoch_start_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("epoch_start_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("epoch_start_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("epoch_start_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: seen_slot_start_diff
	if req.SeenSlotStartDiff != nil {
		switch filter := req.SeenSlotStartDiff.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("seen_slot_start_diff", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("seen_slot_start_diff", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("seen_slot_start_diff", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("seen_slot_start_diff", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("seen_slot_start_diff", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("seen_slot_start_diff", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("seen_slot_start_diff", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("seen_slot_start_diff", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("seen_slot_start_diff", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: block_root
	if req.BlockRoot != nil {
		switch filter := req.BlockRoot.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("block_root", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("block_root", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("block_root", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("block_root", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("block_root", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("block_root", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("block_root", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("block_root", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("block_root", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: username
	if req.Username != nil {
		switch filter := req.Username.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("username", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("username", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("username", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("username", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("username", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("username", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("username", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("username", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("username", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: node_id
	if req.NodeId != nil {
		switch filter := req.NodeId.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("node_id", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("node_id", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("node_id", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("node_id", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("node_id", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("node_id", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("node_id", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("node_id", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("node_id", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: classification
	if req.Classification != nil {
		switch filter := req.Classification.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("classification", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("classification", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("classification", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("classification", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("classification", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("classification", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("classification", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("classification", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("classification", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_name
	if req.MetaClientName != nil {
		switch filter := req.MetaClientName.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_name", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_name", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_name", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_name", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_name", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_name", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_name", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_name", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_name", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_version
	if req.MetaClientVersion != nil {
		switch filter := req.MetaClientVersion.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_version", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_version", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_version", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_version", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_version", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_version", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_version", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_version", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_version", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_implementation
	if req.MetaClientImplementation != nil {
		switch filter := req.MetaClientImplementation.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_implementation", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_implementation", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_implementation", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_implementation", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_implementation", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_implementation", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_implementation", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_implementation", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_implementation", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_city
	if req.MetaClientGeoCity != nil {
		switch filter := req.MetaClientGeoCity.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_city", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_city", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_city", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_city", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_city", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_city", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_city", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_city", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_city", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_country
	if req.MetaClientGeoCountry != nil {
		switch filter := req.MetaClientGeoCountry.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_country", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_country", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_country", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_country", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_country", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_country", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_country", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_country", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_country", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_country_code
	if req.MetaClientGeoCountryCode != nil {
		switch filter := req.MetaClientGeoCountryCode.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_country_code", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_country_code", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_country_code", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_country_code", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_country_code", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_country_code", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_country_code", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_country_code", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_country_code", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_continent_code
	if req.MetaClientGeoContinentCode != nil {
		switch filter := req.MetaClientGeoContinentCode.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_continent_code", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_continent_code", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_continent_code", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_continent_code", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_continent_code", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_continent_code", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_continent_code", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_continent_code", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_continent_code", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_longitude

	// Add filter for column: meta_client_geo_latitude

	// Add filter for column: meta_client_geo_autonomous_system_number
	if req.MetaClientGeoAutonomousSystemNumber != nil {
		switch filter := req.MetaClientGeoAutonomousSystemNumber.Filter.(type) {
		case *NullableUInt32Filter_Eq:
			qb.AddCondition("meta_client_geo_autonomous_system_number", "=", filter.Eq)
		case *NullableUInt32Filter_Ne:
			qb.AddCondition("meta_client_geo_autonomous_system_number", "!=", filter.Ne)
		case *NullableUInt32Filter_Lt:
			qb.AddCondition("meta_client_geo_autonomous_system_number", "<", filter.Lt)
		case *NullableUInt32Filter_Lte:
			qb.AddCondition("meta_client_geo_autonomous_system_number", "<=", filter.Lte)
		case *NullableUInt32Filter_Gt:
			qb.AddCondition("meta_client_geo_autonomous_system_number", ">", filter.Gt)
		case *NullableUInt32Filter_Gte:
			qb.AddCondition("meta_client_geo_autonomous_system_number", ">=", filter.Gte)
		case *NullableUInt32Filter_Between:
			qb.AddBetweenCondition("meta_client_geo_autonomous_system_number", filter.Between.Min, filter.Between.Max.GetValue())
		case *NullableUInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_autonomous_system_number", UInt32SliceToInterface(filter.In.Values))
			}
		case *NullableUInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_autonomous_system_number", UInt32SliceToInterface(filter.NotIn.Values))
			}
		case *NullableUInt32Filter_IsNull:
			qb.AddIsNullCondition("meta_client_geo_autonomous_system_number")
		case *NullableUInt32Filter_IsNotNull:
			qb.AddIsNotNullCondition("meta_client_geo_autonomous_system_number")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_autonomous_system_organization
	if req.MetaClientGeoAutonomousSystemOrganization != nil {
		switch filter := req.MetaClientGeoAutonomousSystemOrganization.Filter.(type) {
		case *NullableStringFilter_Eq:
			qb.AddCondition("meta_client_geo_autonomous_system_organization", "=", filter.Eq)
		case *NullableStringFilter_Ne:
			qb.AddCondition("meta_client_geo_autonomous_system_organization", "!=", filter.Ne)
		case *NullableStringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_autonomous_system_organization", "%" + filter.Contains + "%")
		case *NullableStringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_autonomous_system_organization", filter.StartsWith + "%")
		case *NullableStringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_autonomous_system_organization", "%" + filter.EndsWith)
		case *NullableStringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_autonomous_system_organization", filter.Like)
		case *NullableStringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_autonomous_system_organization", filter.NotLike)
		case *NullableStringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_autonomous_system_organization", StringSliceToInterface(filter.In.Values))
			}
		case *NullableStringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_autonomous_system_organization", StringSliceToInterface(filter.NotIn.Values))
			}
		case *NullableStringFilter_IsNull:
			qb.AddIsNullCondition("meta_client_geo_autonomous_system_organization")
		case *NullableStringFilter_IsNotNull:
			qb.AddIsNotNullCondition("meta_client_geo_autonomous_system_organization")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_consensus_version
	if req.MetaConsensusVersion != nil {
		switch filter := req.MetaConsensusVersion.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_consensus_version", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_consensus_version", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_consensus_version", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_consensus_version", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_consensus_version", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_consensus_version", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_consensus_version", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_consensus_version", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_consensus_version", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_consensus_implementation
	if req.MetaConsensusImplementation != nil {
		switch filter := req.MetaConsensusImplementation.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_consensus_implementation", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_consensus_implementation", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_consensus_implementation", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_consensus_implementation", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_consensus_implementation", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_consensus_implementation", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_consensus_implementation", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_consensus_implementation", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_consensus_implementation", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "source", "slot", "slot_start_date_time", "epoch", "epoch_start_date_time", "seen_slot_start_diff", "block_root", "username", "node_id", "classification", "meta_client_name", "meta_client_version", "meta_client_implementation", "meta_client_geo_city", "meta_client_geo_country", "meta_client_geo_country_code", "meta_client_geo_continent_code", "meta_client_geo_longitude", "meta_client_geo_latitude", "meta_client_geo_autonomous_system_number", "meta_client_geo_autonomous_system_organization", "meta_consensus_version", "meta_consensus_implementation"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY slot_start_date_time" + ", block_root" + ", meta_client_name"
	}

	// Build column list
	columns := []string{"updated_date_time", "source", "slot", "slot_start_date_time", "epoch", "epoch_start_date_time", "seen_slot_start_diff", "block_root", "username", "node_id", "classification", "meta_client_name", "meta_client_version", "meta_client_implementation", "meta_client_geo_city", "meta_client_geo_country", "meta_client_geo_country_code", "meta_client_geo_continent_code", "meta_client_geo_longitude", "meta_client_geo_latitude", "meta_client_geo_autonomous_system_number", "meta_client_geo_autonomous_system_organization", "meta_consensus_version", "meta_consensus_implementation"}

	return BuildParameterizedQuery("fct_block_first_seen_by_node", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetFctBlockFirstSeenByNodeQuery constructs a parameterized SQL query from a GetFctBlockFirstSeenByNodeRequest
func BuildGetFctBlockFirstSeenByNodeQuery(req *GetFctBlockFirstSeenByNodeRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.SlotStartDateTime == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field slot_start_date_time is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("slot_start_date_time", "=", req.SlotStartDateTime)

	// Build ORDER BY clause
	orderByClause := " ORDER BY slot_start_date_time, block_root, meta_client_name"

	// Build column list
	columns := []string{"updated_date_time", "source", "slot", "slot_start_date_time", "epoch", "epoch_start_date_time", "seen_slot_start_diff", "block_root", "username", "node_id", "classification", "meta_client_name", "meta_client_version", "meta_client_implementation", "meta_client_geo_city", "meta_client_geo_country", "meta_client_geo_country_code", "meta_client_geo_continent_code", "meta_client_geo_longitude", "meta_client_geo_latitude", "meta_client_geo_autonomous_system_number", "meta_client_geo_autonomous_system_organization", "meta_consensus_version", "meta_consensus_implementation"}

	// Return single record
	return BuildParameterizedQuery("fct_block_first_seen_by_node", columns, qb, orderByClause, 1, 0, options...)
}
