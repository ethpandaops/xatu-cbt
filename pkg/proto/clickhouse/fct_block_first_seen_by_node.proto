syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// When the block was first seen on the network by a sentry node

message FctBlockFirstSeenByNode {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // Source of the event
  string source = 12;
  // The slot number
  uint32 slot = 13;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 14;
  // The epoch number containing the slot
  uint32 epoch = 15;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 16;
  // The time from slot start for the client to see the block
  uint32 seen_slot_start_diff = 17;
  // The beacon block root hash
  string block_root = 18;
  // Username of the node
  string username = 19;
  // ID of the node
  string node_id = 20;
  // Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified"
  string classification = 21;
  // Name of the client
  string meta_client_name = 22;
  // Version of the client
  string meta_client_version = 23;
  // Implementation of the client
  string meta_client_implementation = 24;
  // City of the client
  string meta_client_geo_city = 25;
  // Country of the client
  string meta_client_geo_country = 26;
  // Country code of the client
  string meta_client_geo_country_code = 27;
  // Continent code of the client
  string meta_client_geo_continent_code = 28;
  // Longitude of the client
  google.protobuf.DoubleValue meta_client_geo_longitude = 29;
  // Latitude of the client
  google.protobuf.DoubleValue meta_client_geo_latitude = 30;
  // Autonomous system number of the client
  google.protobuf.UInt32Value meta_client_geo_autonomous_system_number = 31;
  // Autonomous system organization of the client
  google.protobuf.StringValue meta_client_geo_autonomous_system_organization = 32;
  // Ethereum consensus client version
  string meta_consensus_version = 33;
  // Ethereum consensus client implementation
  string meta_consensus_implementation = 34;
}

// ListFctBlockFirstSeenByNodeRequest is the request message for listing fct_block_first_seen_by_node records
message ListFctBlockFirstSeenByNodeRequest {
  // Filter by slot_start_date_time (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by block_root (ORDER BY column 2 - optional)
  StringFilter block_root = 2;

  // Filter by meta_client_name (ORDER BY column 3 - optional)
  StringFilter meta_client_name = 3;

  // Filter by updated_date_time (optional)
  UInt32Filter updated_date_time = 4;
  // Filter by source (optional)
  StringFilter source = 5;
  // Filter by slot (optional)
  UInt32Filter slot = 6;
  // Filter by epoch (optional)
  UInt32Filter epoch = 7;
  // Filter by epoch_start_date_time (optional)
  UInt32Filter epoch_start_date_time = 8;
  // Filter by seen_slot_start_diff (optional)
  UInt32Filter seen_slot_start_diff = 9;
  // Filter by username (optional)
  StringFilter username = 10;
  // Filter by node_id (optional)
  StringFilter node_id = 11;
  // Filter by classification (optional)
  StringFilter classification = 12;
  // Filter by meta_client_version (optional)
  StringFilter meta_client_version = 13;
  // Filter by meta_client_implementation (optional)
  StringFilter meta_client_implementation = 14;
  // Filter by meta_client_geo_city (optional)
  StringFilter meta_client_geo_city = 15;
  // Filter by meta_client_geo_country (optional)
  StringFilter meta_client_geo_country = 16;
  // Filter by meta_client_geo_country_code (optional)
  StringFilter meta_client_geo_country_code = 17;
  // Filter by meta_client_geo_continent_code (optional)
  StringFilter meta_client_geo_continent_code = 18;
  // Filter by meta_client_geo_longitude (optional)
  google.protobuf.DoubleValue meta_client_geo_longitude = 19;
  // Filter by meta_client_geo_latitude (optional)
  google.protobuf.DoubleValue meta_client_geo_latitude = 20;
  // Filter by meta_client_geo_autonomous_system_number (optional)
  NullableUInt32Filter meta_client_geo_autonomous_system_number = 21;
  // Filter by meta_client_geo_autonomous_system_organization (optional)
  NullableStringFilter meta_client_geo_autonomous_system_organization = 22;
  // Filter by meta_consensus_version (optional)
  StringFilter meta_consensus_version = 23;
  // Filter by meta_consensus_implementation (optional)
  StringFilter meta_consensus_implementation = 24;

  // The maximum number of fct_block_first_seen_by_node to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 25;
  // A page token, received from a previous `ListFctBlockFirstSeenByNode` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 26;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 27;
}

// ListFctBlockFirstSeenByNodeResponse is the response message for listing fct_block_first_seen_by_node records
message ListFctBlockFirstSeenByNodeResponse {
  // The list of fct_block_first_seen_by_node.
  repeated FctBlockFirstSeenByNode fct_block_first_seen_by_node = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// GetFctBlockFirstSeenByNodeRequest is the request message for getting a single fct_block_first_seen_by_node record by primary key
message GetFctBlockFirstSeenByNodeRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// GetFctBlockFirstSeenByNodeResponse is the response message for getting a single fct_block_first_seen_by_node record
message GetFctBlockFirstSeenByNodeResponse {
  FctBlockFirstSeenByNode item = 1;
}

// FctBlockFirstSeenByNodeService provides RPC methods for querying fct_block_first_seen_by_node data
service FctBlockFirstSeenByNodeService {
  // List returns paginated fct_block_first_seen_by_node records
  rpc List(ListFctBlockFirstSeenByNodeRequest) returns (ListFctBlockFirstSeenByNodeResponse);
  // Get returns a single fct_block_first_seen_by_node record by primary key
  rpc Get(GetFctBlockFirstSeenByNodeRequest) returns (GetFctBlockFirstSeenByNodeResponse);
}
