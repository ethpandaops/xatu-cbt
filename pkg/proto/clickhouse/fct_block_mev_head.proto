syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// MEV relay proposer payload delivered for a block on the unfinalized chain

message FctBlockMevHead {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // Slot number within the block proposer payload
  uint32 slot = 12;
  // The start time for the slot that the proposer payload is for
  uint32 slot_start_date_time = 13;
  // Epoch number derived from the slot that the proposer payload is for
  uint32 epoch = 14;
  // The start time for the epoch that the proposer payload is for
  uint32 epoch_start_date_time = 15;
  // The root hash of the beacon block
  string block_root = 16;
  // The earliest timestamp of the accepted bid in milliseconds
  google.protobuf.UInt64Value earliest_bid_date_time = 17;
  // The relay names that delivered the proposer payload
  repeated string relay_names = 18;
  // The parent hash of the proposer payload
  string parent_hash = 19;
  // The block number of the proposer payload
  uint64 block_number = 20;
  // The block hash of the proposer payload
  string block_hash = 21;
  // The builder pubkey of the proposer payload
  string builder_pubkey = 22;
  // The proposer pubkey of the proposer payload
  string proposer_pubkey = 23;
  // The proposer fee recipient of the proposer payload
  string proposer_fee_recipient = 24;
  // The gas limit of the proposer payload
  uint64 gas_limit = 25;
  // The gas used of the proposer payload
  uint64 gas_used = 26;
  // The transaction value in wei
  google.protobuf.StringValue value = 27;
  // The number of transactions in the proposer payload
  uint32 transaction_count = 28;
}

// ListFctBlockMevHeadRequest is the request message for listing fct_block_mev_head records
message ListFctBlockMevHeadRequest {
  // Filter by slot_start_date_time (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by block_root (ORDER BY column 2 - optional)
  StringFilter block_root = 2;

  // Filter by updated_date_time (optional)
  UInt32Filter updated_date_time = 3;
  // Filter by slot (optional)
  UInt32Filter slot = 4;
  // Filter by epoch (optional)
  UInt32Filter epoch = 5;
  // Filter by epoch_start_date_time (optional)
  UInt32Filter epoch_start_date_time = 6;
  // Filter by earliest_bid_date_time (optional)
  NullableUInt64Filter earliest_bid_date_time = 7;
  // Filter by relay_names (optional)
  repeated string relay_names = 8;
  // Filter by parent_hash (optional)
  StringFilter parent_hash = 9;
  // Filter by block_number (optional)
  UInt64Filter block_number = 10;
  // Filter by block_hash (optional)
  StringFilter block_hash = 11;
  // Filter by builder_pubkey (optional)
  StringFilter builder_pubkey = 12;
  // Filter by proposer_pubkey (optional)
  StringFilter proposer_pubkey = 13;
  // Filter by proposer_fee_recipient (optional)
  StringFilter proposer_fee_recipient = 14;
  // Filter by gas_limit (optional)
  UInt64Filter gas_limit = 15;
  // Filter by gas_used (optional)
  UInt64Filter gas_used = 16;
  // Filter by value (optional)
  NullableStringFilter value = 17;
  // Filter by transaction_count (optional)
  UInt32Filter transaction_count = 18;

  // The maximum number of fct_block_mev_head to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 19;
  // A page token, received from a previous `ListFctBlockMevHead` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 20;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 21;
}

// ListFctBlockMevHeadResponse is the response message for listing fct_block_mev_head records
message ListFctBlockMevHeadResponse {
  // The list of fct_block_mev_head.
  repeated FctBlockMevHead fct_block_mev_head = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// GetFctBlockMevHeadRequest is the request message for getting a single fct_block_mev_head record by primary key
message GetFctBlockMevHeadRequest {
  // The start time for the slot that the proposer payload is for
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// GetFctBlockMevHeadResponse is the response message for getting a single fct_block_mev_head record
message GetFctBlockMevHeadResponse {
  FctBlockMevHead item = 1;
}

// FctBlockMevHeadService provides RPC methods for querying fct_block_mev_head data
service FctBlockMevHeadService {
  // List returns paginated fct_block_mev_head records
  rpc List(ListFctBlockMevHeadRequest) returns (ListFctBlockMevHeadResponse);
  // Get returns a single fct_block_mev_head record by primary key
  rpc Get(GetFctBlockMevHeadRequest) returns (GetFctBlockMevHeadResponse);
}
