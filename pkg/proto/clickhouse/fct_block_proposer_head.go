// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for fct_block_proposer_head

package clickhouse

import (
	"fmt"
)

// BuildListFctBlockProposerHeadQuery constructs a parameterized SQL query from a ListFctBlockProposerHeadRequest
//
// Available projections:
//   - p_by_slot (primary key: slot)
//
// Use WithProjection() option to select a specific projection.
func BuildListFctBlockProposerHeadQuery(req *ListFctBlockProposerHeadRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.Slot == nil && req.SlotStartDateTime == nil {
		return SQLQuery{}, fmt.Errorf("at least one primary key field is required: slot, slot_start_date_time")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	if req.SlotStartDateTime != nil {
		switch filter := req.SlotStartDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("slot_start_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("slot_start_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("slot_start_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("slot_start_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("slot_start_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("slot_start_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("slot_start_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("slot_start_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("slot_start_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("updated_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("updated_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: slot
	if req.Slot != nil {
		switch filter := req.Slot.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("slot", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("slot", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("slot", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("slot", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("slot", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("slot", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("slot", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("slot", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("slot", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: epoch
	if req.Epoch != nil {
		switch filter := req.Epoch.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("epoch", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("epoch", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("epoch", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("epoch", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("epoch", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("epoch", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("epoch", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("epoch", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("epoch", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: epoch_start_date_time
	if req.EpochStartDateTime != nil {
		switch filter := req.EpochStartDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("epoch_start_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("epoch_start_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("epoch_start_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("epoch_start_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("epoch_start_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("epoch_start_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("epoch_start_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("epoch_start_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("epoch_start_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: proposer_validator_index
	if req.ProposerValidatorIndex != nil {
		switch filter := req.ProposerValidatorIndex.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("proposer_validator_index", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("proposer_validator_index", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("proposer_validator_index", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("proposer_validator_index", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("proposer_validator_index", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("proposer_validator_index", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("proposer_validator_index", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("proposer_validator_index", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("proposer_validator_index", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: proposer_pubkey
	if req.ProposerPubkey != nil {
		switch filter := req.ProposerPubkey.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("proposer_pubkey", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("proposer_pubkey", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("proposer_pubkey", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("proposer_pubkey", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("proposer_pubkey", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("proposer_pubkey", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("proposer_pubkey", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("proposer_pubkey", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("proposer_pubkey", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: block_root
	if req.BlockRoot != nil {
		switch filter := req.BlockRoot.Filter.(type) {
		case *NullableStringFilter_Eq:
			qb.AddCondition("block_root", "=", filter.Eq)
		case *NullableStringFilter_Ne:
			qb.AddCondition("block_root", "!=", filter.Ne)
		case *NullableStringFilter_Contains:
			qb.AddLikeCondition("block_root", "%" + filter.Contains + "%")
		case *NullableStringFilter_StartsWith:
			qb.AddLikeCondition("block_root", filter.StartsWith + "%")
		case *NullableStringFilter_EndsWith:
			qb.AddLikeCondition("block_root", "%" + filter.EndsWith)
		case *NullableStringFilter_Like:
			qb.AddLikeCondition("block_root", filter.Like)
		case *NullableStringFilter_NotLike:
			qb.AddNotLikeCondition("block_root", filter.NotLike)
		case *NullableStringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("block_root", StringSliceToInterface(filter.In.Values))
			}
		case *NullableStringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("block_root", StringSliceToInterface(filter.NotIn.Values))
			}
		case *NullableStringFilter_IsNull:
			qb.AddIsNullCondition("block_root")
		case *NullableStringFilter_IsNotNull:
			qb.AddIsNotNullCondition("block_root")
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "slot", "slot_start_date_time", "epoch", "epoch_start_date_time", "proposer_validator_index", "proposer_pubkey", "block_root"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY slot_start_date_time" + ", proposer_validator_index"
	}

	// Build column list
	columns := []string{"toUnixTimestamp(`updated_date_time`) AS `updated_date_time`", "slot", "toUnixTimestamp(`slot_start_date_time`) AS `slot_start_date_time`", "epoch", "toUnixTimestamp(`epoch_start_date_time`) AS `epoch_start_date_time`", "proposer_validator_index", "proposer_pubkey", "block_root"}

	return BuildParameterizedQuery("fct_block_proposer_head", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetFctBlockProposerHeadQuery constructs a parameterized SQL query from a GetFctBlockProposerHeadRequest
func BuildGetFctBlockProposerHeadQuery(req *GetFctBlockProposerHeadRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.SlotStartDateTime == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field slot_start_date_time is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("slot_start_date_time", "=", req.SlotStartDateTime)

	// Build ORDER BY clause
	orderByClause := " ORDER BY slot_start_date_time, proposer_validator_index"

	// Build column list
	columns := []string{"toUnixTimestamp(`updated_date_time`) AS `updated_date_time`", "slot", "toUnixTimestamp(`slot_start_date_time`) AS `slot_start_date_time`", "epoch", "toUnixTimestamp(`epoch_start_date_time`) AS `epoch_start_date_time`", "proposer_validator_index", "proposer_pubkey", "block_root"}

	// Return single record
	return BuildParameterizedQuery("fct_block_proposer_head", columns, qb, orderByClause, 1, 0, options...)
}
