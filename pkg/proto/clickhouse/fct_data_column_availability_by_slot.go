// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for fct_data_column_availability_by_slot

package clickhouse

import (
	"fmt"
)

// BuildListFctDataColumnAvailabilityBySlotQuery constructs a parameterized SQL query from a ListFctDataColumnAvailabilityBySlotRequest
//
// Available projections:
//   - p_by_slot_column (primary key: slot)
//
// Use WithProjection() option to select a specific projection.
func BuildListFctDataColumnAvailabilityBySlotQuery(req *ListFctDataColumnAvailabilityBySlotRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.Slot == nil && req.SlotStartDateTime == nil {
		return SQLQuery{}, fmt.Errorf("at least one primary key field is required: slot, slot_start_date_time")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	if req.SlotStartDateTime != nil {
		switch filter := req.SlotStartDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("slot_start_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("slot_start_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("slot_start_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("slot_start_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("slot_start_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("slot_start_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("slot_start_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("slot_start_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("slot_start_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("updated_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("updated_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: slot
	if req.Slot != nil {
		switch filter := req.Slot.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("slot", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("slot", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("slot", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("slot", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("slot", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("slot", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("slot", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("slot", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("slot", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: epoch
	if req.Epoch != nil {
		switch filter := req.Epoch.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("epoch", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("epoch", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("epoch", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("epoch", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("epoch", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("epoch", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("epoch", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("epoch", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("epoch", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: epoch_start_date_time
	if req.EpochStartDateTime != nil {
		switch filter := req.EpochStartDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("epoch_start_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("epoch_start_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("epoch_start_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("epoch_start_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("epoch_start_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("epoch_start_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("epoch_start_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("epoch_start_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("epoch_start_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: wallclock_request_slot
	if req.WallclockRequestSlot != nil {
		switch filter := req.WallclockRequestSlot.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("wallclock_request_slot", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("wallclock_request_slot", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("wallclock_request_slot", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("wallclock_request_slot", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("wallclock_request_slot", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("wallclock_request_slot", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("wallclock_request_slot", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("wallclock_request_slot", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("wallclock_request_slot", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: wallclock_request_slot_start_date_time
	if req.WallclockRequestSlotStartDateTime != nil {
		switch filter := req.WallclockRequestSlotStartDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("wallclock_request_slot_start_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("wallclock_request_slot_start_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("wallclock_request_slot_start_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("wallclock_request_slot_start_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("wallclock_request_slot_start_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("wallclock_request_slot_start_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("wallclock_request_slot_start_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("wallclock_request_slot_start_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("wallclock_request_slot_start_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: wallclock_request_epoch
	if req.WallclockRequestEpoch != nil {
		switch filter := req.WallclockRequestEpoch.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("wallclock_request_epoch", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("wallclock_request_epoch", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("wallclock_request_epoch", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("wallclock_request_epoch", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("wallclock_request_epoch", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("wallclock_request_epoch", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("wallclock_request_epoch", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("wallclock_request_epoch", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("wallclock_request_epoch", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: wallclock_request_epoch_start_date_time
	if req.WallclockRequestEpochStartDateTime != nil {
		switch filter := req.WallclockRequestEpochStartDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("wallclock_request_epoch_start_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("wallclock_request_epoch_start_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("wallclock_request_epoch_start_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("wallclock_request_epoch_start_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("wallclock_request_epoch_start_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("wallclock_request_epoch_start_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("wallclock_request_epoch_start_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("wallclock_request_epoch_start_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("wallclock_request_epoch_start_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: column_index
	if req.ColumnIndex != nil {
		switch filter := req.ColumnIndex.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("column_index", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("column_index", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("column_index", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("column_index", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("column_index", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("column_index", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("column_index", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("column_index", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("column_index", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: beacon_block_root
	if req.BeaconBlockRoot != nil {
		switch filter := req.BeaconBlockRoot.Filter.(type) {
		case *NullableStringFilter_Eq:
			qb.AddCondition("beacon_block_root", "=", filter.Eq)
		case *NullableStringFilter_Ne:
			qb.AddCondition("beacon_block_root", "!=", filter.Ne)
		case *NullableStringFilter_Contains:
			qb.AddLikeCondition("beacon_block_root", "%" + filter.Contains + "%")
		case *NullableStringFilter_StartsWith:
			qb.AddLikeCondition("beacon_block_root", filter.StartsWith + "%")
		case *NullableStringFilter_EndsWith:
			qb.AddLikeCondition("beacon_block_root", "%" + filter.EndsWith)
		case *NullableStringFilter_Like:
			qb.AddLikeCondition("beacon_block_root", filter.Like)
		case *NullableStringFilter_NotLike:
			qb.AddNotLikeCondition("beacon_block_root", filter.NotLike)
		case *NullableStringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("beacon_block_root", StringSliceToInterface(filter.In.Values))
			}
		case *NullableStringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("beacon_block_root", StringSliceToInterface(filter.NotIn.Values))
			}
		case *NullableStringFilter_IsNull:
			qb.AddIsNullCondition("beacon_block_root")
		case *NullableStringFilter_IsNotNull:
			qb.AddIsNotNullCondition("beacon_block_root")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: beacon_block_root_variants
	if req.BeaconBlockRootVariants != nil {
		switch filter := req.BeaconBlockRootVariants.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("beacon_block_root_variants", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("beacon_block_root_variants", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("beacon_block_root_variants", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("beacon_block_root_variants", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("beacon_block_root_variants", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("beacon_block_root_variants", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("beacon_block_root_variants", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("beacon_block_root_variants", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("beacon_block_root_variants", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: blob_count
	if req.BlobCount != nil {
		switch filter := req.BlobCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("blob_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("blob_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("blob_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("blob_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("blob_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("blob_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("blob_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("blob_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("blob_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: success_count
	if req.SuccessCount != nil {
		switch filter := req.SuccessCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("success_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("success_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("success_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("success_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("success_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("success_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("success_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("success_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("success_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: failure_count
	if req.FailureCount != nil {
		switch filter := req.FailureCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("failure_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("failure_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("failure_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("failure_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("failure_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("failure_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("failure_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("failure_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("failure_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: missing_count
	if req.MissingCount != nil {
		switch filter := req.MissingCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("missing_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("missing_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("missing_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("missing_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("missing_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("missing_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("missing_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("missing_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("missing_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: probe_count
	if req.ProbeCount != nil {
		switch filter := req.ProbeCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("probe_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("probe_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("probe_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("probe_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("probe_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("probe_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("probe_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("probe_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("probe_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: availability_pct

	// Add filter for column: min_response_time_ms
	if req.MinResponseTimeMs != nil {
		switch filter := req.MinResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("min_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("min_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("min_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("min_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("min_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("min_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("min_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("min_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("min_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: p50_response_time_ms
	if req.P50ResponseTimeMs != nil {
		switch filter := req.P50ResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("p50_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("p50_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("p50_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("p50_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("p50_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("p50_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("p50_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("p50_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("p50_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: p95_response_time_ms
	if req.P95ResponseTimeMs != nil {
		switch filter := req.P95ResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("p95_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("p95_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("p95_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("p95_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("p95_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("p95_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("p95_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("p95_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("p95_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: p99_response_time_ms
	if req.P99ResponseTimeMs != nil {
		switch filter := req.P99ResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("p99_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("p99_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("p99_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("p99_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("p99_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("p99_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("p99_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("p99_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("p99_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: max_response_time_ms
	if req.MaxResponseTimeMs != nil {
		switch filter := req.MaxResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("max_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("max_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("max_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("max_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("max_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("max_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("max_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("max_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("max_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: unique_peer_count
	if req.UniquePeerCount != nil {
		switch filter := req.UniquePeerCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("unique_peer_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("unique_peer_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("unique_peer_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("unique_peer_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("unique_peer_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("unique_peer_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("unique_peer_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("unique_peer_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("unique_peer_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: unique_client_count
	if req.UniqueClientCount != nil {
		switch filter := req.UniqueClientCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("unique_client_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("unique_client_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("unique_client_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("unique_client_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("unique_client_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("unique_client_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("unique_client_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("unique_client_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("unique_client_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: unique_implementation_count
	if req.UniqueImplementationCount != nil {
		switch filter := req.UniqueImplementationCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("unique_implementation_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("unique_implementation_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("unique_implementation_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("unique_implementation_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("unique_implementation_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("unique_implementation_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("unique_implementation_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("unique_implementation_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("unique_implementation_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: custody_probe_count
	if req.CustodyProbeCount != nil {
		switch filter := req.CustodyProbeCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("custody_probe_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("custody_probe_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("custody_probe_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("custody_probe_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("custody_probe_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("custody_probe_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("custody_probe_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("custody_probe_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("custody_probe_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: gossipsub_count
	if req.GossipsubCount != nil {
		switch filter := req.GossipsubCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("gossipsub_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("gossipsub_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("gossipsub_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("gossipsub_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("gossipsub_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("gossipsub_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("gossipsub_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("gossipsub_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("gossipsub_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "slot", "slot_start_date_time", "epoch", "epoch_start_date_time", "wallclock_request_slot", "wallclock_request_slot_start_date_time", "wallclock_request_epoch", "wallclock_request_epoch_start_date_time", "column_index", "beacon_block_root", "beacon_block_root_variants", "blob_count", "success_count", "failure_count", "missing_count", "probe_count", "availability_pct", "min_response_time_ms", "p50_response_time_ms", "p95_response_time_ms", "p99_response_time_ms", "max_response_time_ms", "unique_peer_count", "unique_client_count", "unique_implementation_count", "custody_probe_count", "gossipsub_count"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY slot_start_date_time" + ", column_index"
	}

	// Build column list
	columns := []string{"toUnixTimestamp(`updated_date_time`) AS `updated_date_time`", "slot", "toUnixTimestamp(`slot_start_date_time`) AS `slot_start_date_time`", "epoch", "toUnixTimestamp(`epoch_start_date_time`) AS `epoch_start_date_time`", "wallclock_request_slot", "toUnixTimestamp(`wallclock_request_slot_start_date_time`) AS `wallclock_request_slot_start_date_time`", "wallclock_request_epoch", "toUnixTimestamp(`wallclock_request_epoch_start_date_time`) AS `wallclock_request_epoch_start_date_time`", "column_index", "NULLIF(`beacon_block_root`, repeat('\x00', 66)) AS `beacon_block_root`", "toUInt32(`beacon_block_root_variants`) AS `beacon_block_root_variants`", "toUInt32(`blob_count`) AS `blob_count`", "success_count", "failure_count", "missing_count", "probe_count", "availability_pct", "min_response_time_ms", "p50_response_time_ms", "p95_response_time_ms", "p99_response_time_ms", "max_response_time_ms", "unique_peer_count", "unique_client_count", "unique_implementation_count", "custody_probe_count", "gossipsub_count"}

	return BuildParameterizedQuery("fct_data_column_availability_by_slot", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetFctDataColumnAvailabilityBySlotQuery constructs a parameterized SQL query from a GetFctDataColumnAvailabilityBySlotRequest
func BuildGetFctDataColumnAvailabilityBySlotQuery(req *GetFctDataColumnAvailabilityBySlotRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.SlotStartDateTime == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field slot_start_date_time is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("slot_start_date_time", "=", req.SlotStartDateTime)

	// Build ORDER BY clause
	orderByClause := " ORDER BY slot_start_date_time, column_index"

	// Build column list
	columns := []string{"toUnixTimestamp(`updated_date_time`) AS `updated_date_time`", "slot", "toUnixTimestamp(`slot_start_date_time`) AS `slot_start_date_time`", "epoch", "toUnixTimestamp(`epoch_start_date_time`) AS `epoch_start_date_time`", "wallclock_request_slot", "toUnixTimestamp(`wallclock_request_slot_start_date_time`) AS `wallclock_request_slot_start_date_time`", "wallclock_request_epoch", "toUnixTimestamp(`wallclock_request_epoch_start_date_time`) AS `wallclock_request_epoch_start_date_time`", "column_index", "NULLIF(`beacon_block_root`, repeat('\x00', 66)) AS `beacon_block_root`", "toUInt32(`beacon_block_root_variants`) AS `beacon_block_root_variants`", "toUInt32(`blob_count`) AS `blob_count`", "success_count", "failure_count", "missing_count", "probe_count", "availability_pct", "min_response_time_ms", "p50_response_time_ms", "p95_response_time_ms", "p99_response_time_ms", "max_response_time_ms", "unique_peer_count", "unique_client_count", "unique_implementation_count", "custody_probe_count", "gossipsub_count"}

	// Return single record
	return BuildParameterizedQuery("fct_data_column_availability_by_slot", columns, qb, orderByClause, 1, 0, options...)
}
