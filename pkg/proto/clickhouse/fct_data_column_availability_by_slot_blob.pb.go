// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: fct_data_column_availability_by_slot_blob.proto

package clickhouse

import (
	_ "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse/clickhouse"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FctDataColumnAvailabilityBySlotBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Slot number being probed
	Slot uint32 `protobuf:"varint,12,opt,name=slot,proto3" json:"slot,omitempty"`
	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,13,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Epoch number containing the slot
	Epoch uint32 `protobuf:"varint,14,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The wall clock time when the epoch started
	EpochStartDateTime uint32 `protobuf:"varint,15,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// The wallclock slot when the request was sent
	WallclockRequestSlot uint32 `protobuf:"varint,16,opt,name=wallclock_request_slot,json=wallclockRequestSlot,proto3" json:"wallclock_request_slot,omitempty"`
	// The start time for the slot when the request was sent
	WallclockRequestSlotStartDateTime uint32 `protobuf:"varint,17,opt,name=wallclock_request_slot_start_date_time,json=wallclockRequestSlotStartDateTime,proto3" json:"wallclock_request_slot_start_date_time,omitempty"`
	// The wallclock epoch when the request was sent
	WallclockRequestEpoch uint32 `protobuf:"varint,18,opt,name=wallclock_request_epoch,json=wallclockRequestEpoch,proto3" json:"wallclock_request_epoch,omitempty"`
	// The start time for the wallclock epoch when the request was sent
	WallclockRequestEpochStartDateTime uint32 `protobuf:"varint,19,opt,name=wallclock_request_epoch_start_date_time,json=wallclockRequestEpochStartDateTime,proto3" json:"wallclock_request_epoch_start_date_time,omitempty"`
	// Blob index within the slot (0-based, typically 0-5)
	BlobIndex uint32 `protobuf:"varint,20,opt,name=blob_index,json=blobIndex,proto3" json:"blob_index,omitempty"`
	// Column index being probed (0-127)
	ColumnIndex uint64 `protobuf:"varint,21,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	// Total number of blobs in the slot
	BlobCount uint32 `protobuf:"varint,22,opt,name=blob_count,json=blobCount,proto3" json:"blob_count,omitempty"`
	// Availability percentage (success / total * 100) rounded to 2 decimal places - same for all blobs in column
	AvailabilityPct float64 `protobuf:"fixed64,23,opt,name=availability_pct,json=availabilityPct,proto3" json:"availability_pct,omitempty"`
	// Count of successful probes
	SuccessCount uint32 `protobuf:"varint,24,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	// Count of failed probes (result = failure)
	FailureCount uint32 `protobuf:"varint,25,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	// Count of missing probes (result = missing)
	MissingCount uint32 `protobuf:"varint,26,opt,name=missing_count,json=missingCount,proto3" json:"missing_count,omitempty"`
	// Total count of probes
	ProbeCount uint32 `protobuf:"varint,27,opt,name=probe_count,json=probeCount,proto3" json:"probe_count,omitempty"`
	// Minimum response time in milliseconds for successful probes only
	MinResponseTimeMs uint32 `protobuf:"varint,28,opt,name=min_response_time_ms,json=minResponseTimeMs,proto3" json:"min_response_time_ms,omitempty"`
	// Median (p50) response time in milliseconds for successful probes only
	P50ResponseTimeMs uint32 `protobuf:"varint,29,opt,name=p50_response_time_ms,json=p50ResponseTimeMs,proto3" json:"p50_response_time_ms,omitempty"`
	// 95th percentile response time in milliseconds for successful probes only
	P95ResponseTimeMs uint32 `protobuf:"varint,30,opt,name=p95_response_time_ms,json=p95ResponseTimeMs,proto3" json:"p95_response_time_ms,omitempty"`
	// 99th percentile response time in milliseconds for successful probes only
	P99ResponseTimeMs uint32 `protobuf:"varint,31,opt,name=p99_response_time_ms,json=p99ResponseTimeMs,proto3" json:"p99_response_time_ms,omitempty"`
	// Maximum response time in milliseconds for successful probes only
	MaxResponseTimeMs uint32 `protobuf:"varint,32,opt,name=max_response_time_ms,json=maxResponseTimeMs,proto3" json:"max_response_time_ms,omitempty"`
	// Count of unique peers probed
	UniquePeerCount uint32 `protobuf:"varint,33,opt,name=unique_peer_count,json=uniquePeerCount,proto3" json:"unique_peer_count,omitempty"`
	// Count of unique client names
	UniqueClientCount uint32 `protobuf:"varint,34,opt,name=unique_client_count,json=uniqueClientCount,proto3" json:"unique_client_count,omitempty"`
	// Count of unique client implementations
	UniqueImplementationCount uint32 `protobuf:"varint,35,opt,name=unique_implementation_count,json=uniqueImplementationCount,proto3" json:"unique_implementation_count,omitempty"`
}

func (x *FctDataColumnAvailabilityBySlotBlob) Reset() {
	*x = FctDataColumnAvailabilityBySlotBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FctDataColumnAvailabilityBySlotBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FctDataColumnAvailabilityBySlotBlob) ProtoMessage() {}

func (x *FctDataColumnAvailabilityBySlotBlob) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FctDataColumnAvailabilityBySlotBlob.ProtoReflect.Descriptor instead.
func (*FctDataColumnAvailabilityBySlotBlob) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_by_slot_blob_proto_rawDescGZIP(), []int{0}
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetWallclockRequestSlot() uint32 {
	if x != nil {
		return x.WallclockRequestSlot
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetWallclockRequestSlotStartDateTime() uint32 {
	if x != nil {
		return x.WallclockRequestSlotStartDateTime
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetWallclockRequestEpoch() uint32 {
	if x != nil {
		return x.WallclockRequestEpoch
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetWallclockRequestEpochStartDateTime() uint32 {
	if x != nil {
		return x.WallclockRequestEpochStartDateTime
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetBlobIndex() uint32 {
	if x != nil {
		return x.BlobIndex
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetColumnIndex() uint64 {
	if x != nil {
		return x.ColumnIndex
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetBlobCount() uint32 {
	if x != nil {
		return x.BlobCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetAvailabilityPct() float64 {
	if x != nil {
		return x.AvailabilityPct
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetSuccessCount() uint32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetFailureCount() uint32 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetMissingCount() uint32 {
	if x != nil {
		return x.MissingCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetProbeCount() uint32 {
	if x != nil {
		return x.ProbeCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetMinResponseTimeMs() uint32 {
	if x != nil {
		return x.MinResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetP50ResponseTimeMs() uint32 {
	if x != nil {
		return x.P50ResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetP95ResponseTimeMs() uint32 {
	if x != nil {
		return x.P95ResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetP99ResponseTimeMs() uint32 {
	if x != nil {
		return x.P99ResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetMaxResponseTimeMs() uint32 {
	if x != nil {
		return x.MaxResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetUniquePeerCount() uint32 {
	if x != nil {
		return x.UniquePeerCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetUniqueClientCount() uint32 {
	if x != nil {
		return x.UniqueClientCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityBySlotBlob) GetUniqueImplementationCount() uint32 {
	if x != nil {
		return x.UniqueImplementationCount
	}
	return 0
}

// Request for listing fct_data_column_availability_by_slot_blob records
type ListFctDataColumnAvailabilityBySlotBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required unless using alternatives: slot)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by blob_index - Blob index within the slot (0-based, typically 0-5) (ORDER BY column 2 - optional)
	BlobIndex *UInt32Filter `protobuf:"bytes,2,opt,name=blob_index,json=blobIndex,proto3" json:"blob_index,omitempty"`
	// Filter by column_index - Column index being probed (0-127) (ORDER BY column 3 - optional)
	ColumnIndex *UInt64Filter `protobuf:"bytes,3,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	// Filter by updated_date_time - Timestamp when the record was last updated (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,4,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by slot - Slot number being probed (PROJECTION: p_by_slot_blob_column - alternative to slot_start_date_time)
	Slot *UInt32Filter `protobuf:"bytes,5,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by epoch - Epoch number containing the slot (optional)
	Epoch *UInt32Filter `protobuf:"bytes,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,7,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by wallclock_request_slot - The wallclock slot when the request was sent (optional)
	WallclockRequestSlot *UInt32Filter `protobuf:"bytes,8,opt,name=wallclock_request_slot,json=wallclockRequestSlot,proto3" json:"wallclock_request_slot,omitempty"`
	// Filter by wallclock_request_slot_start_date_time - The start time for the slot when the request was sent (optional)
	WallclockRequestSlotStartDateTime *UInt32Filter `protobuf:"bytes,9,opt,name=wallclock_request_slot_start_date_time,json=wallclockRequestSlotStartDateTime,proto3" json:"wallclock_request_slot_start_date_time,omitempty"`
	// Filter by wallclock_request_epoch - The wallclock epoch when the request was sent (optional)
	WallclockRequestEpoch *UInt32Filter `protobuf:"bytes,10,opt,name=wallclock_request_epoch,json=wallclockRequestEpoch,proto3" json:"wallclock_request_epoch,omitempty"`
	// Filter by wallclock_request_epoch_start_date_time - The start time for the wallclock epoch when the request was sent (optional)
	WallclockRequestEpochStartDateTime *UInt32Filter `protobuf:"bytes,11,opt,name=wallclock_request_epoch_start_date_time,json=wallclockRequestEpochStartDateTime,proto3" json:"wallclock_request_epoch_start_date_time,omitempty"`
	// Filter by blob_count - Total number of blobs in the slot (optional)
	BlobCount *UInt32Filter `protobuf:"bytes,12,opt,name=blob_count,json=blobCount,proto3" json:"blob_count,omitempty"`
	// Filter by availability_pct - Availability percentage (success / total * 100) rounded to 2 decimal places - same for all blobs in column (optional)
	AvailabilityPct *wrapperspb.DoubleValue `protobuf:"bytes,13,opt,name=availability_pct,json=availabilityPct,proto3" json:"availability_pct,omitempty"`
	// Filter by success_count - Count of successful probes (optional)
	SuccessCount *UInt32Filter `protobuf:"bytes,14,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	// Filter by failure_count - Count of failed probes (result = failure) (optional)
	FailureCount *UInt32Filter `protobuf:"bytes,15,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	// Filter by missing_count - Count of missing probes (result = missing) (optional)
	MissingCount *UInt32Filter `protobuf:"bytes,16,opt,name=missing_count,json=missingCount,proto3" json:"missing_count,omitempty"`
	// Filter by probe_count - Total count of probes (optional)
	ProbeCount *UInt32Filter `protobuf:"bytes,17,opt,name=probe_count,json=probeCount,proto3" json:"probe_count,omitempty"`
	// Filter by min_response_time_ms - Minimum response time in milliseconds for successful probes only (optional)
	MinResponseTimeMs *UInt32Filter `protobuf:"bytes,18,opt,name=min_response_time_ms,json=minResponseTimeMs,proto3" json:"min_response_time_ms,omitempty"`
	// Filter by p50_response_time_ms - Median (p50) response time in milliseconds for successful probes only (optional)
	P50ResponseTimeMs *UInt32Filter `protobuf:"bytes,19,opt,name=p50_response_time_ms,json=p50ResponseTimeMs,proto3" json:"p50_response_time_ms,omitempty"`
	// Filter by p95_response_time_ms - 95th percentile response time in milliseconds for successful probes only (optional)
	P95ResponseTimeMs *UInt32Filter `protobuf:"bytes,20,opt,name=p95_response_time_ms,json=p95ResponseTimeMs,proto3" json:"p95_response_time_ms,omitempty"`
	// Filter by p99_response_time_ms - 99th percentile response time in milliseconds for successful probes only (optional)
	P99ResponseTimeMs *UInt32Filter `protobuf:"bytes,21,opt,name=p99_response_time_ms,json=p99ResponseTimeMs,proto3" json:"p99_response_time_ms,omitempty"`
	// Filter by max_response_time_ms - Maximum response time in milliseconds for successful probes only (optional)
	MaxResponseTimeMs *UInt32Filter `protobuf:"bytes,22,opt,name=max_response_time_ms,json=maxResponseTimeMs,proto3" json:"max_response_time_ms,omitempty"`
	// Filter by unique_peer_count - Count of unique peers probed (optional)
	UniquePeerCount *UInt32Filter `protobuf:"bytes,23,opt,name=unique_peer_count,json=uniquePeerCount,proto3" json:"unique_peer_count,omitempty"`
	// Filter by unique_client_count - Count of unique client names (optional)
	UniqueClientCount *UInt32Filter `protobuf:"bytes,24,opt,name=unique_client_count,json=uniqueClientCount,proto3" json:"unique_client_count,omitempty"`
	// Filter by unique_implementation_count - Count of unique client implementations (optional)
	UniqueImplementationCount *UInt32Filter `protobuf:"bytes,25,opt,name=unique_implementation_count,json=uniqueImplementationCount,proto3" json:"unique_implementation_count,omitempty"`
	// The maximum number of fct_data_column_availability_by_slot_blob to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,26,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListFctDataColumnAvailabilityBySlotBlob` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,27,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,28,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) Reset() {
	*x = ListFctDataColumnAvailabilityBySlotBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctDataColumnAvailabilityBySlotBlobRequest) ProtoMessage() {}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctDataColumnAvailabilityBySlotBlobRequest.ProtoReflect.Descriptor instead.
func (*ListFctDataColumnAvailabilityBySlotBlobRequest) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_by_slot_blob_proto_rawDescGZIP(), []int{1}
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetBlobIndex() *UInt32Filter {
	if x != nil {
		return x.BlobIndex
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetColumnIndex() *UInt64Filter {
	if x != nil {
		return x.ColumnIndex
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetWallclockRequestSlot() *UInt32Filter {
	if x != nil {
		return x.WallclockRequestSlot
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetWallclockRequestSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.WallclockRequestSlotStartDateTime
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetWallclockRequestEpoch() *UInt32Filter {
	if x != nil {
		return x.WallclockRequestEpoch
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetWallclockRequestEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.WallclockRequestEpochStartDateTime
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetBlobCount() *UInt32Filter {
	if x != nil {
		return x.BlobCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetAvailabilityPct() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AvailabilityPct
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetSuccessCount() *UInt32Filter {
	if x != nil {
		return x.SuccessCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetFailureCount() *UInt32Filter {
	if x != nil {
		return x.FailureCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetMissingCount() *UInt32Filter {
	if x != nil {
		return x.MissingCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetProbeCount() *UInt32Filter {
	if x != nil {
		return x.ProbeCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetMinResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.MinResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetP50ResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.P50ResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetP95ResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.P95ResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetP99ResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.P99ResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetMaxResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.MaxResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetUniquePeerCount() *UInt32Filter {
	if x != nil {
		return x.UniquePeerCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetUniqueClientCount() *UInt32Filter {
	if x != nil {
		return x.UniqueClientCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetUniqueImplementationCount() *UInt32Filter {
	if x != nil {
		return x.UniqueImplementationCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFctDataColumnAvailabilityBySlotBlobRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response for listing fct_data_column_availability_by_slot_blob records
type ListFctDataColumnAvailabilityBySlotBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fct_data_column_availability_by_slot_blob.
	FctDataColumnAvailabilityBySlotBlob []*FctDataColumnAvailabilityBySlotBlob `protobuf:"bytes,1,rep,name=fct_data_column_availability_by_slot_blob,json=fctDataColumnAvailabilityBySlotBlob,proto3" json:"fct_data_column_availability_by_slot_blob,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFctDataColumnAvailabilityBySlotBlobResponse) Reset() {
	*x = ListFctDataColumnAvailabilityBySlotBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctDataColumnAvailabilityBySlotBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctDataColumnAvailabilityBySlotBlobResponse) ProtoMessage() {}

func (x *ListFctDataColumnAvailabilityBySlotBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctDataColumnAvailabilityBySlotBlobResponse.ProtoReflect.Descriptor instead.
func (*ListFctDataColumnAvailabilityBySlotBlobResponse) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_by_slot_blob_proto_rawDescGZIP(), []int{2}
}

func (x *ListFctDataColumnAvailabilityBySlotBlobResponse) GetFctDataColumnAvailabilityBySlotBlob() []*FctDataColumnAvailabilityBySlotBlob {
	if x != nil {
		return x.FctDataColumnAvailabilityBySlotBlob
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityBySlotBlobResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request for getting a single fct_data_column_availability_by_slot_blob record by primary key
type GetFctDataColumnAvailabilityBySlotBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetFctDataColumnAvailabilityBySlotBlobRequest) Reset() {
	*x = GetFctDataColumnAvailabilityBySlotBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctDataColumnAvailabilityBySlotBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctDataColumnAvailabilityBySlotBlobRequest) ProtoMessage() {}

func (x *GetFctDataColumnAvailabilityBySlotBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctDataColumnAvailabilityBySlotBlobRequest.ProtoReflect.Descriptor instead.
func (*GetFctDataColumnAvailabilityBySlotBlobRequest) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_by_slot_blob_proto_rawDescGZIP(), []int{3}
}

func (x *GetFctDataColumnAvailabilityBySlotBlobRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// Response for getting a single fct_data_column_availability_by_slot_blob record
type GetFctDataColumnAvailabilityBySlotBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *FctDataColumnAvailabilityBySlotBlob `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetFctDataColumnAvailabilityBySlotBlobResponse) Reset() {
	*x = GetFctDataColumnAvailabilityBySlotBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctDataColumnAvailabilityBySlotBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctDataColumnAvailabilityBySlotBlobResponse) ProtoMessage() {}

func (x *GetFctDataColumnAvailabilityBySlotBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_by_slot_blob_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctDataColumnAvailabilityBySlotBlobResponse.ProtoReflect.Descriptor instead.
func (*GetFctDataColumnAvailabilityBySlotBlobResponse) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_by_slot_blob_proto_rawDescGZIP(), []int{4}
}

func (x *GetFctDataColumnAvailabilityBySlotBlobResponse) GetItem() *FctDataColumnAvailabilityBySlotBlob {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_fct_data_column_availability_by_slot_blob_proto protoreflect.FileDescriptor

var file_fct_data_column_availability_by_slot_blob_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62,
	0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa2, 0x09, 0x0a, 0x23, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x79, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x31, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x26, 0x77, 0x61, 0x6c,
	0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x77, 0x61, 0x6c, 0x6c, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x77,
	0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x53, 0x0a, 0x27, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x35, 0x30, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x35, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x39, 0x35, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x39, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x39, 0x39, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x39, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x0f, 0x0a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x12, 0xe0, 0x41, 0x01, 0x9a,
	0xb5, 0x18, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x11,
	0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x43, 0xe0, 0x41, 0x01, 0x8a, 0xb5, 0x18,
	0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x92, 0xb5, 0x18, 0x15, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x9a, 0xb5,
	0x18, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x49, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x16,
	0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x69, 0x0a, 0x26, 0x77, 0x61,
	0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x21, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x17, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15,
	0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x6b, 0x0a, 0x27, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x22,
	0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x12, 0x47, 0x0a, 0x14, 0x70, 0x35, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x70, 0x35, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x70, 0x39, 0x35,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x11, 0x70, 0x39, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x70, 0x39, 0x39, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x70, 0x39, 0x39, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x56, 0x0a, 0x1b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x19, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xdc,
	0x01, 0x0a, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x29, 0x66, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x23, 0x66, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53, 0x6c, 0x6f,
	0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x60, 0x0a,
	0x2d, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53,
	0x6c, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x6e, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x79, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x79, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32,
	0x9e, 0x03, 0x0a, 0x2a, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53,
	0x6c, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xac,
	0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53, 0x6c, 0x6f,
	0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0xc0, 0x01,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53, 0x6c,
	0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x7b, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7d,
	0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d,
	0x63, 0x62, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fct_data_column_availability_by_slot_blob_proto_rawDescOnce sync.Once
	file_fct_data_column_availability_by_slot_blob_proto_rawDescData = file_fct_data_column_availability_by_slot_blob_proto_rawDesc
)

func file_fct_data_column_availability_by_slot_blob_proto_rawDescGZIP() []byte {
	file_fct_data_column_availability_by_slot_blob_proto_rawDescOnce.Do(func() {
		file_fct_data_column_availability_by_slot_blob_proto_rawDescData = protoimpl.X.CompressGZIP(file_fct_data_column_availability_by_slot_blob_proto_rawDescData)
	})
	return file_fct_data_column_availability_by_slot_blob_proto_rawDescData
}

var file_fct_data_column_availability_by_slot_blob_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fct_data_column_availability_by_slot_blob_proto_goTypes = []any{
	(*FctDataColumnAvailabilityBySlotBlob)(nil),             // 0: cbt.FctDataColumnAvailabilityBySlotBlob
	(*ListFctDataColumnAvailabilityBySlotBlobRequest)(nil),  // 1: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest
	(*ListFctDataColumnAvailabilityBySlotBlobResponse)(nil), // 2: cbt.ListFctDataColumnAvailabilityBySlotBlobResponse
	(*GetFctDataColumnAvailabilityBySlotBlobRequest)(nil),   // 3: cbt.GetFctDataColumnAvailabilityBySlotBlobRequest
	(*GetFctDataColumnAvailabilityBySlotBlobResponse)(nil),  // 4: cbt.GetFctDataColumnAvailabilityBySlotBlobResponse
	(*UInt32Filter)(nil),           // 5: cbt.UInt32Filter
	(*UInt64Filter)(nil),           // 6: cbt.UInt64Filter
	(*wrapperspb.DoubleValue)(nil), // 7: google.protobuf.DoubleValue
}
var file_fct_data_column_availability_by_slot_blob_proto_depIdxs = []int32{
	5,  // 0: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	5,  // 1: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.blob_index:type_name -> cbt.UInt32Filter
	6,  // 2: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.column_index:type_name -> cbt.UInt64Filter
	5,  // 3: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.updated_date_time:type_name -> cbt.UInt32Filter
	5,  // 4: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.slot:type_name -> cbt.UInt32Filter
	5,  // 5: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.epoch:type_name -> cbt.UInt32Filter
	5,  // 6: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	5,  // 7: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.wallclock_request_slot:type_name -> cbt.UInt32Filter
	5,  // 8: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.wallclock_request_slot_start_date_time:type_name -> cbt.UInt32Filter
	5,  // 9: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.wallclock_request_epoch:type_name -> cbt.UInt32Filter
	5,  // 10: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.wallclock_request_epoch_start_date_time:type_name -> cbt.UInt32Filter
	5,  // 11: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.blob_count:type_name -> cbt.UInt32Filter
	7,  // 12: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.availability_pct:type_name -> google.protobuf.DoubleValue
	5,  // 13: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.success_count:type_name -> cbt.UInt32Filter
	5,  // 14: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.failure_count:type_name -> cbt.UInt32Filter
	5,  // 15: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.missing_count:type_name -> cbt.UInt32Filter
	5,  // 16: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.probe_count:type_name -> cbt.UInt32Filter
	5,  // 17: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.min_response_time_ms:type_name -> cbt.UInt32Filter
	5,  // 18: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.p50_response_time_ms:type_name -> cbt.UInt32Filter
	5,  // 19: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.p95_response_time_ms:type_name -> cbt.UInt32Filter
	5,  // 20: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.p99_response_time_ms:type_name -> cbt.UInt32Filter
	5,  // 21: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.max_response_time_ms:type_name -> cbt.UInt32Filter
	5,  // 22: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.unique_peer_count:type_name -> cbt.UInt32Filter
	5,  // 23: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.unique_client_count:type_name -> cbt.UInt32Filter
	5,  // 24: cbt.ListFctDataColumnAvailabilityBySlotBlobRequest.unique_implementation_count:type_name -> cbt.UInt32Filter
	0,  // 25: cbt.ListFctDataColumnAvailabilityBySlotBlobResponse.fct_data_column_availability_by_slot_blob:type_name -> cbt.FctDataColumnAvailabilityBySlotBlob
	0,  // 26: cbt.GetFctDataColumnAvailabilityBySlotBlobResponse.item:type_name -> cbt.FctDataColumnAvailabilityBySlotBlob
	1,  // 27: cbt.FctDataColumnAvailabilityBySlotBlobService.List:input_type -> cbt.ListFctDataColumnAvailabilityBySlotBlobRequest
	3,  // 28: cbt.FctDataColumnAvailabilityBySlotBlobService.Get:input_type -> cbt.GetFctDataColumnAvailabilityBySlotBlobRequest
	2,  // 29: cbt.FctDataColumnAvailabilityBySlotBlobService.List:output_type -> cbt.ListFctDataColumnAvailabilityBySlotBlobResponse
	4,  // 30: cbt.FctDataColumnAvailabilityBySlotBlobService.Get:output_type -> cbt.GetFctDataColumnAvailabilityBySlotBlobResponse
	29, // [29:31] is the sub-list for method output_type
	27, // [27:29] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_fct_data_column_availability_by_slot_blob_proto_init() }
func file_fct_data_column_availability_by_slot_blob_proto_init() {
	if File_fct_data_column_availability_by_slot_blob_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fct_data_column_availability_by_slot_blob_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FctDataColumnAvailabilityBySlotBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_data_column_availability_by_slot_blob_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctDataColumnAvailabilityBySlotBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_data_column_availability_by_slot_blob_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctDataColumnAvailabilityBySlotBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_data_column_availability_by_slot_blob_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctDataColumnAvailabilityBySlotBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_data_column_availability_by_slot_blob_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctDataColumnAvailabilityBySlotBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fct_data_column_availability_by_slot_blob_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fct_data_column_availability_by_slot_blob_proto_goTypes,
		DependencyIndexes: file_fct_data_column_availability_by_slot_blob_proto_depIdxs,
		MessageInfos:      file_fct_data_column_availability_by_slot_blob_proto_msgTypes,
	}.Build()
	File_fct_data_column_availability_by_slot_blob_proto = out.File
	file_fct_data_column_availability_by_slot_blob_proto_rawDesc = nil
	file_fct_data_column_availability_by_slot_blob_proto_goTypes = nil
	file_fct_data_column_availability_by_slot_blob_proto_depIdxs = nil
}
