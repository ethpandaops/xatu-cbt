// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: fct_data_column_availability_daily.proto

package clickhouse

import (
	_ "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse/clickhouse"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FctDataColumnAvailabilityDaily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Date of the aggregation
	Date string `protobuf:"bytes,12,opt,name=date,proto3" json:"date,omitempty"`
	// Column index (0-127)
	ColumnIndex uint64 `protobuf:"varint,13,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	// Number of hours in this day aggregation
	HourCount uint32 `protobuf:"varint,14,opt,name=hour_count,json=hourCount,proto3" json:"hour_count,omitempty"`
	// Availability percentage calculated from total counts (total_success_count / total_probe_count * 100, rounded to 2 decimal places)
	AvgAvailabilityPct float64 `protobuf:"fixed64,15,opt,name=avg_availability_pct,json=avgAvailabilityPct,proto3" json:"avg_availability_pct,omitempty"`
	// Minimum availability percentage across hours (rounded to 2 decimal places)
	MinAvailabilityPct float64 `protobuf:"fixed64,16,opt,name=min_availability_pct,json=minAvailabilityPct,proto3" json:"min_availability_pct,omitempty"`
	// Maximum availability percentage across hours (rounded to 2 decimal places)
	MaxAvailabilityPct float64 `protobuf:"fixed64,17,opt,name=max_availability_pct,json=maxAvailabilityPct,proto3" json:"max_availability_pct,omitempty"`
	// Total probe count across all hours
	TotalProbeCount uint64 `protobuf:"varint,18,opt,name=total_probe_count,json=totalProbeCount,proto3" json:"total_probe_count,omitempty"`
	// Total successful probes across all hours
	TotalSuccessCount uint64 `protobuf:"varint,19,opt,name=total_success_count,json=totalSuccessCount,proto3" json:"total_success_count,omitempty"`
	// Total failed probes across all hours (result = failure)
	TotalFailureCount uint64 `protobuf:"varint,20,opt,name=total_failure_count,json=totalFailureCount,proto3" json:"total_failure_count,omitempty"`
	// Total missing probes across all hours (result = missing)
	TotalMissingCount uint64 `protobuf:"varint,21,opt,name=total_missing_count,json=totalMissingCount,proto3" json:"total_missing_count,omitempty"`
	// Minimum response time in milliseconds for successful probes only (rounded to whole number)
	MinResponseTimeMs uint32 `protobuf:"varint,22,opt,name=min_response_time_ms,json=minResponseTimeMs,proto3" json:"min_response_time_ms,omitempty"`
	// Average of p50 response times across hours for successful probes only (rounded to whole number)
	AvgP50ResponseTimeMs uint32 `protobuf:"varint,23,opt,name=avg_p50_response_time_ms,json=avgP50ResponseTimeMs,proto3" json:"avg_p50_response_time_ms,omitempty"`
	// Average of p95 response times across hours for successful probes only (rounded to whole number)
	AvgP95ResponseTimeMs uint32 `protobuf:"varint,24,opt,name=avg_p95_response_time_ms,json=avgP95ResponseTimeMs,proto3" json:"avg_p95_response_time_ms,omitempty"`
	// Average of p99 response times across hours for successful probes only (rounded to whole number)
	AvgP99ResponseTimeMs uint32 `protobuf:"varint,25,opt,name=avg_p99_response_time_ms,json=avgP99ResponseTimeMs,proto3" json:"avg_p99_response_time_ms,omitempty"`
	// Maximum response time in milliseconds for successful probes only (rounded to whole number)
	MaxResponseTimeMs uint32 `protobuf:"varint,26,opt,name=max_response_time_ms,json=maxResponseTimeMs,proto3" json:"max_response_time_ms,omitempty"`
	// Maximum blob count observed in this day
	MaxBlobCount uint32 `protobuf:"varint,27,opt,name=max_blob_count,json=maxBlobCount,proto3" json:"max_blob_count,omitempty"`
}

func (x *FctDataColumnAvailabilityDaily) Reset() {
	*x = FctDataColumnAvailabilityDaily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_daily_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FctDataColumnAvailabilityDaily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FctDataColumnAvailabilityDaily) ProtoMessage() {}

func (x *FctDataColumnAvailabilityDaily) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_daily_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FctDataColumnAvailabilityDaily.ProtoReflect.Descriptor instead.
func (*FctDataColumnAvailabilityDaily) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_daily_proto_rawDescGZIP(), []int{0}
}

func (x *FctDataColumnAvailabilityDaily) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *FctDataColumnAvailabilityDaily) GetColumnIndex() uint64 {
	if x != nil {
		return x.ColumnIndex
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetHourCount() uint32 {
	if x != nil {
		return x.HourCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetAvgAvailabilityPct() float64 {
	if x != nil {
		return x.AvgAvailabilityPct
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetMinAvailabilityPct() float64 {
	if x != nil {
		return x.MinAvailabilityPct
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetMaxAvailabilityPct() float64 {
	if x != nil {
		return x.MaxAvailabilityPct
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetTotalProbeCount() uint64 {
	if x != nil {
		return x.TotalProbeCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetTotalSuccessCount() uint64 {
	if x != nil {
		return x.TotalSuccessCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetTotalFailureCount() uint64 {
	if x != nil {
		return x.TotalFailureCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetTotalMissingCount() uint64 {
	if x != nil {
		return x.TotalMissingCount
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetMinResponseTimeMs() uint32 {
	if x != nil {
		return x.MinResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetAvgP50ResponseTimeMs() uint32 {
	if x != nil {
		return x.AvgP50ResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetAvgP95ResponseTimeMs() uint32 {
	if x != nil {
		return x.AvgP95ResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetAvgP99ResponseTimeMs() uint32 {
	if x != nil {
		return x.AvgP99ResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetMaxResponseTimeMs() uint32 {
	if x != nil {
		return x.MaxResponseTimeMs
	}
	return 0
}

func (x *FctDataColumnAvailabilityDaily) GetMaxBlobCount() uint32 {
	if x != nil {
		return x.MaxBlobCount
	}
	return 0
}

// Request for listing fct_data_column_availability_daily records
type ListFctDataColumnAvailabilityDailyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by date - Date of the aggregation (PRIMARY KEY - required)
	Date *StringFilter `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Filter by column_index - Column index (0-127) (ORDER BY column 2 - optional)
	ColumnIndex *UInt64Filter `protobuf:"bytes,2,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	// Filter by updated_date_time - Timestamp when the record was last updated (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,3,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by hour_count - Number of hours in this day aggregation (optional)
	HourCount *UInt32Filter `protobuf:"bytes,4,opt,name=hour_count,json=hourCount,proto3" json:"hour_count,omitempty"`
	// Filter by avg_availability_pct - Availability percentage calculated from total counts (total_success_count / total_probe_count * 100, rounded to 2 decimal places) (optional)
	AvgAvailabilityPct *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=avg_availability_pct,json=avgAvailabilityPct,proto3" json:"avg_availability_pct,omitempty"`
	// Filter by min_availability_pct - Minimum availability percentage across hours (rounded to 2 decimal places) (optional)
	MinAvailabilityPct *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=min_availability_pct,json=minAvailabilityPct,proto3" json:"min_availability_pct,omitempty"`
	// Filter by max_availability_pct - Maximum availability percentage across hours (rounded to 2 decimal places) (optional)
	MaxAvailabilityPct *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=max_availability_pct,json=maxAvailabilityPct,proto3" json:"max_availability_pct,omitempty"`
	// Filter by total_probe_count - Total probe count across all hours (optional)
	TotalProbeCount *UInt64Filter `protobuf:"bytes,8,opt,name=total_probe_count,json=totalProbeCount,proto3" json:"total_probe_count,omitempty"`
	// Filter by total_success_count - Total successful probes across all hours (optional)
	TotalSuccessCount *UInt64Filter `protobuf:"bytes,9,opt,name=total_success_count,json=totalSuccessCount,proto3" json:"total_success_count,omitempty"`
	// Filter by total_failure_count - Total failed probes across all hours (result = failure) (optional)
	TotalFailureCount *UInt64Filter `protobuf:"bytes,10,opt,name=total_failure_count,json=totalFailureCount,proto3" json:"total_failure_count,omitempty"`
	// Filter by total_missing_count - Total missing probes across all hours (result = missing) (optional)
	TotalMissingCount *UInt64Filter `protobuf:"bytes,11,opt,name=total_missing_count,json=totalMissingCount,proto3" json:"total_missing_count,omitempty"`
	// Filter by min_response_time_ms - Minimum response time in milliseconds for successful probes only (rounded to whole number) (optional)
	MinResponseTimeMs *UInt32Filter `protobuf:"bytes,12,opt,name=min_response_time_ms,json=minResponseTimeMs,proto3" json:"min_response_time_ms,omitempty"`
	// Filter by avg_p50_response_time_ms - Average of p50 response times across hours for successful probes only (rounded to whole number) (optional)
	AvgP50ResponseTimeMs *UInt32Filter `protobuf:"bytes,13,opt,name=avg_p50_response_time_ms,json=avgP50ResponseTimeMs,proto3" json:"avg_p50_response_time_ms,omitempty"`
	// Filter by avg_p95_response_time_ms - Average of p95 response times across hours for successful probes only (rounded to whole number) (optional)
	AvgP95ResponseTimeMs *UInt32Filter `protobuf:"bytes,14,opt,name=avg_p95_response_time_ms,json=avgP95ResponseTimeMs,proto3" json:"avg_p95_response_time_ms,omitempty"`
	// Filter by avg_p99_response_time_ms - Average of p99 response times across hours for successful probes only (rounded to whole number) (optional)
	AvgP99ResponseTimeMs *UInt32Filter `protobuf:"bytes,15,opt,name=avg_p99_response_time_ms,json=avgP99ResponseTimeMs,proto3" json:"avg_p99_response_time_ms,omitempty"`
	// Filter by max_response_time_ms - Maximum response time in milliseconds for successful probes only (rounded to whole number) (optional)
	MaxResponseTimeMs *UInt32Filter `protobuf:"bytes,16,opt,name=max_response_time_ms,json=maxResponseTimeMs,proto3" json:"max_response_time_ms,omitempty"`
	// Filter by max_blob_count - Maximum blob count observed in this day (optional)
	MaxBlobCount *UInt32Filter `protobuf:"bytes,17,opt,name=max_blob_count,json=maxBlobCount,proto3" json:"max_blob_count,omitempty"`
	// The maximum number of fct_data_column_availability_daily to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,18,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListFctDataColumnAvailabilityDaily` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,19,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,20,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListFctDataColumnAvailabilityDailyRequest) Reset() {
	*x = ListFctDataColumnAvailabilityDailyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_daily_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctDataColumnAvailabilityDailyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctDataColumnAvailabilityDailyRequest) ProtoMessage() {}

func (x *ListFctDataColumnAvailabilityDailyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_daily_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctDataColumnAvailabilityDailyRequest.ProtoReflect.Descriptor instead.
func (*ListFctDataColumnAvailabilityDailyRequest) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_daily_proto_rawDescGZIP(), []int{1}
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetDate() *StringFilter {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetColumnIndex() *UInt64Filter {
	if x != nil {
		return x.ColumnIndex
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetHourCount() *UInt32Filter {
	if x != nil {
		return x.HourCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetAvgAvailabilityPct() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AvgAvailabilityPct
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetMinAvailabilityPct() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinAvailabilityPct
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetMaxAvailabilityPct() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxAvailabilityPct
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetTotalProbeCount() *UInt64Filter {
	if x != nil {
		return x.TotalProbeCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetTotalSuccessCount() *UInt64Filter {
	if x != nil {
		return x.TotalSuccessCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetTotalFailureCount() *UInt64Filter {
	if x != nil {
		return x.TotalFailureCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetTotalMissingCount() *UInt64Filter {
	if x != nil {
		return x.TotalMissingCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetMinResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.MinResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetAvgP50ResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.AvgP50ResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetAvgP95ResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.AvgP95ResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetAvgP99ResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.AvgP99ResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetMaxResponseTimeMs() *UInt32Filter {
	if x != nil {
		return x.MaxResponseTimeMs
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetMaxBlobCount() *UInt32Filter {
	if x != nil {
		return x.MaxBlobCount
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFctDataColumnAvailabilityDailyRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response for listing fct_data_column_availability_daily records
type ListFctDataColumnAvailabilityDailyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fct_data_column_availability_daily.
	FctDataColumnAvailabilityDaily []*FctDataColumnAvailabilityDaily `protobuf:"bytes,1,rep,name=fct_data_column_availability_daily,json=fctDataColumnAvailabilityDaily,proto3" json:"fct_data_column_availability_daily,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFctDataColumnAvailabilityDailyResponse) Reset() {
	*x = ListFctDataColumnAvailabilityDailyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_daily_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctDataColumnAvailabilityDailyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctDataColumnAvailabilityDailyResponse) ProtoMessage() {}

func (x *ListFctDataColumnAvailabilityDailyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_daily_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctDataColumnAvailabilityDailyResponse.ProtoReflect.Descriptor instead.
func (*ListFctDataColumnAvailabilityDailyResponse) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_daily_proto_rawDescGZIP(), []int{2}
}

func (x *ListFctDataColumnAvailabilityDailyResponse) GetFctDataColumnAvailabilityDaily() []*FctDataColumnAvailabilityDaily {
	if x != nil {
		return x.FctDataColumnAvailabilityDaily
	}
	return nil
}

func (x *ListFctDataColumnAvailabilityDailyResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request for getting a single fct_data_column_availability_daily record by primary key
type GetFctDataColumnAvailabilityDailyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date of the aggregation
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // Primary key (required)
}

func (x *GetFctDataColumnAvailabilityDailyRequest) Reset() {
	*x = GetFctDataColumnAvailabilityDailyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_daily_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctDataColumnAvailabilityDailyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctDataColumnAvailabilityDailyRequest) ProtoMessage() {}

func (x *GetFctDataColumnAvailabilityDailyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_daily_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctDataColumnAvailabilityDailyRequest.ProtoReflect.Descriptor instead.
func (*GetFctDataColumnAvailabilityDailyRequest) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_daily_proto_rawDescGZIP(), []int{3}
}

func (x *GetFctDataColumnAvailabilityDailyRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// Response for getting a single fct_data_column_availability_daily record
type GetFctDataColumnAvailabilityDailyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *FctDataColumnAvailabilityDaily `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetFctDataColumnAvailabilityDailyResponse) Reset() {
	*x = GetFctDataColumnAvailabilityDailyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_data_column_availability_daily_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctDataColumnAvailabilityDailyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctDataColumnAvailabilityDailyResponse) ProtoMessage() {}

func (x *GetFctDataColumnAvailabilityDailyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_data_column_availability_daily_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctDataColumnAvailabilityDailyResponse.ProtoReflect.Descriptor instead.
func (*GetFctDataColumnAvailabilityDailyResponse) Descriptor() ([]byte, []int) {
	return file_fct_data_column_availability_daily_proto_rawDescGZIP(), []int{4}
}

func (x *GetFctDataColumnAvailabilityDailyResponse) GetItem() *FctDataColumnAvailabilityDaily {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_fct_data_column_availability_daily_proto protoreflect.FileDescriptor

var file_fct_data_column_availability_daily_proto_rawDesc = []byte{
	0x0a, 0x28, 0x66, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x06, 0x0a, 0x1e, 0x46,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61,
	0x76, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x63,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x6d, 0x69, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x35, 0x30, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x76, 0x67, 0x50, 0x35, 0x30, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x76,
	0x67, 0x5f, 0x70, 0x39, 0x35, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x76,
	0x67, 0x50, 0x39, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x39, 0x39, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x76, 0x67, 0x50, 0x39, 0x39, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xdd, 0x0a, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x12, 0xe0, 0x41, 0x02, 0x9a, 0xb5, 0x18, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x68, 0x6f, 0x75,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x68, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x53, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x12, 0x61, 0x76, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x63, 0x74, 0x12, 0x53, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x63, 0x74, 0x12, 0x53, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x63, 0x74, 0x12,
	0x42, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x14, 0x6d,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x4e, 0x0a, 0x18, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x35, 0x30, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14,
	0x61, 0x76, 0x67, 0x50, 0x35, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x4e, 0x0a, 0x18, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x39, 0x35, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14,
	0x61, 0x76, 0x67, 0x50, 0x39, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x4e, 0x0a, 0x18, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x39, 0x39, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14,
	0x61, 0x76, 0x67, 0x50, 0x39, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x3c, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x22, 0xc5, 0x01, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x22, 0x66, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x1e, 0x66, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3e, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x64, 0x0a, 0x29, 0x47, 0x65, 0x74,
	0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32,
	0xe7, 0x02, 0x0a, 0x25, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2e, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x9f, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x2d, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x65, 0x7d, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fct_data_column_availability_daily_proto_rawDescOnce sync.Once
	file_fct_data_column_availability_daily_proto_rawDescData = file_fct_data_column_availability_daily_proto_rawDesc
)

func file_fct_data_column_availability_daily_proto_rawDescGZIP() []byte {
	file_fct_data_column_availability_daily_proto_rawDescOnce.Do(func() {
		file_fct_data_column_availability_daily_proto_rawDescData = protoimpl.X.CompressGZIP(file_fct_data_column_availability_daily_proto_rawDescData)
	})
	return file_fct_data_column_availability_daily_proto_rawDescData
}

var file_fct_data_column_availability_daily_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fct_data_column_availability_daily_proto_goTypes = []any{
	(*FctDataColumnAvailabilityDaily)(nil),             // 0: cbt.FctDataColumnAvailabilityDaily
	(*ListFctDataColumnAvailabilityDailyRequest)(nil),  // 1: cbt.ListFctDataColumnAvailabilityDailyRequest
	(*ListFctDataColumnAvailabilityDailyResponse)(nil), // 2: cbt.ListFctDataColumnAvailabilityDailyResponse
	(*GetFctDataColumnAvailabilityDailyRequest)(nil),   // 3: cbt.GetFctDataColumnAvailabilityDailyRequest
	(*GetFctDataColumnAvailabilityDailyResponse)(nil),  // 4: cbt.GetFctDataColumnAvailabilityDailyResponse
	(*StringFilter)(nil),                               // 5: cbt.StringFilter
	(*UInt64Filter)(nil),                               // 6: cbt.UInt64Filter
	(*UInt32Filter)(nil),                               // 7: cbt.UInt32Filter
	(*wrapperspb.DoubleValue)(nil),                     // 8: google.protobuf.DoubleValue
}
var file_fct_data_column_availability_daily_proto_depIdxs = []int32{
	5,  // 0: cbt.ListFctDataColumnAvailabilityDailyRequest.date:type_name -> cbt.StringFilter
	6,  // 1: cbt.ListFctDataColumnAvailabilityDailyRequest.column_index:type_name -> cbt.UInt64Filter
	7,  // 2: cbt.ListFctDataColumnAvailabilityDailyRequest.updated_date_time:type_name -> cbt.UInt32Filter
	7,  // 3: cbt.ListFctDataColumnAvailabilityDailyRequest.hour_count:type_name -> cbt.UInt32Filter
	8,  // 4: cbt.ListFctDataColumnAvailabilityDailyRequest.avg_availability_pct:type_name -> google.protobuf.DoubleValue
	8,  // 5: cbt.ListFctDataColumnAvailabilityDailyRequest.min_availability_pct:type_name -> google.protobuf.DoubleValue
	8,  // 6: cbt.ListFctDataColumnAvailabilityDailyRequest.max_availability_pct:type_name -> google.protobuf.DoubleValue
	6,  // 7: cbt.ListFctDataColumnAvailabilityDailyRequest.total_probe_count:type_name -> cbt.UInt64Filter
	6,  // 8: cbt.ListFctDataColumnAvailabilityDailyRequest.total_success_count:type_name -> cbt.UInt64Filter
	6,  // 9: cbt.ListFctDataColumnAvailabilityDailyRequest.total_failure_count:type_name -> cbt.UInt64Filter
	6,  // 10: cbt.ListFctDataColumnAvailabilityDailyRequest.total_missing_count:type_name -> cbt.UInt64Filter
	7,  // 11: cbt.ListFctDataColumnAvailabilityDailyRequest.min_response_time_ms:type_name -> cbt.UInt32Filter
	7,  // 12: cbt.ListFctDataColumnAvailabilityDailyRequest.avg_p50_response_time_ms:type_name -> cbt.UInt32Filter
	7,  // 13: cbt.ListFctDataColumnAvailabilityDailyRequest.avg_p95_response_time_ms:type_name -> cbt.UInt32Filter
	7,  // 14: cbt.ListFctDataColumnAvailabilityDailyRequest.avg_p99_response_time_ms:type_name -> cbt.UInt32Filter
	7,  // 15: cbt.ListFctDataColumnAvailabilityDailyRequest.max_response_time_ms:type_name -> cbt.UInt32Filter
	7,  // 16: cbt.ListFctDataColumnAvailabilityDailyRequest.max_blob_count:type_name -> cbt.UInt32Filter
	0,  // 17: cbt.ListFctDataColumnAvailabilityDailyResponse.fct_data_column_availability_daily:type_name -> cbt.FctDataColumnAvailabilityDaily
	0,  // 18: cbt.GetFctDataColumnAvailabilityDailyResponse.item:type_name -> cbt.FctDataColumnAvailabilityDaily
	1,  // 19: cbt.FctDataColumnAvailabilityDailyService.List:input_type -> cbt.ListFctDataColumnAvailabilityDailyRequest
	3,  // 20: cbt.FctDataColumnAvailabilityDailyService.Get:input_type -> cbt.GetFctDataColumnAvailabilityDailyRequest
	2,  // 21: cbt.FctDataColumnAvailabilityDailyService.List:output_type -> cbt.ListFctDataColumnAvailabilityDailyResponse
	4,  // 22: cbt.FctDataColumnAvailabilityDailyService.Get:output_type -> cbt.GetFctDataColumnAvailabilityDailyResponse
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_fct_data_column_availability_daily_proto_init() }
func file_fct_data_column_availability_daily_proto_init() {
	if File_fct_data_column_availability_daily_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fct_data_column_availability_daily_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FctDataColumnAvailabilityDaily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_data_column_availability_daily_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctDataColumnAvailabilityDailyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_data_column_availability_daily_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctDataColumnAvailabilityDailyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_data_column_availability_daily_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctDataColumnAvailabilityDailyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_data_column_availability_daily_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctDataColumnAvailabilityDailyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fct_data_column_availability_daily_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fct_data_column_availability_daily_proto_goTypes,
		DependencyIndexes: file_fct_data_column_availability_daily_proto_depIdxs,
		MessageInfos:      file_fct_data_column_availability_daily_proto_msgTypes,
	}.Build()
	File_fct_data_column_availability_daily_proto = out.File
	file_fct_data_column_availability_daily_proto_rawDesc = nil
	file_fct_data_column_availability_daily_proto_goTypes = nil
	file_fct_data_column_availability_daily_proto_depIdxs = nil
}
