// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for fct_data_column_availability_hourly

package clickhouse

import (
	"fmt"
)

// BuildListFctDataColumnAvailabilityHourlyQuery constructs a parameterized SQL query from a ListFctDataColumnAvailabilityHourlyRequest
//
// Available projections:
//   - p_by_hour_column (primary key: hour_start_date_time)
//
// Use WithProjection() option to select a specific projection.
func BuildListFctDataColumnAvailabilityHourlyQuery(req *ListFctDataColumnAvailabilityHourlyRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.HourStartDateTime == nil {
		return SQLQuery{}, fmt.Errorf("primary key field hour_start_date_time is required")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.HourStartDateTime.Filter.(type) {
	case *UInt32Filter_Eq:
		qb.AddCondition("hour_start_date_time", "=", DateTimeValue{filter.Eq})
	case *UInt32Filter_Ne:
		qb.AddCondition("hour_start_date_time", "!=", DateTimeValue{filter.Ne})
	case *UInt32Filter_Lt:
		qb.AddCondition("hour_start_date_time", "<", DateTimeValue{filter.Lt})
	case *UInt32Filter_Lte:
		qb.AddCondition("hour_start_date_time", "<=", DateTimeValue{filter.Lte})
	case *UInt32Filter_Gt:
		qb.AddCondition("hour_start_date_time", ">", DateTimeValue{filter.Gt})
	case *UInt32Filter_Gte:
		qb.AddCondition("hour_start_date_time", ">=", DateTimeValue{filter.Gte})
	case *UInt32Filter_Between:
		qb.AddBetweenCondition("hour_start_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
	case *UInt32Filter_In:
		if len(filter.In.Values) > 0 {
			converted := make([]interface{}, len(filter.In.Values))
			for i, v := range filter.In.Values {
				converted[i] = DateTimeValue{v}
			}
			qb.AddInCondition("hour_start_date_time", converted)
		}
	case *UInt32Filter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			converted := make([]interface{}, len(filter.NotIn.Values))
			for i, v := range filter.NotIn.Values {
				converted[i] = DateTimeValue{v}
			}
			qb.AddNotInCondition("hour_start_date_time", converted)
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", DateTimeValue{filter.Eq})
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", DateTimeValue{filter.Ne})
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", DateTimeValue{filter.Lt})
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", DateTimeValue{filter.Lte})
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", DateTimeValue{filter.Gt})
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", DateTimeValue{filter.Gte})
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", DateTimeValue{filter.Between.Min}, DateTimeValue{filter.Between.Max.GetValue()})
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				converted := make([]interface{}, len(filter.In.Values))
				for i, v := range filter.In.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddInCondition("updated_date_time", converted)
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				converted := make([]interface{}, len(filter.NotIn.Values))
				for i, v := range filter.NotIn.Values {
					converted[i] = DateTimeValue{v}
				}
				qb.AddNotInCondition("updated_date_time", converted)
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: column_index
	if req.ColumnIndex != nil {
		switch filter := req.ColumnIndex.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("column_index", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("column_index", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("column_index", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("column_index", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("column_index", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("column_index", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("column_index", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("column_index", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("column_index", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: epoch_count
	if req.EpochCount != nil {
		switch filter := req.EpochCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("epoch_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("epoch_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("epoch_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("epoch_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("epoch_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("epoch_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("epoch_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("epoch_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("epoch_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: avg_availability_pct

	// Add filter for column: min_availability_pct

	// Add filter for column: max_availability_pct

	// Add filter for column: total_probe_count
	if req.TotalProbeCount != nil {
		switch filter := req.TotalProbeCount.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("total_probe_count", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("total_probe_count", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("total_probe_count", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("total_probe_count", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("total_probe_count", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("total_probe_count", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("total_probe_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("total_probe_count", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("total_probe_count", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: total_success_count
	if req.TotalSuccessCount != nil {
		switch filter := req.TotalSuccessCount.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("total_success_count", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("total_success_count", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("total_success_count", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("total_success_count", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("total_success_count", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("total_success_count", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("total_success_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("total_success_count", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("total_success_count", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: total_failure_count
	if req.TotalFailureCount != nil {
		switch filter := req.TotalFailureCount.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("total_failure_count", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("total_failure_count", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("total_failure_count", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("total_failure_count", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("total_failure_count", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("total_failure_count", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("total_failure_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("total_failure_count", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("total_failure_count", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: total_missing_count
	if req.TotalMissingCount != nil {
		switch filter := req.TotalMissingCount.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("total_missing_count", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("total_missing_count", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("total_missing_count", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("total_missing_count", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("total_missing_count", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("total_missing_count", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("total_missing_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("total_missing_count", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("total_missing_count", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: min_response_time_ms
	if req.MinResponseTimeMs != nil {
		switch filter := req.MinResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("min_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("min_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("min_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("min_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("min_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("min_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("min_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("min_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("min_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: avg_p50_response_time_ms
	if req.AvgP50ResponseTimeMs != nil {
		switch filter := req.AvgP50ResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("avg_p50_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("avg_p50_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("avg_p50_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("avg_p50_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("avg_p50_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("avg_p50_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("avg_p50_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("avg_p50_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("avg_p50_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: avg_p95_response_time_ms
	if req.AvgP95ResponseTimeMs != nil {
		switch filter := req.AvgP95ResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("avg_p95_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("avg_p95_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("avg_p95_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("avg_p95_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("avg_p95_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("avg_p95_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("avg_p95_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("avg_p95_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("avg_p95_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: avg_p99_response_time_ms
	if req.AvgP99ResponseTimeMs != nil {
		switch filter := req.AvgP99ResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("avg_p99_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("avg_p99_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("avg_p99_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("avg_p99_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("avg_p99_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("avg_p99_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("avg_p99_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("avg_p99_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("avg_p99_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: max_response_time_ms
	if req.MaxResponseTimeMs != nil {
		switch filter := req.MaxResponseTimeMs.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("max_response_time_ms", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("max_response_time_ms", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("max_response_time_ms", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("max_response_time_ms", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("max_response_time_ms", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("max_response_time_ms", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("max_response_time_ms", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("max_response_time_ms", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("max_response_time_ms", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: max_blob_count
	if req.MaxBlobCount != nil {
		switch filter := req.MaxBlobCount.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("max_blob_count", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("max_blob_count", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("max_blob_count", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("max_blob_count", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("max_blob_count", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("max_blob_count", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("max_blob_count", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("max_blob_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("max_blob_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "hour_start_date_time", "column_index", "epoch_count", "avg_availability_pct", "min_availability_pct", "max_availability_pct", "total_probe_count", "total_success_count", "total_failure_count", "total_missing_count", "min_response_time_ms", "avg_p50_response_time_ms", "avg_p95_response_time_ms", "avg_p99_response_time_ms", "max_response_time_ms", "max_blob_count"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY hour_start_date_time" + ", column_index"
	}

	// Build column list
	columns := []string{"toUnixTimestamp(`updated_date_time`) AS `updated_date_time`", "toUnixTimestamp(`hour_start_date_time`) AS `hour_start_date_time`", "column_index", "epoch_count", "avg_availability_pct", "min_availability_pct", "max_availability_pct", "total_probe_count", "total_success_count", "total_failure_count", "total_missing_count", "min_response_time_ms", "avg_p50_response_time_ms", "avg_p95_response_time_ms", "avg_p99_response_time_ms", "max_response_time_ms", "toUInt32(`max_blob_count`) AS `max_blob_count`"}

	return BuildParameterizedQuery("fct_data_column_availability_hourly", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetFctDataColumnAvailabilityHourlyQuery constructs a parameterized SQL query from a GetFctDataColumnAvailabilityHourlyRequest
func BuildGetFctDataColumnAvailabilityHourlyQuery(req *GetFctDataColumnAvailabilityHourlyRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.HourStartDateTime == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field hour_start_date_time is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("hour_start_date_time", "=", req.HourStartDateTime)

	// Build ORDER BY clause
	orderByClause := " ORDER BY hour_start_date_time, column_index"

	// Build column list
	columns := []string{"toUnixTimestamp(`updated_date_time`) AS `updated_date_time`", "toUnixTimestamp(`hour_start_date_time`) AS `hour_start_date_time`", "column_index", "epoch_count", "avg_availability_pct", "min_availability_pct", "max_availability_pct", "total_probe_count", "total_success_count", "total_failure_count", "total_missing_count", "min_response_time_ms", "avg_p50_response_time_ms", "avg_p95_response_time_ms", "avg_p99_response_time_ms", "max_response_time_ms", "toUInt32(`max_blob_count`) AS `max_blob_count`"}

	// Return single record
	return BuildParameterizedQuery("fct_data_column_availability_hourly", columns, qb, orderByClause, 1, 0, options...)
}
