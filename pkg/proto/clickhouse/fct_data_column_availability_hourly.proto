syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "clickhouse/annotations.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Data column availability by hour and column index for PeerDAS heatmap day-level drill-down

message FctDataColumnAvailabilityHourly {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // Start of the hour period
  uint32 hour_start_date_time = 12;
  // Column index (0-127)
  uint64 column_index = 13;
  // Number of epochs in this hour aggregation
  uint32 epoch_count = 14;
  // Availability percentage calculated from total counts (total_success_count / total_probe_count * 100, rounded to 2 decimal places)
  double avg_availability_pct = 15;
  // Minimum availability percentage across epochs (rounded to 2 decimal places)
  double min_availability_pct = 16;
  // Maximum availability percentage across epochs (rounded to 2 decimal places)
  double max_availability_pct = 17;
  // Total probe count across all epochs
  uint64 total_probe_count = 18;
  // Total successful probes across all epochs
  uint64 total_success_count = 19;
  // Total failed probes across all epochs (result = failure)
  uint64 total_failure_count = 20;
  // Total missing probes across all epochs (result = missing)
  uint64 total_missing_count = 21;
  // Minimum response time in milliseconds for successful probes only (rounded to whole number)
  uint32 min_response_time_ms = 22;
  // Average of p50 response times across epochs for successful probes only (rounded to whole number)
  uint32 avg_p50_response_time_ms = 23;
  // Average of p95 response times across epochs for successful probes only (rounded to whole number)
  uint32 avg_p95_response_time_ms = 24;
  // Average of p99 response times across epochs for successful probes only (rounded to whole number)
  uint32 avg_p99_response_time_ms = 25;
  // Maximum response time in milliseconds for successful probes only (rounded to whole number)
  uint32 max_response_time_ms = 26;
  // Maximum blob count observed in this hour
  uint32 max_blob_count = 27;
}

// Request for listing fct_data_column_availability_hourly records
message ListFctDataColumnAvailabilityHourlyRequest {
  // Filter by hour_start_date_time - Start of the hour period (PRIMARY KEY - required)
  UInt32Filter hour_start_date_time = 1 [(google.api.field_behavior) = REQUIRED, (clickhouse.v1.required_group) = "primary_key"];

  // Filter by column_index - Column index (0-127) (ORDER BY column 2 - optional)
  UInt64Filter column_index = 2 [(google.api.field_behavior) = OPTIONAL];

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 3 [(google.api.field_behavior) = OPTIONAL];
  // Filter by epoch_count - Number of epochs in this hour aggregation (optional)
  UInt32Filter epoch_count = 4 [(google.api.field_behavior) = OPTIONAL];
  // Filter by avg_availability_pct - Availability percentage calculated from total counts (total_success_count / total_probe_count * 100, rounded to 2 decimal places) (optional)
  google.protobuf.DoubleValue avg_availability_pct = 5 [(google.api.field_behavior) = OPTIONAL];
  // Filter by min_availability_pct - Minimum availability percentage across epochs (rounded to 2 decimal places) (optional)
  google.protobuf.DoubleValue min_availability_pct = 6 [(google.api.field_behavior) = OPTIONAL];
  // Filter by max_availability_pct - Maximum availability percentage across epochs (rounded to 2 decimal places) (optional)
  google.protobuf.DoubleValue max_availability_pct = 7 [(google.api.field_behavior) = OPTIONAL];
  // Filter by total_probe_count - Total probe count across all epochs (optional)
  UInt64Filter total_probe_count = 8 [(google.api.field_behavior) = OPTIONAL];
  // Filter by total_success_count - Total successful probes across all epochs (optional)
  UInt64Filter total_success_count = 9 [(google.api.field_behavior) = OPTIONAL];
  // Filter by total_failure_count - Total failed probes across all epochs (result = failure) (optional)
  UInt64Filter total_failure_count = 10 [(google.api.field_behavior) = OPTIONAL];
  // Filter by total_missing_count - Total missing probes across all epochs (result = missing) (optional)
  UInt64Filter total_missing_count = 11 [(google.api.field_behavior) = OPTIONAL];
  // Filter by min_response_time_ms - Minimum response time in milliseconds for successful probes only (rounded to whole number) (optional)
  UInt32Filter min_response_time_ms = 12 [(google.api.field_behavior) = OPTIONAL];
  // Filter by avg_p50_response_time_ms - Average of p50 response times across epochs for successful probes only (rounded to whole number) (optional)
  UInt32Filter avg_p50_response_time_ms = 13 [(google.api.field_behavior) = OPTIONAL];
  // Filter by avg_p95_response_time_ms - Average of p95 response times across epochs for successful probes only (rounded to whole number) (optional)
  UInt32Filter avg_p95_response_time_ms = 14 [(google.api.field_behavior) = OPTIONAL];
  // Filter by avg_p99_response_time_ms - Average of p99 response times across epochs for successful probes only (rounded to whole number) (optional)
  UInt32Filter avg_p99_response_time_ms = 15 [(google.api.field_behavior) = OPTIONAL];
  // Filter by max_response_time_ms - Maximum response time in milliseconds for successful probes only (rounded to whole number) (optional)
  UInt32Filter max_response_time_ms = 16 [(google.api.field_behavior) = OPTIONAL];
  // Filter by max_blob_count - Maximum blob count observed in this hour (optional)
  UInt32Filter max_blob_count = 17 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of fct_data_column_availability_hourly to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 18 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListFctDataColumnAvailabilityHourly` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 19 [(google.api.field_behavior) = OPTIONAL];
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 20 [(google.api.field_behavior) = OPTIONAL];
}

// Response for listing fct_data_column_availability_hourly records
message ListFctDataColumnAvailabilityHourlyResponse {
  // The list of fct_data_column_availability_hourly.
  repeated FctDataColumnAvailabilityHourly fct_data_column_availability_hourly = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single fct_data_column_availability_hourly record by primary key
message GetFctDataColumnAvailabilityHourlyRequest {
  // Start of the hour period
  uint32 hour_start_date_time = 1; // Primary key (required)
}

// Response for getting a single fct_data_column_availability_hourly record
message GetFctDataColumnAvailabilityHourlyResponse {
  FctDataColumnAvailabilityHourly item = 1;
}

// Query fct_data_column_availability_hourly data
service FctDataColumnAvailabilityHourlyService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListFctDataColumnAvailabilityHourlyRequest) returns (ListFctDataColumnAvailabilityHourlyResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_data_column_availability_hourly"
    };
  }
  // Get record | Retrieve a single record by hour_start_date_time
  rpc Get(GetFctDataColumnAvailabilityHourlyRequest) returns (GetFctDataColumnAvailabilityHourlyResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_data_column_availability_hourly/{hour_start_date_time}"
    };
  }
}
