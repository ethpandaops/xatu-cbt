// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: fct_mev_bid_count_by_builder.proto

package clickhouse

import (
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FctMevBidCountByBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty" ch:"updated_date_time"`
	// Slot number within the block bid
	Slot uint32 `protobuf:"varint,12,opt,name=slot,proto3" json:"slot,omitempty" ch:"slot"`
	// The start time for the slot that the bid is for
	SlotStartDateTime uint32 `protobuf:"varint,13,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty" ch:"slot_start_date_time"`
	// Epoch number derived from the slot that the bid is for
	Epoch uint32 `protobuf:"varint,14,opt,name=epoch,proto3" json:"epoch,omitempty" ch:"epoch"`
	// The start time for the epoch that the bid is for
	EpochStartDateTime uint32 `protobuf:"varint,15,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty" ch:"epoch_start_date_time"`
	// The relay that the bid was fetched from
	BuilderPubkey string `protobuf:"bytes,16,opt,name=builder_pubkey,json=builderPubkey,proto3" json:"builder_pubkey,omitempty" ch:"builder_pubkey"`
	// The total number of bids from the builder
	BidTotal uint32 `protobuf:"varint,17,opt,name=bid_total,json=bidTotal,proto3" json:"bid_total,omitempty" ch:"bid_total"`
}

func (x *FctMevBidCountByBuilder) Reset() {
	*x = FctMevBidCountByBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FctMevBidCountByBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FctMevBidCountByBuilder) ProtoMessage() {}

func (x *FctMevBidCountByBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FctMevBidCountByBuilder.ProtoReflect.Descriptor instead.
func (*FctMevBidCountByBuilder) Descriptor() ([]byte, []int) {
	return file_fct_mev_bid_count_by_builder_proto_rawDescGZIP(), []int{0}
}

func (x *FctMevBidCountByBuilder) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *FctMevBidCountByBuilder) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *FctMevBidCountByBuilder) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *FctMevBidCountByBuilder) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *FctMevBidCountByBuilder) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *FctMevBidCountByBuilder) GetBuilderPubkey() string {
	if x != nil {
		return x.BuilderPubkey
	}
	return ""
}

func (x *FctMevBidCountByBuilder) GetBidTotal() uint32 {
	if x != nil {
		return x.BidTotal
	}
	return 0
}

// Request for listing fct_mev_bid_count_by_builder records
type ListFctMevBidCountByBuilderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time - The start time for the slot that the bid is for (PRIMARY KEY - required)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by builder_pubkey - The relay that the bid was fetched from (ORDER BY column 2 - optional)
	BuilderPubkey *StringFilter `protobuf:"bytes,2,opt,name=builder_pubkey,json=builderPubkey,proto3" json:"builder_pubkey,omitempty"`
	// Filter by updated_date_time - Timestamp when the record was last updated (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,3,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by slot - Slot number within the block bid (optional)
	Slot *UInt32Filter `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by epoch - Epoch number derived from the slot that the bid is for (optional)
	Epoch *UInt32Filter `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by epoch_start_date_time - The start time for the epoch that the bid is for (optional)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,6,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by bid_total - The total number of bids from the builder (optional)
	BidTotal *UInt32Filter `protobuf:"bytes,7,opt,name=bid_total,json=bidTotal,proto3" json:"bid_total,omitempty"`
	// The maximum number of fct_mev_bid_count_by_builder to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListFctMevBidCountByBuilder` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,10,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListFctMevBidCountByBuilderRequest) Reset() {
	*x = ListFctMevBidCountByBuilderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctMevBidCountByBuilderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctMevBidCountByBuilderRequest) ProtoMessage() {}

func (x *ListFctMevBidCountByBuilderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctMevBidCountByBuilderRequest.ProtoReflect.Descriptor instead.
func (*ListFctMevBidCountByBuilderRequest) Descriptor() ([]byte, []int) {
	return file_fct_mev_bid_count_by_builder_proto_rawDescGZIP(), []int{1}
}

func (x *ListFctMevBidCountByBuilderRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListFctMevBidCountByBuilderRequest) GetBuilderPubkey() *StringFilter {
	if x != nil {
		return x.BuilderPubkey
	}
	return nil
}

func (x *ListFctMevBidCountByBuilderRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListFctMevBidCountByBuilderRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListFctMevBidCountByBuilderRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListFctMevBidCountByBuilderRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListFctMevBidCountByBuilderRequest) GetBidTotal() *UInt32Filter {
	if x != nil {
		return x.BidTotal
	}
	return nil
}

func (x *ListFctMevBidCountByBuilderRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFctMevBidCountByBuilderRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFctMevBidCountByBuilderRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response for listing fct_mev_bid_count_by_builder records
type ListFctMevBidCountByBuilderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fct_mev_bid_count_by_builder.
	FctMevBidCountByBuilder []*FctMevBidCountByBuilder `protobuf:"bytes,1,rep,name=fct_mev_bid_count_by_builder,json=fctMevBidCountByBuilder,proto3" json:"fct_mev_bid_count_by_builder,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFctMevBidCountByBuilderResponse) Reset() {
	*x = ListFctMevBidCountByBuilderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctMevBidCountByBuilderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctMevBidCountByBuilderResponse) ProtoMessage() {}

func (x *ListFctMevBidCountByBuilderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctMevBidCountByBuilderResponse.ProtoReflect.Descriptor instead.
func (*ListFctMevBidCountByBuilderResponse) Descriptor() ([]byte, []int) {
	return file_fct_mev_bid_count_by_builder_proto_rawDescGZIP(), []int{2}
}

func (x *ListFctMevBidCountByBuilderResponse) GetFctMevBidCountByBuilder() []*FctMevBidCountByBuilder {
	if x != nil {
		return x.FctMevBidCountByBuilder
	}
	return nil
}

func (x *ListFctMevBidCountByBuilderResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request for getting a single fct_mev_bid_count_by_builder record by primary key
type GetFctMevBidCountByBuilderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time for the slot that the bid is for
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetFctMevBidCountByBuilderRequest) Reset() {
	*x = GetFctMevBidCountByBuilderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctMevBidCountByBuilderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctMevBidCountByBuilderRequest) ProtoMessage() {}

func (x *GetFctMevBidCountByBuilderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctMevBidCountByBuilderRequest.ProtoReflect.Descriptor instead.
func (*GetFctMevBidCountByBuilderRequest) Descriptor() ([]byte, []int) {
	return file_fct_mev_bid_count_by_builder_proto_rawDescGZIP(), []int{3}
}

func (x *GetFctMevBidCountByBuilderRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// Response for getting a single fct_mev_bid_count_by_builder record
type GetFctMevBidCountByBuilderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *FctMevBidCountByBuilder `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetFctMevBidCountByBuilderResponse) Reset() {
	*x = GetFctMevBidCountByBuilderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctMevBidCountByBuilderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctMevBidCountByBuilderResponse) ProtoMessage() {}

func (x *GetFctMevBidCountByBuilderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_mev_bid_count_by_builder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctMevBidCountByBuilderResponse.ProtoReflect.Descriptor instead.
func (*GetFctMevBidCountByBuilderResponse) Descriptor() ([]byte, []int) {
	return file_fct_mev_bid_count_by_builder_proto_rawDescGZIP(), []int{4}
}

func (x *GetFctMevBidCountByBuilderResponse) GetItem() *FctMevBidCountByBuilder {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_fct_mev_bid_count_by_builder_proto protoreflect.FileDescriptor

var file_fct_mev_bid_count_by_builder_proto_rawDesc = []byte{
	0x0a, 0x22, 0x66, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x76, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a, 0x13, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x03, 0x0a, 0x17,
	0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x63, 0x68, 0x3a, 0x22, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x52,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e,
	0x9a, 0x84, 0x9e, 0x03, 0x09, 0x63, 0x68, 0x3a, 0x22, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x63, 0x68, 0x3a, 0x22, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x63, 0x68, 0x3a, 0x22, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x22, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x52, 0x0a, 0x15,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x9a, 0x84, 0x9e,
	0x03, 0x1a, 0x63, 0x68, 0x3a, 0x22, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x12, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x63,
	0x68, 0x3a, 0x22, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x22, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x63, 0x68, 0x3a, 0x22, 0x62,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x52, 0x08, 0x62, 0x69, 0x64, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xb0, 0x04, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x4d,
	0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x14, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x42, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x49, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x62,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xaa, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x1c, 0x66, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x76, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x4d, 0x65,
	0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x17, 0x66, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76,
	0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x32, 0xc8, 0x02, 0x0a, 0x1e, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x76, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x9b,
	0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12,
	0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x76,
	0x5f, 0x62, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7d, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fct_mev_bid_count_by_builder_proto_rawDescOnce sync.Once
	file_fct_mev_bid_count_by_builder_proto_rawDescData = file_fct_mev_bid_count_by_builder_proto_rawDesc
)

func file_fct_mev_bid_count_by_builder_proto_rawDescGZIP() []byte {
	file_fct_mev_bid_count_by_builder_proto_rawDescOnce.Do(func() {
		file_fct_mev_bid_count_by_builder_proto_rawDescData = protoimpl.X.CompressGZIP(file_fct_mev_bid_count_by_builder_proto_rawDescData)
	})
	return file_fct_mev_bid_count_by_builder_proto_rawDescData
}

var file_fct_mev_bid_count_by_builder_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fct_mev_bid_count_by_builder_proto_goTypes = []any{
	(*FctMevBidCountByBuilder)(nil),             // 0: cbt.FctMevBidCountByBuilder
	(*ListFctMevBidCountByBuilderRequest)(nil),  // 1: cbt.ListFctMevBidCountByBuilderRequest
	(*ListFctMevBidCountByBuilderResponse)(nil), // 2: cbt.ListFctMevBidCountByBuilderResponse
	(*GetFctMevBidCountByBuilderRequest)(nil),   // 3: cbt.GetFctMevBidCountByBuilderRequest
	(*GetFctMevBidCountByBuilderResponse)(nil),  // 4: cbt.GetFctMevBidCountByBuilderResponse
	(*UInt32Filter)(nil),                        // 5: cbt.UInt32Filter
	(*StringFilter)(nil),                        // 6: cbt.StringFilter
}
var file_fct_mev_bid_count_by_builder_proto_depIdxs = []int32{
	5,  // 0: cbt.ListFctMevBidCountByBuilderRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	6,  // 1: cbt.ListFctMevBidCountByBuilderRequest.builder_pubkey:type_name -> cbt.StringFilter
	5,  // 2: cbt.ListFctMevBidCountByBuilderRequest.updated_date_time:type_name -> cbt.UInt32Filter
	5,  // 3: cbt.ListFctMevBidCountByBuilderRequest.slot:type_name -> cbt.UInt32Filter
	5,  // 4: cbt.ListFctMevBidCountByBuilderRequest.epoch:type_name -> cbt.UInt32Filter
	5,  // 5: cbt.ListFctMevBidCountByBuilderRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	5,  // 6: cbt.ListFctMevBidCountByBuilderRequest.bid_total:type_name -> cbt.UInt32Filter
	0,  // 7: cbt.ListFctMevBidCountByBuilderResponse.fct_mev_bid_count_by_builder:type_name -> cbt.FctMevBidCountByBuilder
	0,  // 8: cbt.GetFctMevBidCountByBuilderResponse.item:type_name -> cbt.FctMevBidCountByBuilder
	1,  // 9: cbt.FctMevBidCountByBuilderService.List:input_type -> cbt.ListFctMevBidCountByBuilderRequest
	3,  // 10: cbt.FctMevBidCountByBuilderService.Get:input_type -> cbt.GetFctMevBidCountByBuilderRequest
	2,  // 11: cbt.FctMevBidCountByBuilderService.List:output_type -> cbt.ListFctMevBidCountByBuilderResponse
	4,  // 12: cbt.FctMevBidCountByBuilderService.Get:output_type -> cbt.GetFctMevBidCountByBuilderResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_fct_mev_bid_count_by_builder_proto_init() }
func file_fct_mev_bid_count_by_builder_proto_init() {
	if File_fct_mev_bid_count_by_builder_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fct_mev_bid_count_by_builder_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FctMevBidCountByBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_mev_bid_count_by_builder_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctMevBidCountByBuilderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_mev_bid_count_by_builder_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctMevBidCountByBuilderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_mev_bid_count_by_builder_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctMevBidCountByBuilderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_mev_bid_count_by_builder_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctMevBidCountByBuilderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fct_mev_bid_count_by_builder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fct_mev_bid_count_by_builder_proto_goTypes,
		DependencyIndexes: file_fct_mev_bid_count_by_builder_proto_depIdxs,
		MessageInfos:      file_fct_mev_bid_count_by_builder_proto_msgTypes,
	}.Build()
	File_fct_mev_bid_count_by_builder_proto = out.File
	file_fct_mev_bid_count_by_builder_proto_rawDesc = nil
	file_fct_mev_bid_count_by_builder_proto_goTypes = nil
	file_fct_mev_bid_count_by_builder_proto_depIdxs = nil
}
