syntax = "proto3";

package cbt;

import "common.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Highest value MEV relay bid for a slot by relay

message FctMevBidHighestValueByRelay {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // Slot number within the block bid
  uint32 slot = 12;
  // The start time for the slot that the bid is for
  uint32 slot_start_date_time = 13;
  // Epoch number derived from the slot that the bid is for
  uint32 epoch = 14;
  // The start time for the epoch that the bid is for
  uint32 epoch_start_date_time = 15;
  // The timestamp of the bid in milliseconds
  uint64 bid_date_time = 16;
  // The relay that the bid was fetched from
  string relay_name = 17;
  // The parent block hash of the execution block
  string parent_hash = 18;
  // The execution block number of the bid
  uint64 block_number = 19;
  // The execution block hash of the bid
  string block_hash = 20;
  // The builder pubkey of the bid
  string builder_pubkey = 21;
  // The proposer pubkey of the bid
  string proposer_pubkey = 22;
  // The proposer fee recipient of the bid
  string proposer_fee_recipient = 23;
  // The gas limit of the bid
  uint64 gas_limit = 24;
  // The gas used of the bid
  uint64 gas_used = 25;
  // The transaction value in wei
  string value = 26;
  // The number of transactions in the bid
  uint32 transaction_count = 27;
  // Whether the bid was optimistic
  bool optimistic_submission = 28;
}

// ListFctMevBidHighestValueByRelayRequest is the request message for listing fct_mev_bid_highest_value_by_relay records
message ListFctMevBidHighestValueByRelayRequest {
  // Filter by slot_start_date_time (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by relay_name (ORDER BY column 2 - optional)
  StringFilter relay_name = 2;

  // Filter by updated_date_time (optional)
  UInt32Filter updated_date_time = 3;
  // Filter by slot (optional)
  UInt32Filter slot = 4;
  // Filter by epoch (optional)
  UInt32Filter epoch = 5;
  // Filter by epoch_start_date_time (optional)
  UInt32Filter epoch_start_date_time = 6;
  // Filter by bid_date_time (optional)
  UInt64Filter bid_date_time = 7;
  // Filter by parent_hash (optional)
  StringFilter parent_hash = 8;
  // Filter by block_number (optional)
  UInt64Filter block_number = 9;
  // Filter by block_hash (optional)
  StringFilter block_hash = 10;
  // Filter by builder_pubkey (optional)
  StringFilter builder_pubkey = 11;
  // Filter by proposer_pubkey (optional)
  StringFilter proposer_pubkey = 12;
  // Filter by proposer_fee_recipient (optional)
  StringFilter proposer_fee_recipient = 13;
  // Filter by gas_limit (optional)
  UInt64Filter gas_limit = 14;
  // Filter by gas_used (optional)
  UInt64Filter gas_used = 15;
  // Filter by value (optional)
  StringFilter value = 16;
  // Filter by transaction_count (optional)
  UInt32Filter transaction_count = 17;
  // Filter by optimistic_submission (optional)
  BoolFilter optimistic_submission = 18;

  // The maximum number of fct_mev_bid_highest_value_by_relay to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 19;
  // A page token, received from a previous `ListFctMevBidHighestValueByRelay` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 20;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 21;
}

// ListFctMevBidHighestValueByRelayResponse is the response message for listing fct_mev_bid_highest_value_by_relay records
message ListFctMevBidHighestValueByRelayResponse {
  // The list of fct_mev_bid_highest_value_by_relay.
  repeated FctMevBidHighestValueByRelay fct_mev_bid_highest_value_by_relay = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// GetFctMevBidHighestValueByRelayRequest is the request message for getting a single fct_mev_bid_highest_value_by_relay record by primary key
message GetFctMevBidHighestValueByRelayRequest {
  // The start time for the slot that the bid is for
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// GetFctMevBidHighestValueByRelayResponse is the response message for getting a single fct_mev_bid_highest_value_by_relay record
message GetFctMevBidHighestValueByRelayResponse {
  FctMevBidHighestValueByRelay item = 1;
}

// FctMevBidHighestValueByRelayService provides RPC methods for querying fct_mev_bid_highest_value_by_relay data
service FctMevBidHighestValueByRelayService {
  // List returns paginated fct_mev_bid_highest_value_by_relay records
  rpc List(ListFctMevBidHighestValueByRelayRequest) returns (ListFctMevBidHighestValueByRelayResponse);
  // Get returns a single fct_mev_bid_highest_value_by_relay record by primary key
  rpc Get(GetFctMevBidHighestValueByRelayRequest) returns (GetFctMevBidHighestValueByRelayResponse);
}
