// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for fct_mev_bid_value_by_builder

package clickhouse

import (
	"fmt"
)

// BuildListFctMevBidValueByBuilderQuery constructs a parameterized SQL query from a ListFctMevBidValueByBuilderRequest
//
// Available projections:
//   - p_by_slot (primary key: slot)
//
// Use WithProjection() option to select a specific projection.
func BuildListFctMevBidValueByBuilderQuery(req *ListFctMevBidValueByBuilderRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.Slot == nil && req.SlotStartDateTime == nil {
		return SQLQuery{}, fmt.Errorf("at least one primary key field is required: slot, slot_start_date_time")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.SlotStartDateTime.Filter.(type) {
	case *UInt32Filter_Eq:
		qb.AddCondition("slot_start_date_time", "=", filter.Eq)
	case *UInt32Filter_Ne:
		qb.AddCondition("slot_start_date_time", "!=", filter.Ne)
	case *UInt32Filter_Lt:
		qb.AddCondition("slot_start_date_time", "<", filter.Lt)
	case *UInt32Filter_Lte:
		qb.AddCondition("slot_start_date_time", "<=", filter.Lte)
	case *UInt32Filter_Gt:
		qb.AddCondition("slot_start_date_time", ">", filter.Gt)
	case *UInt32Filter_Gte:
		qb.AddCondition("slot_start_date_time", ">=", filter.Gte)
	case *UInt32Filter_Between:
		qb.AddBetweenCondition("slot_start_date_time", filter.Between.Min, filter.Between.Max)
	case *UInt32Filter_In:
		if len(filter.In.Values) > 0 {
			qb.AddInCondition("slot_start_date_time", UInt32SliceToInterface(filter.In.Values))
		}
	case *UInt32Filter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			qb.AddNotInCondition("slot_start_date_time", UInt32SliceToInterface(filter.NotIn.Values))
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("updated_date_time", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("updated_date_time", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: slot
	if req.Slot != nil {
		switch filter := req.Slot.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("slot", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("slot", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("slot", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("slot", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("slot", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("slot", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("slot", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("slot", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("slot", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: epoch
	if req.Epoch != nil {
		switch filter := req.Epoch.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("epoch", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("epoch", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("epoch", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("epoch", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("epoch", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("epoch", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("epoch", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("epoch", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("epoch", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: epoch_start_date_time
	if req.EpochStartDateTime != nil {
		switch filter := req.EpochStartDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("epoch_start_date_time", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("epoch_start_date_time", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("epoch_start_date_time", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("epoch_start_date_time", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("epoch_start_date_time", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("epoch_start_date_time", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("epoch_start_date_time", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("epoch_start_date_time", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("epoch_start_date_time", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: earliest_bid_date_time
	if req.EarliestBidDateTime != nil {
		switch filter := req.EarliestBidDateTime.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("earliest_bid_date_time", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("earliest_bid_date_time", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("earliest_bid_date_time", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("earliest_bid_date_time", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("earliest_bid_date_time", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("earliest_bid_date_time", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("earliest_bid_date_time", filter.Between.Min, filter.Between.Max)
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("earliest_bid_date_time", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("earliest_bid_date_time", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: relay_names

	// Add filter for column: block_hash
	if req.BlockHash != nil {
		switch filter := req.BlockHash.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("block_hash", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("block_hash", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("block_hash", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("block_hash", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("block_hash", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("block_hash", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("block_hash", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("block_hash", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("block_hash", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: value
	if req.Value != nil {
		switch filter := req.Value.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("value", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("value", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("value", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("value", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("value", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("value", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("value", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("value", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("value", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
		if limit > 1000 {
			limit = 1000 // Maximum allowed
		}
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "slot", "slot_start_date_time", "epoch", "epoch_start_date_time", "earliest_bid_date_time", "relay_names", "block_hash", "value"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY slot_start_date_time" + ", block_hash"
	}

	return BuildParameterizedQuery("fct_mev_bid_value_by_builder", qb, orderByClause, limit, offset, options...), nil
}

// BuildGetFctMevBidValueByBuilderQuery constructs a parameterized SQL query from a GetFctMevBidValueByBuilderRequest
func BuildGetFctMevBidValueByBuilderQuery(req *GetFctMevBidValueByBuilderRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.SlotStartDateTime == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field slot_start_date_time is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("slot_start_date_time", "=", req.SlotStartDateTime)

	// Build ORDER BY clause
	orderByClause := " ORDER BY slot_start_date_time, block_hash"

	// Return single record
	return BuildParameterizedQuery("fct_mev_bid_value_by_builder", qb, orderByClause, 1, 0, options...), nil
}
