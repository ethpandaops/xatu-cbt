syntax = "proto3";

package cbt;

import "tagger/tagger.proto";
import "common.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Active nodes for the network

message FctNodeActiveLast24h {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11 [(tagger.tags) = "ch:\"updated_date_time\""];
  // Timestamp when the node was last seen
  uint32 last_seen_date_time = 12 [(tagger.tags) = "ch:\"last_seen_date_time\""];
  // Username of the node
  string username = 13 [(tagger.tags) = "ch:\"username\""];
  // ID of the node
  string node_id = 14 [(tagger.tags) = "ch:\"node_id\""];
  // Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified"
  string classification = 15 [(tagger.tags) = "ch:\"classification\""];
  // Name of the client
  string meta_client_name = 16 [(tagger.tags) = "ch:\"meta_client_name\""];
  // Version of the client
  string meta_client_version = 17 [(tagger.tags) = "ch:\"meta_client_version\""];
  // Implementation of the client
  string meta_client_implementation = 18 [(tagger.tags) = "ch:\"meta_client_implementation\""];
  // City of the client
  string meta_client_geo_city = 19 [(tagger.tags) = "ch:\"meta_client_geo_city\""];
  // Country of the client
  string meta_client_geo_country = 20 [(tagger.tags) = "ch:\"meta_client_geo_country\""];
  // Country code of the client
  string meta_client_geo_country_code = 21 [(tagger.tags) = "ch:\"meta_client_geo_country_code\""];
  // Continent code of the client
  string meta_client_geo_continent_code = 22 [(tagger.tags) = "ch:\"meta_client_geo_continent_code\""];
  // Longitude of the client
  google.protobuf.DoubleValue meta_client_geo_longitude = 23 [(tagger.tags) = "ch:\"meta_client_geo_longitude\""];
  // Latitude of the client
  google.protobuf.DoubleValue meta_client_geo_latitude = 24 [(tagger.tags) = "ch:\"meta_client_geo_latitude\""];
  // Autonomous system number of the client
  google.protobuf.UInt32Value meta_client_geo_autonomous_system_number = 25 [(tagger.tags) = "ch:\"meta_client_geo_autonomous_system_number\""];
  // Autonomous system organization of the client
  google.protobuf.StringValue meta_client_geo_autonomous_system_organization = 26 [(tagger.tags) = "ch:\"meta_client_geo_autonomous_system_organization\""];
  // Ethereum consensus client version
  string meta_consensus_version = 27 [(tagger.tags) = "ch:\"meta_consensus_version\""];
  // Ethereum consensus client implementation
  string meta_consensus_implementation = 28 [(tagger.tags) = "ch:\"meta_consensus_implementation\""];
}

// Request for listing fct_node_active_last_24h records
message ListFctNodeActiveLast24hRequest {
  // Filter by meta_client_name - Name of the client (PRIMARY KEY - required)
  StringFilter meta_client_name = 1 [(google.api.field_behavior) = REQUIRED];

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 2 [(google.api.field_behavior) = OPTIONAL];
  // Filter by last_seen_date_time - Timestamp when the node was last seen (optional)
  UInt32Filter last_seen_date_time = 3 [(google.api.field_behavior) = OPTIONAL];
  // Filter by username - Username of the node (optional)
  StringFilter username = 4 [(google.api.field_behavior) = OPTIONAL];
  // Filter by node_id - ID of the node (optional)
  StringFilter node_id = 5 [(google.api.field_behavior) = OPTIONAL];
  // Filter by classification - Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified" (optional)
  StringFilter classification = 6 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_version - Version of the client (optional)
  StringFilter meta_client_version = 7 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_implementation - Implementation of the client (optional)
  StringFilter meta_client_implementation = 8 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_city - City of the client (optional)
  StringFilter meta_client_geo_city = 9 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_country - Country of the client (optional)
  StringFilter meta_client_geo_country = 10 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_country_code - Country code of the client (optional)
  StringFilter meta_client_geo_country_code = 11 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_continent_code - Continent code of the client (optional)
  StringFilter meta_client_geo_continent_code = 12 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_longitude - Longitude of the client (optional)
  google.protobuf.DoubleValue meta_client_geo_longitude = 13 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_latitude - Latitude of the client (optional)
  google.protobuf.DoubleValue meta_client_geo_latitude = 14 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_autonomous_system_number - Autonomous system number of the client (optional)
  NullableUInt32Filter meta_client_geo_autonomous_system_number = 15 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_autonomous_system_organization - Autonomous system organization of the client (optional)
  NullableStringFilter meta_client_geo_autonomous_system_organization = 16 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_consensus_version - Ethereum consensus client version (optional)
  StringFilter meta_consensus_version = 17 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_consensus_implementation - Ethereum consensus client implementation (optional)
  StringFilter meta_consensus_implementation = 18 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of fct_node_active_last_24h to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 19 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListFctNodeActiveLast24h` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 20 [(google.api.field_behavior) = OPTIONAL];
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 21 [(google.api.field_behavior) = OPTIONAL];
}

// Response for listing fct_node_active_last_24h records
message ListFctNodeActiveLast24hResponse {
  // The list of fct_node_active_last_24h.
  repeated FctNodeActiveLast24h fct_node_active_last_24h = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single fct_node_active_last_24h record by primary key
message GetFctNodeActiveLast24hRequest {
  // Name of the client
  string meta_client_name = 1; // Primary key (required)
}

// Response for getting a single fct_node_active_last_24h record
message GetFctNodeActiveLast24hResponse {
  FctNodeActiveLast24h item = 1;
}

// Query fct_node_active_last_24h data
service FctNodeActiveLast24hService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListFctNodeActiveLast24hRequest) returns (ListFctNodeActiveLast24hResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_node_active_last_24h"
    };
  }
  // Get record | Retrieve a single record by meta_client_name
  rpc Get(GetFctNodeActiveLast24hRequest) returns (GetFctNodeActiveLast24hResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_node_active_last_24h/{meta_client_name}"
    };
  }
}
