// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for fct_prepared_block

package clickhouse

import (
	"fmt"
)

// BuildListFctPreparedBlockQuery constructs a parameterized SQL query from a ListFctPreparedBlockRequest
//
// Available projections:
//   - p_by_client (primary key: meta_client_name)
//   - p_by_slot (primary key: slot)
//
// Use WithProjection() option to select a specific projection.
func BuildListFctPreparedBlockQuery(req *ListFctPreparedBlockRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.MetaClientName == nil && req.Slot == nil && req.SlotStartDateTime == nil {
		return SQLQuery{}, fmt.Errorf("at least one primary key field is required: meta_client_name, slot, slot_start_date_time")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.SlotStartDateTime.Filter.(type) {
	case *UInt32Filter_Eq:
		qb.AddCondition("slot_start_date_time", "=", filter.Eq)
	case *UInt32Filter_Ne:
		qb.AddCondition("slot_start_date_time", "!=", filter.Ne)
	case *UInt32Filter_Lt:
		qb.AddCondition("slot_start_date_time", "<", filter.Lt)
	case *UInt32Filter_Lte:
		qb.AddCondition("slot_start_date_time", "<=", filter.Lte)
	case *UInt32Filter_Gt:
		qb.AddCondition("slot_start_date_time", ">", filter.Gt)
	case *UInt32Filter_Gte:
		qb.AddCondition("slot_start_date_time", ">=", filter.Gte)
	case *UInt32Filter_Between:
		qb.AddBetweenCondition("slot_start_date_time", filter.Between.Min, filter.Between.Max)
	case *UInt32Filter_In:
		if len(filter.In.Values) > 0 {
			qb.AddInCondition("slot_start_date_time", UInt32SliceToInterface(filter.In.Values))
		}
	case *UInt32Filter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			qb.AddNotInCondition("slot_start_date_time", UInt32SliceToInterface(filter.NotIn.Values))
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("updated_date_time", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("updated_date_time", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: slot
	if req.Slot != nil {
		switch filter := req.Slot.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("slot", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("slot", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("slot", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("slot", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("slot", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("slot", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("slot", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("slot", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("slot", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: event_date_time
	if req.EventDateTime != nil {
		switch filter := req.EventDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("event_date_time", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("event_date_time", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("event_date_time", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("event_date_time", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("event_date_time", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("event_date_time", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("event_date_time", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("event_date_time", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("event_date_time", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_name
	if req.MetaClientName != nil {
		switch filter := req.MetaClientName.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_name", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_name", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_name", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_name", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_name", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_name", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_name", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_name", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_name", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_version
	if req.MetaClientVersion != nil {
		switch filter := req.MetaClientVersion.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_version", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_version", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_version", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_version", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_version", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_version", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_version", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_version", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_version", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_implementation
	if req.MetaClientImplementation != nil {
		switch filter := req.MetaClientImplementation.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_implementation", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_implementation", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_implementation", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_implementation", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_implementation", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_implementation", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_implementation", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_implementation", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_implementation", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_consensus_implementation
	if req.MetaConsensusImplementation != nil {
		switch filter := req.MetaConsensusImplementation.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_consensus_implementation", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_consensus_implementation", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_consensus_implementation", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_consensus_implementation", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_consensus_implementation", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_consensus_implementation", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_consensus_implementation", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_consensus_implementation", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_consensus_implementation", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_consensus_version
	if req.MetaConsensusVersion != nil {
		switch filter := req.MetaConsensusVersion.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_consensus_version", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_consensus_version", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_consensus_version", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_consensus_version", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_consensus_version", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_consensus_version", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_consensus_version", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_consensus_version", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_consensus_version", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_city
	if req.MetaClientGeoCity != nil {
		switch filter := req.MetaClientGeoCity.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_city", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_city", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_city", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_city", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_city", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_city", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_city", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_city", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_city", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_country
	if req.MetaClientGeoCountry != nil {
		switch filter := req.MetaClientGeoCountry.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_country", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_country", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_country", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_country", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_country", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_country", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_country", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_country", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_country", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_country_code
	if req.MetaClientGeoCountryCode != nil {
		switch filter := req.MetaClientGeoCountryCode.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_country_code", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_country_code", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_country_code", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_country_code", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_country_code", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_country_code", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_country_code", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_country_code", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_country_code", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: block_version
	if req.BlockVersion != nil {
		switch filter := req.BlockVersion.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("block_version", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("block_version", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("block_version", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("block_version", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("block_version", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("block_version", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("block_version", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("block_version", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("block_version", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: block_total_bytes
	if req.BlockTotalBytes != nil {
		switch filter := req.BlockTotalBytes.Filter.(type) {
		case *NullableUInt32Filter_Eq:
			qb.AddCondition("block_total_bytes", "=", filter.Eq)
		case *NullableUInt32Filter_Ne:
			qb.AddCondition("block_total_bytes", "!=", filter.Ne)
		case *NullableUInt32Filter_Lt:
			qb.AddCondition("block_total_bytes", "<", filter.Lt)
		case *NullableUInt32Filter_Lte:
			qb.AddCondition("block_total_bytes", "<=", filter.Lte)
		case *NullableUInt32Filter_Gt:
			qb.AddCondition("block_total_bytes", ">", filter.Gt)
		case *NullableUInt32Filter_Gte:
			qb.AddCondition("block_total_bytes", ">=", filter.Gte)
		case *NullableUInt32Filter_Between:
			qb.AddBetweenCondition("block_total_bytes", filter.Between.Min, filter.Between.Max)
		case *NullableUInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("block_total_bytes", UInt32SliceToInterface(filter.In.Values))
			}
		case *NullableUInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("block_total_bytes", UInt32SliceToInterface(filter.NotIn.Values))
			}
		case *NullableUInt32Filter_IsNull:
			qb.AddIsNullCondition("block_total_bytes")
		case *NullableUInt32Filter_IsNotNull:
			qb.AddIsNotNullCondition("block_total_bytes")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: block_total_bytes_compressed
	if req.BlockTotalBytesCompressed != nil {
		switch filter := req.BlockTotalBytesCompressed.Filter.(type) {
		case *NullableUInt32Filter_Eq:
			qb.AddCondition("block_total_bytes_compressed", "=", filter.Eq)
		case *NullableUInt32Filter_Ne:
			qb.AddCondition("block_total_bytes_compressed", "!=", filter.Ne)
		case *NullableUInt32Filter_Lt:
			qb.AddCondition("block_total_bytes_compressed", "<", filter.Lt)
		case *NullableUInt32Filter_Lte:
			qb.AddCondition("block_total_bytes_compressed", "<=", filter.Lte)
		case *NullableUInt32Filter_Gt:
			qb.AddCondition("block_total_bytes_compressed", ">", filter.Gt)
		case *NullableUInt32Filter_Gte:
			qb.AddCondition("block_total_bytes_compressed", ">=", filter.Gte)
		case *NullableUInt32Filter_Between:
			qb.AddBetweenCondition("block_total_bytes_compressed", filter.Between.Min, filter.Between.Max)
		case *NullableUInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("block_total_bytes_compressed", UInt32SliceToInterface(filter.In.Values))
			}
		case *NullableUInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("block_total_bytes_compressed", UInt32SliceToInterface(filter.NotIn.Values))
			}
		case *NullableUInt32Filter_IsNull:
			qb.AddIsNullCondition("block_total_bytes_compressed")
		case *NullableUInt32Filter_IsNotNull:
			qb.AddIsNotNullCondition("block_total_bytes_compressed")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: execution_payload_value
	if req.ExecutionPayloadValue != nil {
		switch filter := req.ExecutionPayloadValue.Filter.(type) {
		case *NullableUInt64Filter_Eq:
			qb.AddCondition("execution_payload_value", "=", filter.Eq)
		case *NullableUInt64Filter_Ne:
			qb.AddCondition("execution_payload_value", "!=", filter.Ne)
		case *NullableUInt64Filter_Lt:
			qb.AddCondition("execution_payload_value", "<", filter.Lt)
		case *NullableUInt64Filter_Lte:
			qb.AddCondition("execution_payload_value", "<=", filter.Lte)
		case *NullableUInt64Filter_Gt:
			qb.AddCondition("execution_payload_value", ">", filter.Gt)
		case *NullableUInt64Filter_Gte:
			qb.AddCondition("execution_payload_value", ">=", filter.Gte)
		case *NullableUInt64Filter_Between:
			qb.AddBetweenCondition("execution_payload_value", filter.Between.Min, filter.Between.Max)
		case *NullableUInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("execution_payload_value", UInt64SliceToInterface(filter.In.Values))
			}
		case *NullableUInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("execution_payload_value", UInt64SliceToInterface(filter.NotIn.Values))
			}
		case *NullableUInt64Filter_IsNull:
			qb.AddIsNullCondition("execution_payload_value")
		case *NullableUInt64Filter_IsNotNull:
			qb.AddIsNotNullCondition("execution_payload_value")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: consensus_payload_value
	if req.ConsensusPayloadValue != nil {
		switch filter := req.ConsensusPayloadValue.Filter.(type) {
		case *NullableUInt64Filter_Eq:
			qb.AddCondition("consensus_payload_value", "=", filter.Eq)
		case *NullableUInt64Filter_Ne:
			qb.AddCondition("consensus_payload_value", "!=", filter.Ne)
		case *NullableUInt64Filter_Lt:
			qb.AddCondition("consensus_payload_value", "<", filter.Lt)
		case *NullableUInt64Filter_Lte:
			qb.AddCondition("consensus_payload_value", "<=", filter.Lte)
		case *NullableUInt64Filter_Gt:
			qb.AddCondition("consensus_payload_value", ">", filter.Gt)
		case *NullableUInt64Filter_Gte:
			qb.AddCondition("consensus_payload_value", ">=", filter.Gte)
		case *NullableUInt64Filter_Between:
			qb.AddBetweenCondition("consensus_payload_value", filter.Between.Min, filter.Between.Max)
		case *NullableUInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("consensus_payload_value", UInt64SliceToInterface(filter.In.Values))
			}
		case *NullableUInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("consensus_payload_value", UInt64SliceToInterface(filter.NotIn.Values))
			}
		case *NullableUInt64Filter_IsNull:
			qb.AddIsNullCondition("consensus_payload_value")
		case *NullableUInt64Filter_IsNotNull:
			qb.AddIsNotNullCondition("consensus_payload_value")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: execution_payload_block_number
	if req.ExecutionPayloadBlockNumber != nil {
		switch filter := req.ExecutionPayloadBlockNumber.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("execution_payload_block_number", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("execution_payload_block_number", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("execution_payload_block_number", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("execution_payload_block_number", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("execution_payload_block_number", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("execution_payload_block_number", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("execution_payload_block_number", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("execution_payload_block_number", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("execution_payload_block_number", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: execution_payload_gas_limit
	if req.ExecutionPayloadGasLimit != nil {
		switch filter := req.ExecutionPayloadGasLimit.Filter.(type) {
		case *NullableUInt64Filter_Eq:
			qb.AddCondition("execution_payload_gas_limit", "=", filter.Eq)
		case *NullableUInt64Filter_Ne:
			qb.AddCondition("execution_payload_gas_limit", "!=", filter.Ne)
		case *NullableUInt64Filter_Lt:
			qb.AddCondition("execution_payload_gas_limit", "<", filter.Lt)
		case *NullableUInt64Filter_Lte:
			qb.AddCondition("execution_payload_gas_limit", "<=", filter.Lte)
		case *NullableUInt64Filter_Gt:
			qb.AddCondition("execution_payload_gas_limit", ">", filter.Gt)
		case *NullableUInt64Filter_Gte:
			qb.AddCondition("execution_payload_gas_limit", ">=", filter.Gte)
		case *NullableUInt64Filter_Between:
			qb.AddBetweenCondition("execution_payload_gas_limit", filter.Between.Min, filter.Between.Max)
		case *NullableUInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("execution_payload_gas_limit", UInt64SliceToInterface(filter.In.Values))
			}
		case *NullableUInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("execution_payload_gas_limit", UInt64SliceToInterface(filter.NotIn.Values))
			}
		case *NullableUInt64Filter_IsNull:
			qb.AddIsNullCondition("execution_payload_gas_limit")
		case *NullableUInt64Filter_IsNotNull:
			qb.AddIsNotNullCondition("execution_payload_gas_limit")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: execution_payload_gas_used
	if req.ExecutionPayloadGasUsed != nil {
		switch filter := req.ExecutionPayloadGasUsed.Filter.(type) {
		case *NullableUInt64Filter_Eq:
			qb.AddCondition("execution_payload_gas_used", "=", filter.Eq)
		case *NullableUInt64Filter_Ne:
			qb.AddCondition("execution_payload_gas_used", "!=", filter.Ne)
		case *NullableUInt64Filter_Lt:
			qb.AddCondition("execution_payload_gas_used", "<", filter.Lt)
		case *NullableUInt64Filter_Lte:
			qb.AddCondition("execution_payload_gas_used", "<=", filter.Lte)
		case *NullableUInt64Filter_Gt:
			qb.AddCondition("execution_payload_gas_used", ">", filter.Gt)
		case *NullableUInt64Filter_Gte:
			qb.AddCondition("execution_payload_gas_used", ">=", filter.Gte)
		case *NullableUInt64Filter_Between:
			qb.AddBetweenCondition("execution_payload_gas_used", filter.Between.Min, filter.Between.Max)
		case *NullableUInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("execution_payload_gas_used", UInt64SliceToInterface(filter.In.Values))
			}
		case *NullableUInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("execution_payload_gas_used", UInt64SliceToInterface(filter.NotIn.Values))
			}
		case *NullableUInt64Filter_IsNull:
			qb.AddIsNullCondition("execution_payload_gas_used")
		case *NullableUInt64Filter_IsNotNull:
			qb.AddIsNotNullCondition("execution_payload_gas_used")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: execution_payload_transactions_count
	if req.ExecutionPayloadTransactionsCount != nil {
		switch filter := req.ExecutionPayloadTransactionsCount.Filter.(type) {
		case *NullableUInt32Filter_Eq:
			qb.AddCondition("execution_payload_transactions_count", "=", filter.Eq)
		case *NullableUInt32Filter_Ne:
			qb.AddCondition("execution_payload_transactions_count", "!=", filter.Ne)
		case *NullableUInt32Filter_Lt:
			qb.AddCondition("execution_payload_transactions_count", "<", filter.Lt)
		case *NullableUInt32Filter_Lte:
			qb.AddCondition("execution_payload_transactions_count", "<=", filter.Lte)
		case *NullableUInt32Filter_Gt:
			qb.AddCondition("execution_payload_transactions_count", ">", filter.Gt)
		case *NullableUInt32Filter_Gte:
			qb.AddCondition("execution_payload_transactions_count", ">=", filter.Gte)
		case *NullableUInt32Filter_Between:
			qb.AddBetweenCondition("execution_payload_transactions_count", filter.Between.Min, filter.Between.Max)
		case *NullableUInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("execution_payload_transactions_count", UInt32SliceToInterface(filter.In.Values))
			}
		case *NullableUInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("execution_payload_transactions_count", UInt32SliceToInterface(filter.NotIn.Values))
			}
		case *NullableUInt32Filter_IsNull:
			qb.AddIsNullCondition("execution_payload_transactions_count")
		case *NullableUInt32Filter_IsNotNull:
			qb.AddIsNotNullCondition("execution_payload_transactions_count")
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: execution_payload_transactions_total_bytes
	if req.ExecutionPayloadTransactionsTotalBytes != nil {
		switch filter := req.ExecutionPayloadTransactionsTotalBytes.Filter.(type) {
		case *NullableUInt32Filter_Eq:
			qb.AddCondition("execution_payload_transactions_total_bytes", "=", filter.Eq)
		case *NullableUInt32Filter_Ne:
			qb.AddCondition("execution_payload_transactions_total_bytes", "!=", filter.Ne)
		case *NullableUInt32Filter_Lt:
			qb.AddCondition("execution_payload_transactions_total_bytes", "<", filter.Lt)
		case *NullableUInt32Filter_Lte:
			qb.AddCondition("execution_payload_transactions_total_bytes", "<=", filter.Lte)
		case *NullableUInt32Filter_Gt:
			qb.AddCondition("execution_payload_transactions_total_bytes", ">", filter.Gt)
		case *NullableUInt32Filter_Gte:
			qb.AddCondition("execution_payload_transactions_total_bytes", ">=", filter.Gte)
		case *NullableUInt32Filter_Between:
			qb.AddBetweenCondition("execution_payload_transactions_total_bytes", filter.Between.Min, filter.Between.Max)
		case *NullableUInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("execution_payload_transactions_total_bytes", UInt32SliceToInterface(filter.In.Values))
			}
		case *NullableUInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("execution_payload_transactions_total_bytes", UInt32SliceToInterface(filter.NotIn.Values))
			}
		case *NullableUInt32Filter_IsNull:
			qb.AddIsNullCondition("execution_payload_transactions_total_bytes")
		case *NullableUInt32Filter_IsNotNull:
			qb.AddIsNotNullCondition("execution_payload_transactions_total_bytes")
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "slot", "slot_start_date_time", "event_date_time", "meta_client_name", "meta_client_version", "meta_client_implementation", "meta_consensus_implementation", "meta_consensus_version", "meta_client_geo_city", "meta_client_geo_country", "meta_client_geo_country_code", "block_version", "block_total_bytes", "block_total_bytes_compressed", "execution_payload_value", "consensus_payload_value", "execution_payload_block_number", "execution_payload_gas_limit", "execution_payload_gas_used", "execution_payload_transactions_count", "execution_payload_transactions_total_bytes"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY slot_start_date_time" + ", slot" + ", meta_client_name" + ", event_date_time"
	}

	// Build column list
	columns := []string{"updated_date_time", "slot", "slot_start_date_time", "event_date_time", "meta_client_name", "meta_client_version", "meta_client_implementation", "meta_consensus_implementation", "meta_consensus_version", "meta_client_geo_city", "meta_client_geo_country", "meta_client_geo_country_code", "block_version", "block_total_bytes", "block_total_bytes_compressed", "execution_payload_value", "consensus_payload_value", "execution_payload_block_number", "execution_payload_gas_limit", "execution_payload_gas_used", "execution_payload_transactions_count", "execution_payload_transactions_total_bytes"}

	return BuildParameterizedQuery("fct_prepared_block", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetFctPreparedBlockQuery constructs a parameterized SQL query from a GetFctPreparedBlockRequest
func BuildGetFctPreparedBlockQuery(req *GetFctPreparedBlockRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.SlotStartDateTime == 0 {
		return SQLQuery{}, fmt.Errorf("primary key field slot_start_date_time is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("slot_start_date_time", "=", req.SlotStartDateTime)

	// Build ORDER BY clause
	orderByClause := " ORDER BY slot_start_date_time, slot, meta_client_name, event_date_time"

	// Build column list
	columns := []string{"updated_date_time", "slot", "slot_start_date_time", "event_date_time", "meta_client_name", "meta_client_version", "meta_client_implementation", "meta_consensus_implementation", "meta_consensus_version", "meta_client_geo_city", "meta_client_geo_country", "meta_client_geo_country_code", "block_version", "block_total_bytes", "block_total_bytes_compressed", "execution_payload_value", "consensus_payload_value", "execution_payload_block_number", "execution_payload_gas_limit", "execution_payload_gas_used", "execution_payload_transactions_count", "execution_payload_transactions_total_bytes"}

	// Return single record
	return BuildParameterizedQuery("fct_prepared_block", columns, qb, orderByClause, 1, 0, options...)
}
