// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: fct_prepared_block.proto

package clickhouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FctPreparedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// The slot number from beacon block
	Slot uint32 `protobuf:"varint,12,opt,name=slot,proto3" json:"slot,omitempty"`
	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,13,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// The wall clock time when the event was received
	EventDateTime uint32 `protobuf:"varint,14,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	// Name of the client that generated the event
	MetaClientName string `protobuf:"bytes,15,opt,name=meta_client_name,json=metaClientName,proto3" json:"meta_client_name,omitempty"`
	// Version of the client that generated the event
	MetaClientVersion string `protobuf:"bytes,16,opt,name=meta_client_version,json=metaClientVersion,proto3" json:"meta_client_version,omitempty"`
	// Implementation of the client that generated the event
	MetaClientImplementation string `protobuf:"bytes,17,opt,name=meta_client_implementation,json=metaClientImplementation,proto3" json:"meta_client_implementation,omitempty"`
	// Consensus implementation of the validator
	MetaConsensusImplementation string `protobuf:"bytes,18,opt,name=meta_consensus_implementation,json=metaConsensusImplementation,proto3" json:"meta_consensus_implementation,omitempty"`
	// Consensus version of the validator
	MetaConsensusVersion string `protobuf:"bytes,19,opt,name=meta_consensus_version,json=metaConsensusVersion,proto3" json:"meta_consensus_version,omitempty"`
	// City of the client that generated the event
	MetaClientGeoCity string `protobuf:"bytes,20,opt,name=meta_client_geo_city,json=metaClientGeoCity,proto3" json:"meta_client_geo_city,omitempty"`
	// Country of the client that generated the event
	MetaClientGeoCountry string `protobuf:"bytes,21,opt,name=meta_client_geo_country,json=metaClientGeoCountry,proto3" json:"meta_client_geo_country,omitempty"`
	// Country code of the client that generated the event
	MetaClientGeoCountryCode string `protobuf:"bytes,22,opt,name=meta_client_geo_country_code,json=metaClientGeoCountryCode,proto3" json:"meta_client_geo_country_code,omitempty"`
	// The version of the beacon block
	BlockVersion string `protobuf:"bytes,23,opt,name=block_version,json=blockVersion,proto3" json:"block_version,omitempty"`
	// The total bytes of the beacon block payload
	BlockTotalBytes *wrapperspb.UInt32Value `protobuf:"bytes,24,opt,name=block_total_bytes,json=blockTotalBytes,proto3" json:"block_total_bytes,omitempty"`
	// The total bytes of the beacon block payload when compressed using snappy
	BlockTotalBytesCompressed *wrapperspb.UInt32Value `protobuf:"bytes,25,opt,name=block_total_bytes_compressed,json=blockTotalBytesCompressed,proto3" json:"block_total_bytes_compressed,omitempty"`
	// The value of the execution payload in wei
	ExecutionPayloadValue *wrapperspb.UInt64Value `protobuf:"bytes,26,opt,name=execution_payload_value,json=executionPayloadValue,proto3" json:"execution_payload_value,omitempty"`
	// The value of the consensus payload in wei
	ConsensusPayloadValue *wrapperspb.UInt64Value `protobuf:"bytes,27,opt,name=consensus_payload_value,json=consensusPayloadValue,proto3" json:"consensus_payload_value,omitempty"`
	// The block number of the execution payload
	ExecutionPayloadBlockNumber uint32 `protobuf:"varint,28,opt,name=execution_payload_block_number,json=executionPayloadBlockNumber,proto3" json:"execution_payload_block_number,omitempty"`
	// Gas limit for execution payload
	ExecutionPayloadGasLimit *wrapperspb.UInt64Value `protobuf:"bytes,29,opt,name=execution_payload_gas_limit,json=executionPayloadGasLimit,proto3" json:"execution_payload_gas_limit,omitempty"`
	// Gas used for execution payload
	ExecutionPayloadGasUsed *wrapperspb.UInt64Value `protobuf:"bytes,30,opt,name=execution_payload_gas_used,json=executionPayloadGasUsed,proto3" json:"execution_payload_gas_used,omitempty"`
	// The transaction count of the execution payload
	ExecutionPayloadTransactionsCount *wrapperspb.UInt32Value `protobuf:"bytes,31,opt,name=execution_payload_transactions_count,json=executionPayloadTransactionsCount,proto3" json:"execution_payload_transactions_count,omitempty"`
	// The transaction total bytes of the execution payload
	ExecutionPayloadTransactionsTotalBytes *wrapperspb.UInt32Value `protobuf:"bytes,32,opt,name=execution_payload_transactions_total_bytes,json=executionPayloadTransactionsTotalBytes,proto3" json:"execution_payload_transactions_total_bytes,omitempty"`
}

func (x *FctPreparedBlock) Reset() {
	*x = FctPreparedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_prepared_block_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FctPreparedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FctPreparedBlock) ProtoMessage() {}

func (x *FctPreparedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_fct_prepared_block_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FctPreparedBlock.ProtoReflect.Descriptor instead.
func (*FctPreparedBlock) Descriptor() ([]byte, []int) {
	return file_fct_prepared_block_proto_rawDescGZIP(), []int{0}
}

func (x *FctPreparedBlock) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *FctPreparedBlock) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *FctPreparedBlock) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *FctPreparedBlock) GetEventDateTime() uint32 {
	if x != nil {
		return x.EventDateTime
	}
	return 0
}

func (x *FctPreparedBlock) GetMetaClientName() string {
	if x != nil {
		return x.MetaClientName
	}
	return ""
}

func (x *FctPreparedBlock) GetMetaClientVersion() string {
	if x != nil {
		return x.MetaClientVersion
	}
	return ""
}

func (x *FctPreparedBlock) GetMetaClientImplementation() string {
	if x != nil {
		return x.MetaClientImplementation
	}
	return ""
}

func (x *FctPreparedBlock) GetMetaConsensusImplementation() string {
	if x != nil {
		return x.MetaConsensusImplementation
	}
	return ""
}

func (x *FctPreparedBlock) GetMetaConsensusVersion() string {
	if x != nil {
		return x.MetaConsensusVersion
	}
	return ""
}

func (x *FctPreparedBlock) GetMetaClientGeoCity() string {
	if x != nil {
		return x.MetaClientGeoCity
	}
	return ""
}

func (x *FctPreparedBlock) GetMetaClientGeoCountry() string {
	if x != nil {
		return x.MetaClientGeoCountry
	}
	return ""
}

func (x *FctPreparedBlock) GetMetaClientGeoCountryCode() string {
	if x != nil {
		return x.MetaClientGeoCountryCode
	}
	return ""
}

func (x *FctPreparedBlock) GetBlockVersion() string {
	if x != nil {
		return x.BlockVersion
	}
	return ""
}

func (x *FctPreparedBlock) GetBlockTotalBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.BlockTotalBytes
	}
	return nil
}

func (x *FctPreparedBlock) GetBlockTotalBytesCompressed() *wrapperspb.UInt32Value {
	if x != nil {
		return x.BlockTotalBytesCompressed
	}
	return nil
}

func (x *FctPreparedBlock) GetExecutionPayloadValue() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExecutionPayloadValue
	}
	return nil
}

func (x *FctPreparedBlock) GetConsensusPayloadValue() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ConsensusPayloadValue
	}
	return nil
}

func (x *FctPreparedBlock) GetExecutionPayloadBlockNumber() uint32 {
	if x != nil {
		return x.ExecutionPayloadBlockNumber
	}
	return 0
}

func (x *FctPreparedBlock) GetExecutionPayloadGasLimit() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExecutionPayloadGasLimit
	}
	return nil
}

func (x *FctPreparedBlock) GetExecutionPayloadGasUsed() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExecutionPayloadGasUsed
	}
	return nil
}

func (x *FctPreparedBlock) GetExecutionPayloadTransactionsCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExecutionPayloadTransactionsCount
	}
	return nil
}

func (x *FctPreparedBlock) GetExecutionPayloadTransactionsTotalBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExecutionPayloadTransactionsTotalBytes
	}
	return nil
}

// ListFctPreparedBlockRequest is the request message for listing fct_prepared_block records
type ListFctPreparedBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time (PRIMARY KEY - required)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by slot (ORDER BY column 2 - optional)
	Slot *UInt32Filter `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by meta_client_name (ORDER BY column 3 - optional)
	MetaClientName *StringFilter `protobuf:"bytes,3,opt,name=meta_client_name,json=metaClientName,proto3" json:"meta_client_name,omitempty"`
	// Filter by event_date_time (ORDER BY column 4 - optional)
	EventDateTime *UInt32Filter `protobuf:"bytes,4,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	// Filter by updated_date_time (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,5,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by meta_client_version (optional)
	MetaClientVersion *StringFilter `protobuf:"bytes,6,opt,name=meta_client_version,json=metaClientVersion,proto3" json:"meta_client_version,omitempty"`
	// Filter by meta_client_implementation (optional)
	MetaClientImplementation *StringFilter `protobuf:"bytes,7,opt,name=meta_client_implementation,json=metaClientImplementation,proto3" json:"meta_client_implementation,omitempty"`
	// Filter by meta_consensus_implementation (optional)
	MetaConsensusImplementation *StringFilter `protobuf:"bytes,8,opt,name=meta_consensus_implementation,json=metaConsensusImplementation,proto3" json:"meta_consensus_implementation,omitempty"`
	// Filter by meta_consensus_version (optional)
	MetaConsensusVersion *StringFilter `protobuf:"bytes,9,opt,name=meta_consensus_version,json=metaConsensusVersion,proto3" json:"meta_consensus_version,omitempty"`
	// Filter by meta_client_geo_city (optional)
	MetaClientGeoCity *StringFilter `protobuf:"bytes,10,opt,name=meta_client_geo_city,json=metaClientGeoCity,proto3" json:"meta_client_geo_city,omitempty"`
	// Filter by meta_client_geo_country (optional)
	MetaClientGeoCountry *StringFilter `protobuf:"bytes,11,opt,name=meta_client_geo_country,json=metaClientGeoCountry,proto3" json:"meta_client_geo_country,omitempty"`
	// Filter by meta_client_geo_country_code (optional)
	MetaClientGeoCountryCode *StringFilter `protobuf:"bytes,12,opt,name=meta_client_geo_country_code,json=metaClientGeoCountryCode,proto3" json:"meta_client_geo_country_code,omitempty"`
	// Filter by block_version (optional)
	BlockVersion *StringFilter `protobuf:"bytes,13,opt,name=block_version,json=blockVersion,proto3" json:"block_version,omitempty"`
	// Filter by block_total_bytes (optional)
	BlockTotalBytes *NullableUInt32Filter `protobuf:"bytes,14,opt,name=block_total_bytes,json=blockTotalBytes,proto3" json:"block_total_bytes,omitempty"`
	// Filter by block_total_bytes_compressed (optional)
	BlockTotalBytesCompressed *NullableUInt32Filter `protobuf:"bytes,15,opt,name=block_total_bytes_compressed,json=blockTotalBytesCompressed,proto3" json:"block_total_bytes_compressed,omitempty"`
	// Filter by execution_payload_value (optional)
	ExecutionPayloadValue *NullableUInt64Filter `protobuf:"bytes,16,opt,name=execution_payload_value,json=executionPayloadValue,proto3" json:"execution_payload_value,omitempty"`
	// Filter by consensus_payload_value (optional)
	ConsensusPayloadValue *NullableUInt64Filter `protobuf:"bytes,17,opt,name=consensus_payload_value,json=consensusPayloadValue,proto3" json:"consensus_payload_value,omitempty"`
	// Filter by execution_payload_block_number (optional)
	ExecutionPayloadBlockNumber *UInt32Filter `protobuf:"bytes,18,opt,name=execution_payload_block_number,json=executionPayloadBlockNumber,proto3" json:"execution_payload_block_number,omitempty"`
	// Filter by execution_payload_gas_limit (optional)
	ExecutionPayloadGasLimit *NullableUInt64Filter `protobuf:"bytes,19,opt,name=execution_payload_gas_limit,json=executionPayloadGasLimit,proto3" json:"execution_payload_gas_limit,omitempty"`
	// Filter by execution_payload_gas_used (optional)
	ExecutionPayloadGasUsed *NullableUInt64Filter `protobuf:"bytes,20,opt,name=execution_payload_gas_used,json=executionPayloadGasUsed,proto3" json:"execution_payload_gas_used,omitempty"`
	// Filter by execution_payload_transactions_count (optional)
	ExecutionPayloadTransactionsCount *NullableUInt32Filter `protobuf:"bytes,21,opt,name=execution_payload_transactions_count,json=executionPayloadTransactionsCount,proto3" json:"execution_payload_transactions_count,omitempty"`
	// Filter by execution_payload_transactions_total_bytes (optional)
	ExecutionPayloadTransactionsTotalBytes *NullableUInt32Filter `protobuf:"bytes,22,opt,name=execution_payload_transactions_total_bytes,json=executionPayloadTransactionsTotalBytes,proto3" json:"execution_payload_transactions_total_bytes,omitempty"`
	// The maximum number of fct_prepared_block to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,23,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListFctPreparedBlock` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,24,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,25,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListFctPreparedBlockRequest) Reset() {
	*x = ListFctPreparedBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_prepared_block_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctPreparedBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctPreparedBlockRequest) ProtoMessage() {}

func (x *ListFctPreparedBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_prepared_block_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctPreparedBlockRequest.ProtoReflect.Descriptor instead.
func (*ListFctPreparedBlockRequest) Descriptor() ([]byte, []int) {
	return file_fct_prepared_block_proto_rawDescGZIP(), []int{1}
}

func (x *ListFctPreparedBlockRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetMetaClientName() *StringFilter {
	if x != nil {
		return x.MetaClientName
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetEventDateTime() *UInt32Filter {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetMetaClientVersion() *StringFilter {
	if x != nil {
		return x.MetaClientVersion
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetMetaClientImplementation() *StringFilter {
	if x != nil {
		return x.MetaClientImplementation
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetMetaConsensusImplementation() *StringFilter {
	if x != nil {
		return x.MetaConsensusImplementation
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetMetaConsensusVersion() *StringFilter {
	if x != nil {
		return x.MetaConsensusVersion
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetMetaClientGeoCity() *StringFilter {
	if x != nil {
		return x.MetaClientGeoCity
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetMetaClientGeoCountry() *StringFilter {
	if x != nil {
		return x.MetaClientGeoCountry
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetMetaClientGeoCountryCode() *StringFilter {
	if x != nil {
		return x.MetaClientGeoCountryCode
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetBlockVersion() *StringFilter {
	if x != nil {
		return x.BlockVersion
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetBlockTotalBytes() *NullableUInt32Filter {
	if x != nil {
		return x.BlockTotalBytes
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetBlockTotalBytesCompressed() *NullableUInt32Filter {
	if x != nil {
		return x.BlockTotalBytesCompressed
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetExecutionPayloadValue() *NullableUInt64Filter {
	if x != nil {
		return x.ExecutionPayloadValue
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetConsensusPayloadValue() *NullableUInt64Filter {
	if x != nil {
		return x.ConsensusPayloadValue
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetExecutionPayloadBlockNumber() *UInt32Filter {
	if x != nil {
		return x.ExecutionPayloadBlockNumber
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetExecutionPayloadGasLimit() *NullableUInt64Filter {
	if x != nil {
		return x.ExecutionPayloadGasLimit
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetExecutionPayloadGasUsed() *NullableUInt64Filter {
	if x != nil {
		return x.ExecutionPayloadGasUsed
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetExecutionPayloadTransactionsCount() *NullableUInt32Filter {
	if x != nil {
		return x.ExecutionPayloadTransactionsCount
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetExecutionPayloadTransactionsTotalBytes() *NullableUInt32Filter {
	if x != nil {
		return x.ExecutionPayloadTransactionsTotalBytes
	}
	return nil
}

func (x *ListFctPreparedBlockRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFctPreparedBlockRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFctPreparedBlockRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListFctPreparedBlockResponse is the response message for listing fct_prepared_block records
type ListFctPreparedBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fct_prepared_block.
	FctPreparedBlock []*FctPreparedBlock `protobuf:"bytes,1,rep,name=fct_prepared_block,json=fctPreparedBlock,proto3" json:"fct_prepared_block,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFctPreparedBlockResponse) Reset() {
	*x = ListFctPreparedBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_prepared_block_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFctPreparedBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFctPreparedBlockResponse) ProtoMessage() {}

func (x *ListFctPreparedBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_prepared_block_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFctPreparedBlockResponse.ProtoReflect.Descriptor instead.
func (*ListFctPreparedBlockResponse) Descriptor() ([]byte, []int) {
	return file_fct_prepared_block_proto_rawDescGZIP(), []int{2}
}

func (x *ListFctPreparedBlockResponse) GetFctPreparedBlock() []*FctPreparedBlock {
	if x != nil {
		return x.FctPreparedBlock
	}
	return nil
}

func (x *ListFctPreparedBlockResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetFctPreparedBlockRequest is the request message for getting a single fct_prepared_block record by primary key
type GetFctPreparedBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetFctPreparedBlockRequest) Reset() {
	*x = GetFctPreparedBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_prepared_block_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctPreparedBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctPreparedBlockRequest) ProtoMessage() {}

func (x *GetFctPreparedBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fct_prepared_block_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctPreparedBlockRequest.ProtoReflect.Descriptor instead.
func (*GetFctPreparedBlockRequest) Descriptor() ([]byte, []int) {
	return file_fct_prepared_block_proto_rawDescGZIP(), []int{3}
}

func (x *GetFctPreparedBlockRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// GetFctPreparedBlockResponse is the response message for getting a single fct_prepared_block record
type GetFctPreparedBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *FctPreparedBlock `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetFctPreparedBlockResponse) Reset() {
	*x = GetFctPreparedBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fct_prepared_block_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFctPreparedBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFctPreparedBlockResponse) ProtoMessage() {}

func (x *GetFctPreparedBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fct_prepared_block_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFctPreparedBlockResponse.ProtoReflect.Descriptor instead.
func (*GetFctPreparedBlockResponse) Descriptor() ([]byte, []int) {
	return file_fct_prepared_block_proto_rawDescGZIP(), []int{4}
}

func (x *GetFctPreparedBlockResponse) GetItem() *FctPreparedBlock {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_fct_prepared_block_proto protoreflect.FileDescriptor

var file_fct_prepared_block_proto_rawDesc = []byte{
	0x0a, 0x18, 0x66, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x0b,
	0x0a, 0x10, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6d, 0x65, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x74,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x12, 0x35,
	0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x74,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x43, 0x0a, 0x1e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x59, 0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x24,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x78, 0x0a, 0x2a, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x26, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x99, 0x0e, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63,
	0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x3b, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6d,
	0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x1a, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x1d, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x1b, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x14, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6d, 0x65,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x48, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x1c, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65,
	0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x1c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x19, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a,
	0x1e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x56, 0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x17,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x21, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x2a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x26, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x66, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x10, 0x66, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x4d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x48,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32, 0xb0, 0x01, 0x0a, 0x17, 0x46, 0x63, 0x74,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fct_prepared_block_proto_rawDescOnce sync.Once
	file_fct_prepared_block_proto_rawDescData = file_fct_prepared_block_proto_rawDesc
)

func file_fct_prepared_block_proto_rawDescGZIP() []byte {
	file_fct_prepared_block_proto_rawDescOnce.Do(func() {
		file_fct_prepared_block_proto_rawDescData = protoimpl.X.CompressGZIP(file_fct_prepared_block_proto_rawDescData)
	})
	return file_fct_prepared_block_proto_rawDescData
}

var file_fct_prepared_block_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fct_prepared_block_proto_goTypes = []any{
	(*FctPreparedBlock)(nil),             // 0: cbt.FctPreparedBlock
	(*ListFctPreparedBlockRequest)(nil),  // 1: cbt.ListFctPreparedBlockRequest
	(*ListFctPreparedBlockResponse)(nil), // 2: cbt.ListFctPreparedBlockResponse
	(*GetFctPreparedBlockRequest)(nil),   // 3: cbt.GetFctPreparedBlockRequest
	(*GetFctPreparedBlockResponse)(nil),  // 4: cbt.GetFctPreparedBlockResponse
	(*wrapperspb.UInt32Value)(nil),       // 5: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),       // 6: google.protobuf.UInt64Value
	(*UInt32Filter)(nil),                 // 7: cbt.UInt32Filter
	(*StringFilter)(nil),                 // 8: cbt.StringFilter
	(*NullableUInt32Filter)(nil),         // 9: cbt.NullableUInt32Filter
	(*NullableUInt64Filter)(nil),         // 10: cbt.NullableUInt64Filter
}
var file_fct_prepared_block_proto_depIdxs = []int32{
	5,  // 0: cbt.FctPreparedBlock.block_total_bytes:type_name -> google.protobuf.UInt32Value
	5,  // 1: cbt.FctPreparedBlock.block_total_bytes_compressed:type_name -> google.protobuf.UInt32Value
	6,  // 2: cbt.FctPreparedBlock.execution_payload_value:type_name -> google.protobuf.UInt64Value
	6,  // 3: cbt.FctPreparedBlock.consensus_payload_value:type_name -> google.protobuf.UInt64Value
	6,  // 4: cbt.FctPreparedBlock.execution_payload_gas_limit:type_name -> google.protobuf.UInt64Value
	6,  // 5: cbt.FctPreparedBlock.execution_payload_gas_used:type_name -> google.protobuf.UInt64Value
	5,  // 6: cbt.FctPreparedBlock.execution_payload_transactions_count:type_name -> google.protobuf.UInt32Value
	5,  // 7: cbt.FctPreparedBlock.execution_payload_transactions_total_bytes:type_name -> google.protobuf.UInt32Value
	7,  // 8: cbt.ListFctPreparedBlockRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	7,  // 9: cbt.ListFctPreparedBlockRequest.slot:type_name -> cbt.UInt32Filter
	8,  // 10: cbt.ListFctPreparedBlockRequest.meta_client_name:type_name -> cbt.StringFilter
	7,  // 11: cbt.ListFctPreparedBlockRequest.event_date_time:type_name -> cbt.UInt32Filter
	7,  // 12: cbt.ListFctPreparedBlockRequest.updated_date_time:type_name -> cbt.UInt32Filter
	8,  // 13: cbt.ListFctPreparedBlockRequest.meta_client_version:type_name -> cbt.StringFilter
	8,  // 14: cbt.ListFctPreparedBlockRequest.meta_client_implementation:type_name -> cbt.StringFilter
	8,  // 15: cbt.ListFctPreparedBlockRequest.meta_consensus_implementation:type_name -> cbt.StringFilter
	8,  // 16: cbt.ListFctPreparedBlockRequest.meta_consensus_version:type_name -> cbt.StringFilter
	8,  // 17: cbt.ListFctPreparedBlockRequest.meta_client_geo_city:type_name -> cbt.StringFilter
	8,  // 18: cbt.ListFctPreparedBlockRequest.meta_client_geo_country:type_name -> cbt.StringFilter
	8,  // 19: cbt.ListFctPreparedBlockRequest.meta_client_geo_country_code:type_name -> cbt.StringFilter
	8,  // 20: cbt.ListFctPreparedBlockRequest.block_version:type_name -> cbt.StringFilter
	9,  // 21: cbt.ListFctPreparedBlockRequest.block_total_bytes:type_name -> cbt.NullableUInt32Filter
	9,  // 22: cbt.ListFctPreparedBlockRequest.block_total_bytes_compressed:type_name -> cbt.NullableUInt32Filter
	10, // 23: cbt.ListFctPreparedBlockRequest.execution_payload_value:type_name -> cbt.NullableUInt64Filter
	10, // 24: cbt.ListFctPreparedBlockRequest.consensus_payload_value:type_name -> cbt.NullableUInt64Filter
	7,  // 25: cbt.ListFctPreparedBlockRequest.execution_payload_block_number:type_name -> cbt.UInt32Filter
	10, // 26: cbt.ListFctPreparedBlockRequest.execution_payload_gas_limit:type_name -> cbt.NullableUInt64Filter
	10, // 27: cbt.ListFctPreparedBlockRequest.execution_payload_gas_used:type_name -> cbt.NullableUInt64Filter
	9,  // 28: cbt.ListFctPreparedBlockRequest.execution_payload_transactions_count:type_name -> cbt.NullableUInt32Filter
	9,  // 29: cbt.ListFctPreparedBlockRequest.execution_payload_transactions_total_bytes:type_name -> cbt.NullableUInt32Filter
	0,  // 30: cbt.ListFctPreparedBlockResponse.fct_prepared_block:type_name -> cbt.FctPreparedBlock
	0,  // 31: cbt.GetFctPreparedBlockResponse.item:type_name -> cbt.FctPreparedBlock
	1,  // 32: cbt.FctPreparedBlockService.List:input_type -> cbt.ListFctPreparedBlockRequest
	3,  // 33: cbt.FctPreparedBlockService.Get:input_type -> cbt.GetFctPreparedBlockRequest
	2,  // 34: cbt.FctPreparedBlockService.List:output_type -> cbt.ListFctPreparedBlockResponse
	4,  // 35: cbt.FctPreparedBlockService.Get:output_type -> cbt.GetFctPreparedBlockResponse
	34, // [34:36] is the sub-list for method output_type
	32, // [32:34] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_fct_prepared_block_proto_init() }
func file_fct_prepared_block_proto_init() {
	if File_fct_prepared_block_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fct_prepared_block_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FctPreparedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_prepared_block_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctPreparedBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_prepared_block_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListFctPreparedBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_prepared_block_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctPreparedBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fct_prepared_block_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetFctPreparedBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fct_prepared_block_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fct_prepared_block_proto_goTypes,
		DependencyIndexes: file_fct_prepared_block_proto_depIdxs,
		MessageInfos:      file_fct_prepared_block_proto_msgTypes,
	}.Build()
	File_fct_prepared_block_proto = out.File
	file_fct_prepared_block_proto_rawDesc = nil
	file_fct_prepared_block_proto_goTypes = nil
	file_fct_prepared_block_proto_depIdxs = nil
}
