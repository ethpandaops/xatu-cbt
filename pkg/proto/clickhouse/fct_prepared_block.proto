syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "clickhouse/annotations.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Prepared block proposals showing what would have been built if the validator had been selected as proposer

message FctPreparedBlock {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number from beacon block
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The wall clock time when the event was received
  uint32 event_date_time = 14;
  // Name of the client that generated the event
  string meta_client_name = 15;
  // Version of the client that generated the event
  string meta_client_version = 16;
  // Implementation of the client that generated the event
  string meta_client_implementation = 17;
  // Consensus implementation of the validator
  string meta_consensus_implementation = 18;
  // Consensus version of the validator
  string meta_consensus_version = 19;
  // City of the client that generated the event
  string meta_client_geo_city = 20;
  // Country of the client that generated the event
  string meta_client_geo_country = 21;
  // Country code of the client that generated the event
  string meta_client_geo_country_code = 22;
  // The version of the beacon block
  string block_version = 23;
  // The total bytes of the beacon block payload
  google.protobuf.UInt32Value block_total_bytes = 24;
  // The total bytes of the beacon block payload when compressed using snappy
  google.protobuf.UInt32Value block_total_bytes_compressed = 25;
  // The value of the execution payload in wei
  google.protobuf.UInt64Value execution_payload_value = 26;
  // The value of the consensus payload in wei
  google.protobuf.UInt64Value consensus_payload_value = 27;
  // The block number of the execution payload
  uint32 execution_payload_block_number = 28;
  // Gas limit for execution payload
  google.protobuf.UInt64Value execution_payload_gas_limit = 29;
  // Gas used for execution payload
  google.protobuf.UInt64Value execution_payload_gas_used = 30;
  // The transaction count of the execution payload
  google.protobuf.UInt32Value execution_payload_transactions_count = 31;
  // The transaction total bytes of the execution payload
  google.protobuf.UInt32Value execution_payload_transactions_total_bytes = 32;
}

// Request for listing fct_prepared_block records
message ListFctPreparedBlockRequest {
  // Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required unless using alternatives: meta_client_name, slot)
  UInt32Filter slot_start_date_time = 1 [(google.api.field_behavior) = OPTIONAL, (clickhouse.v1.required_group) = "primary_key"];

  // Filter by slot - The slot number from beacon block (ORDER BY column 2 - optional)
  UInt32Filter slot = 2 [(google.api.field_behavior) = OPTIONAL];

  // Filter by meta_client_name - Name of the client that generated the event (ORDER BY column 3 - optional)
  StringFilter meta_client_name = 3 [(google.api.field_behavior) = OPTIONAL];

  // Filter by event_date_time - The wall clock time when the event was received (ORDER BY column 4 - optional)
  UInt32Filter event_date_time = 4 [(google.api.field_behavior) = OPTIONAL];

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 5 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_version - Version of the client that generated the event (optional)
  StringFilter meta_client_version = 6 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_implementation - Implementation of the client that generated the event (optional)
  StringFilter meta_client_implementation = 7 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_consensus_implementation - Consensus implementation of the validator (optional)
  StringFilter meta_consensus_implementation = 8 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_consensus_version - Consensus version of the validator (optional)
  StringFilter meta_consensus_version = 9 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_city - City of the client that generated the event (optional)
  StringFilter meta_client_geo_city = 10 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_country - Country of the client that generated the event (optional)
  StringFilter meta_client_geo_country = 11 [(google.api.field_behavior) = OPTIONAL];
  // Filter by meta_client_geo_country_code - Country code of the client that generated the event (optional)
  StringFilter meta_client_geo_country_code = 12 [(google.api.field_behavior) = OPTIONAL];
  // Filter by block_version - The version of the beacon block (optional)
  StringFilter block_version = 13 [(google.api.field_behavior) = OPTIONAL];
  // Filter by block_total_bytes - The total bytes of the beacon block payload (optional)
  NullableUInt32Filter block_total_bytes = 14 [(google.api.field_behavior) = OPTIONAL];
  // Filter by block_total_bytes_compressed - The total bytes of the beacon block payload when compressed using snappy (optional)
  NullableUInt32Filter block_total_bytes_compressed = 15 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_value - The value of the execution payload in wei (optional)
  NullableUInt64Filter execution_payload_value = 16 [(google.api.field_behavior) = OPTIONAL];
  // Filter by consensus_payload_value - The value of the consensus payload in wei (optional)
  NullableUInt64Filter consensus_payload_value = 17 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_block_number - The block number of the execution payload (optional)
  UInt32Filter execution_payload_block_number = 18 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_gas_limit - Gas limit for execution payload (optional)
  NullableUInt64Filter execution_payload_gas_limit = 19 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_gas_used - Gas used for execution payload (optional)
  NullableUInt64Filter execution_payload_gas_used = 20 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_transactions_count - The transaction count of the execution payload (optional)
  NullableUInt32Filter execution_payload_transactions_count = 21 [(google.api.field_behavior) = OPTIONAL];
  // Filter by execution_payload_transactions_total_bytes - The transaction total bytes of the execution payload (optional)
  NullableUInt32Filter execution_payload_transactions_total_bytes = 22 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of fct_prepared_block to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 23 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListFctPreparedBlock` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 24 [(google.api.field_behavior) = OPTIONAL];
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 25 [(google.api.field_behavior) = OPTIONAL];
}

// Response for listing fct_prepared_block records
message ListFctPreparedBlockResponse {
  // The list of fct_prepared_block.
  repeated FctPreparedBlock fct_prepared_block = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single fct_prepared_block record by primary key
message GetFctPreparedBlockRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// Response for getting a single fct_prepared_block record
message GetFctPreparedBlockResponse {
  FctPreparedBlock item = 1;
}

// Query fct_prepared_block data
service FctPreparedBlockService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListFctPreparedBlockRequest) returns (ListFctPreparedBlockResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_prepared_block"
    };
  }
  // Get record | Retrieve a single record by slot_start_date_time
  rpc Get(GetFctPreparedBlockRequest) returns (GetFctPreparedBlockResponse) {
    option (google.api.http) = {
      get: "/api/v1/fct_prepared_block/{slot_start_date_time}"
    };
  }
}
