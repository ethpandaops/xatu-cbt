syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Validator block proposals showing what would have been built if the validator had been selected as proposer

message FctValidatorBlock {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number from beacon block
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The wall clock time when the event was received
  uint32 event_date_time = 14;
  // Name of the client that generated the event
  string meta_client_name = 15;
  // Version of the client that generated the event
  string meta_client_version = 16;
  // Implementation of the client that generated the event
  string meta_client_implementation = 17;
  // Consensus implementation of the validator
  string meta_consensus_implementation = 18;
  // Consensus version of the validator
  string meta_consensus_version = 19;
  // City of the client that generated the event
  string meta_client_geo_city = 20;
  // Country of the client that generated the event
  string meta_client_geo_country = 21;
  // Country code of the client that generated the event
  string meta_client_geo_country_code = 22;
  // The version of the beacon block
  string block_version = 23;
  // The total bytes of the beacon block payload
  google.protobuf.UInt32Value block_total_bytes = 24;
  // The total bytes of the beacon block payload when compressed using snappy
  google.protobuf.UInt32Value block_total_bytes_compressed = 25;
  // The value of the execution payload in wei
  google.protobuf.UInt64Value execution_payload_value = 26;
  // The value of the consensus payload in wei
  google.protobuf.UInt64Value consensus_payload_value = 27;
  // The block number of the execution payload
  uint32 execution_payload_block_number = 28;
  // Gas limit for execution payload
  google.protobuf.UInt64Value execution_payload_gas_limit = 29;
  // Gas used for execution payload
  google.protobuf.UInt64Value execution_payload_gas_used = 30;
  // The transaction count of the execution payload
  google.protobuf.UInt32Value execution_payload_transactions_count = 31;
  // The transaction total bytes of the execution payload
  google.protobuf.UInt32Value execution_payload_transactions_total_bytes = 32;
  // Ethereum network name
  string meta_network_name = 33;
}

// ListFctValidatorBlockRequest is the request message for listing fct_validator_block records
message ListFctValidatorBlockRequest {
  // Filter by slot_start_date_time (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by slot (ORDER BY column 2 - optional)
  UInt32Filter slot = 2;

  // Filter by meta_client_name (ORDER BY column 3 - optional)
  StringFilter meta_client_name = 3;

  // Filter by event_date_time (ORDER BY column 4 - optional)
  UInt32Filter event_date_time = 4;

  // Filter by updated_date_time (optional)
  UInt32Filter updated_date_time = 5;
  // Filter by meta_client_version (optional)
  StringFilter meta_client_version = 6;
  // Filter by meta_client_implementation (optional)
  StringFilter meta_client_implementation = 7;
  // Filter by meta_consensus_implementation (optional)
  StringFilter meta_consensus_implementation = 8;
  // Filter by meta_consensus_version (optional)
  StringFilter meta_consensus_version = 9;
  // Filter by meta_client_geo_city (optional)
  StringFilter meta_client_geo_city = 10;
  // Filter by meta_client_geo_country (optional)
  StringFilter meta_client_geo_country = 11;
  // Filter by meta_client_geo_country_code (optional)
  StringFilter meta_client_geo_country_code = 12;
  // Filter by block_version (optional)
  StringFilter block_version = 13;
  // Filter by block_total_bytes (optional)
  NullableUInt32Filter block_total_bytes = 14;
  // Filter by block_total_bytes_compressed (optional)
  NullableUInt32Filter block_total_bytes_compressed = 15;
  // Filter by execution_payload_value (optional)
  NullableUInt64Filter execution_payload_value = 16;
  // Filter by consensus_payload_value (optional)
  NullableUInt64Filter consensus_payload_value = 17;
  // Filter by execution_payload_block_number (optional)
  UInt32Filter execution_payload_block_number = 18;
  // Filter by execution_payload_gas_limit (optional)
  NullableUInt64Filter execution_payload_gas_limit = 19;
  // Filter by execution_payload_gas_used (optional)
  NullableUInt64Filter execution_payload_gas_used = 20;
  // Filter by execution_payload_transactions_count (optional)
  NullableUInt32Filter execution_payload_transactions_count = 21;
  // Filter by execution_payload_transactions_total_bytes (optional)
  NullableUInt32Filter execution_payload_transactions_total_bytes = 22;
  // Filter by meta_network_name (optional)
  StringFilter meta_network_name = 23;

  // The maximum number of fct_validator_block to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 24;
  // A page token, received from a previous `ListFctValidatorBlock` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 25;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 26;
}

// ListFctValidatorBlockResponse is the response message for listing fct_validator_block records
message ListFctValidatorBlockResponse {
  // The list of fct_validator_block.
  repeated FctValidatorBlock fct_validator_block = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// GetFctValidatorBlockRequest is the request message for getting a single fct_validator_block record by primary key
message GetFctValidatorBlockRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// GetFctValidatorBlockResponse is the response message for getting a single fct_validator_block record
message GetFctValidatorBlockResponse {
  FctValidatorBlock item = 1;
}

// FctValidatorBlockService provides RPC methods for querying fct_validator_block data
service FctValidatorBlockService {
  // List returns paginated fct_validator_block records
  rpc List(ListFctValidatorBlockRequest) returns (ListFctValidatorBlockResponse);
  // Get returns a single fct_validator_block record by primary key
  rpc Get(GetFctValidatorBlockRequest) returns (GetFctValidatorBlockResponse);
}
