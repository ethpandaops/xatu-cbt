syntax = "proto3";

package cbt;

import "tagger/tagger.proto";
import "common.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Table for storage first access data

message IntAddressStorageSlotFirstAccess {
  // The address of the account
  string address = 11 [(tagger.tags) = "ch:\"address\""];
  // The slot key of the storage
  string slot_key = 12 [(tagger.tags) = "ch:\"slot_key\""];
  // The block number of the first access
  uint32 block_number = 13 [(tagger.tags) = "ch:\"block_number\""];
  // The value of the storage
  string value = 14 [(tagger.tags) = "ch:\"value\""];
  // Version for this address + slot key, for internal use in clickhouse to keep first access
  uint32 version = 15 [(tagger.tags) = "ch:\"version\""];
}

// Request for listing int_address_storage_slot_first_access records
message ListIntAddressStorageSlotFirstAccessRequest {
  // Filter by address - The address of the account (PRIMARY KEY - required)
  StringFilter address = 1;

  // Filter by slot_key - The slot key of the storage (ORDER BY column 2 - optional)
  StringFilter slot_key = 2;

  // Filter by block_number - The block number of the first access (optional)
  UInt32Filter block_number = 3;
  // Filter by value - The value of the storage (optional)
  StringFilter value = 4;
  // Filter by version - Version for this address + slot key, for internal use in clickhouse to keep first access (optional)
  UInt32Filter version = 5;

  // The maximum number of int_address_storage_slot_first_access to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 6;
  // A page token, received from a previous `ListIntAddressStorageSlotFirstAccess` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 7;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 8;
}

// Response for listing int_address_storage_slot_first_access records
message ListIntAddressStorageSlotFirstAccessResponse {
  // The list of int_address_storage_slot_first_access.
  repeated IntAddressStorageSlotFirstAccess int_address_storage_slot_first_access = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single int_address_storage_slot_first_access record by primary key
message GetIntAddressStorageSlotFirstAccessRequest {
  // The address of the account
  string address = 1; // Primary key (required)
}

// Response for getting a single int_address_storage_slot_first_access record
message GetIntAddressStorageSlotFirstAccessResponse {
  IntAddressStorageSlotFirstAccess item = 1;
}

// Query int_address_storage_slot_first_access data
service IntAddressStorageSlotFirstAccessService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListIntAddressStorageSlotFirstAccessRequest) returns (ListIntAddressStorageSlotFirstAccessResponse);
  // Get record | Retrieve a single record by primary key
  rpc Get(GetIntAddressStorageSlotFirstAccessRequest) returns (GetIntAddressStorageSlotFirstAccessResponse);
}
