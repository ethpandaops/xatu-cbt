syntax = "proto3";

package cbt;

import "common.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Attested head of a block for the unfinalized chain.

message IntAttestationAttestedHead {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The epoch number containing the slot
  uint32 epoch = 14;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15;
  // The source epoch number in the attestation group
  uint32 source_epoch = 16;
  // The wall clock time when the source epoch started
  uint32 source_epoch_start_date_time = 17;
  // The source beacon block root hash in the attestation group
  string source_root = 18;
  // The target epoch number in the attestation group
  uint32 target_epoch = 19;
  // The wall clock time when the target epoch started
  uint32 target_epoch_start_date_time = 20;
  // The target beacon block root hash in the attestation group
  string target_root = 21;
  // The beacon block root hash
  string block_root = 22;
  // The index of the validator attesting
  uint32 attesting_validator_index = 23;
  // The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc.
  uint32 propagation_distance = 24;
}

// ListIntAttestationAttestedHeadRequest is the request message for listing int_attestation_attested_head records
message ListIntAttestationAttestedHeadRequest {
  // Filter by slot_start_date_time (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by block_root (ORDER BY column 2 - optional)
  StringFilter block_root = 2;

  // Filter by attesting_validator_index (ORDER BY column 3 - optional)
  UInt32Filter attesting_validator_index = 3;

  // Filter by updated_date_time (optional)
  UInt32Filter updated_date_time = 4;
  // Filter by slot (optional)
  UInt32Filter slot = 5;
  // Filter by epoch (optional)
  UInt32Filter epoch = 6;
  // Filter by epoch_start_date_time (optional)
  UInt32Filter epoch_start_date_time = 7;
  // Filter by source_epoch (optional)
  UInt32Filter source_epoch = 8;
  // Filter by source_epoch_start_date_time (optional)
  UInt32Filter source_epoch_start_date_time = 9;
  // Filter by source_root (optional)
  StringFilter source_root = 10;
  // Filter by target_epoch (optional)
  UInt32Filter target_epoch = 11;
  // Filter by target_epoch_start_date_time (optional)
  UInt32Filter target_epoch_start_date_time = 12;
  // Filter by target_root (optional)
  StringFilter target_root = 13;
  // Filter by propagation_distance (optional)
  UInt32Filter propagation_distance = 14;

  // The maximum number of int_attestation_attested_head to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 15;
  // A page token, received from a previous `ListIntAttestationAttestedHead` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 16;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 17;
}

// ListIntAttestationAttestedHeadResponse is the response message for listing int_attestation_attested_head records
message ListIntAttestationAttestedHeadResponse {
  // The list of int_attestation_attested_head.
  repeated IntAttestationAttestedHead int_attestation_attested_head = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// GetIntAttestationAttestedHeadRequest is the request message for getting a single int_attestation_attested_head record by primary key
message GetIntAttestationAttestedHeadRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// GetIntAttestationAttestedHeadResponse is the response message for getting a single int_attestation_attested_head record
message GetIntAttestationAttestedHeadResponse {
  IntAttestationAttestedHead item = 1;
}

// IntAttestationAttestedHeadService provides RPC methods for querying int_attestation_attested_head data
service IntAttestationAttestedHeadService {
  // List returns paginated int_attestation_attested_head records
  rpc List(ListIntAttestationAttestedHeadRequest) returns (ListIntAttestationAttestedHeadResponse);
  // Get returns a single int_attestation_attested_head record by primary key
  rpc Get(GetIntAttestationAttestedHeadRequest) returns (GetIntAttestationAttestedHeadResponse);
}
