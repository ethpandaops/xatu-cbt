syntax = "proto3";

package cbt;

import "tagger/tagger.proto";
import "common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// When the attestation was first seen on the network by a sentry node

message IntAttestationFirstSeen {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11 [(tagger.tags) = "ch:\"updated_date_time\""];
  // Source of the event
  string source = 12 [(tagger.tags) = "ch:\"source\""];
  // The slot number
  uint32 slot = 13 [(tagger.tags) = "ch:\"slot\""];
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 14 [(tagger.tags) = "ch:\"slot_start_date_time\""];
  // The epoch number containing the slot
  uint32 epoch = 15 [(tagger.tags) = "ch:\"epoch\""];
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 16 [(tagger.tags) = "ch:\"epoch_start_date_time\""];
  // The time from slot start for the client to see the block
  uint32 seen_slot_start_diff = 17 [(tagger.tags) = "ch:\"seen_slot_start_diff\""];
  // The beacon block root hash
  string block_root = 18 [(tagger.tags) = "ch:\"block_root\""];
  // The index of the validator attesting
  uint32 attesting_validator_index = 19 [(tagger.tags) = "ch:\"attesting_validator_index\""];
  // The committee index of the attesting validator
  string attesting_validator_committee_index = 20 [(tagger.tags) = "ch:\"attesting_validator_committee_index\""];
  // Username of the node
  string username = 21 [(tagger.tags) = "ch:\"username\""];
  // ID of the node
  string node_id = 22 [(tagger.tags) = "ch:\"node_id\""];
  // Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified"
  string classification = 23 [(tagger.tags) = "ch:\"classification\""];
  // Name of the client
  string meta_client_name = 24 [(tagger.tags) = "ch:\"meta_client_name\""];
  // Version of the client
  string meta_client_version = 25 [(tagger.tags) = "ch:\"meta_client_version\""];
  // Implementation of the client
  string meta_client_implementation = 26 [(tagger.tags) = "ch:\"meta_client_implementation\""];
  // City of the client
  string meta_client_geo_city = 27 [(tagger.tags) = "ch:\"meta_client_geo_city\""];
  // Country of the client
  string meta_client_geo_country = 28 [(tagger.tags) = "ch:\"meta_client_geo_country\""];
  // Country code of the client
  string meta_client_geo_country_code = 29 [(tagger.tags) = "ch:\"meta_client_geo_country_code\""];
  // Continent code of the client
  string meta_client_geo_continent_code = 30 [(tagger.tags) = "ch:\"meta_client_geo_continent_code\""];
  // Longitude of the client
  google.protobuf.DoubleValue meta_client_geo_longitude = 31 [(tagger.tags) = "ch:\"meta_client_geo_longitude\""];
  // Latitude of the client
  google.protobuf.DoubleValue meta_client_geo_latitude = 32 [(tagger.tags) = "ch:\"meta_client_geo_latitude\""];
  // Autonomous system number of the client
  google.protobuf.UInt32Value meta_client_geo_autonomous_system_number = 33 [(tagger.tags) = "ch:\"meta_client_geo_autonomous_system_number\""];
  // Autonomous system organization of the client
  google.protobuf.StringValue meta_client_geo_autonomous_system_organization = 34 [(tagger.tags) = "ch:\"meta_client_geo_autonomous_system_organization\""];
  // Ethereum consensus client version
  string meta_consensus_version = 35 [(tagger.tags) = "ch:\"meta_consensus_version\""];
  // Ethereum consensus client implementation
  string meta_consensus_implementation = 36 [(tagger.tags) = "ch:\"meta_consensus_implementation\""];
}

// Request for listing int_attestation_first_seen records
message ListIntAttestationFirstSeenRequest {
  // Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by attesting_validator_index - The index of the validator attesting (ORDER BY column 2 - optional)
  UInt32Filter attesting_validator_index = 2;

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 3;
  // Filter by source - Source of the event (optional)
  StringFilter source = 4;
  // Filter by slot - The slot number (optional)
  UInt32Filter slot = 5;
  // Filter by epoch - The epoch number containing the slot (optional)
  UInt32Filter epoch = 6;
  // Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
  UInt32Filter epoch_start_date_time = 7;
  // Filter by seen_slot_start_diff - The time from slot start for the client to see the block (optional)
  UInt32Filter seen_slot_start_diff = 8;
  // Filter by block_root - The beacon block root hash (optional)
  StringFilter block_root = 9;
  // Filter by attesting_validator_committee_index - The committee index of the attesting validator (optional)
  StringFilter attesting_validator_committee_index = 10;
  // Filter by username - Username of the node (optional)
  StringFilter username = 11;
  // Filter by node_id - ID of the node (optional)
  StringFilter node_id = 12;
  // Filter by classification - Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified" (optional)
  StringFilter classification = 13;
  // Filter by meta_client_name - Name of the client (optional)
  StringFilter meta_client_name = 14;
  // Filter by meta_client_version - Version of the client (optional)
  StringFilter meta_client_version = 15;
  // Filter by meta_client_implementation - Implementation of the client (optional)
  StringFilter meta_client_implementation = 16;
  // Filter by meta_client_geo_city - City of the client (optional)
  StringFilter meta_client_geo_city = 17;
  // Filter by meta_client_geo_country - Country of the client (optional)
  StringFilter meta_client_geo_country = 18;
  // Filter by meta_client_geo_country_code - Country code of the client (optional)
  StringFilter meta_client_geo_country_code = 19;
  // Filter by meta_client_geo_continent_code - Continent code of the client (optional)
  StringFilter meta_client_geo_continent_code = 20;
  // Filter by meta_client_geo_longitude - Longitude of the client (optional)
  google.protobuf.DoubleValue meta_client_geo_longitude = 21;
  // Filter by meta_client_geo_latitude - Latitude of the client (optional)
  google.protobuf.DoubleValue meta_client_geo_latitude = 22;
  // Filter by meta_client_geo_autonomous_system_number - Autonomous system number of the client (optional)
  NullableUInt32Filter meta_client_geo_autonomous_system_number = 23;
  // Filter by meta_client_geo_autonomous_system_organization - Autonomous system organization of the client (optional)
  NullableStringFilter meta_client_geo_autonomous_system_organization = 24;
  // Filter by meta_consensus_version - Ethereum consensus client version (optional)
  StringFilter meta_consensus_version = 25;
  // Filter by meta_consensus_implementation - Ethereum consensus client implementation (optional)
  StringFilter meta_consensus_implementation = 26;

  // The maximum number of int_attestation_first_seen to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 27;
  // A page token, received from a previous `ListIntAttestationFirstSeen` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 28;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 29;
}

// Response for listing int_attestation_first_seen records
message ListIntAttestationFirstSeenResponse {
  // The list of int_attestation_first_seen.
  repeated IntAttestationFirstSeen int_attestation_first_seen = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single int_attestation_first_seen record by primary key
message GetIntAttestationFirstSeenRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// Response for getting a single int_attestation_first_seen record
message GetIntAttestationFirstSeenResponse {
  IntAttestationFirstSeen item = 1;
}

// Query int_attestation_first_seen data
service IntAttestationFirstSeenService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListIntAttestationFirstSeenRequest) returns (ListIntAttestationFirstSeenResponse);
  // Get record | Retrieve a single record by primary key
  rpc Get(GetIntAttestationFirstSeenRequest) returns (GetIntAttestationFirstSeenResponse);
}
