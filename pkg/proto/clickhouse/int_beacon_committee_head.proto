syntax = "proto3";

package cbt;

import "common.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Beacon committee head for the unfinalized chain

message IntBeaconCommitteeHead {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The epoch number containing the slot
  uint32 epoch = 14;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15;
  // The committee index in the beacon API committee payload
  string committee_index = 16;
  // The validator indices in the beacon API committee payload
  repeated uint32 validators = 17;
}

// ListIntBeaconCommitteeHeadRequest is the request message for listing int_beacon_committee_head records
message ListIntBeaconCommitteeHeadRequest {
  // Filter by slot_start_date_time (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by committee_index (ORDER BY column 2 - optional)
  StringFilter committee_index = 2;

  // Filter by updated_date_time (optional)
  UInt32Filter updated_date_time = 3;
  // Filter by slot (optional)
  UInt32Filter slot = 4;
  // Filter by epoch (optional)
  UInt32Filter epoch = 5;
  // Filter by epoch_start_date_time (optional)
  UInt32Filter epoch_start_date_time = 6;
  // Filter by validators (optional)
  repeated uint32 validators = 7;

  // The maximum number of int_beacon_committee_head to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 8;
  // A page token, received from a previous `ListIntBeaconCommitteeHead` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 9;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 10;
}

// ListIntBeaconCommitteeHeadResponse is the response message for listing int_beacon_committee_head records
message ListIntBeaconCommitteeHeadResponse {
  // The list of int_beacon_committee_head.
  repeated IntBeaconCommitteeHead int_beacon_committee_head = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// GetIntBeaconCommitteeHeadRequest is the request message for getting a single int_beacon_committee_head record by primary key
message GetIntBeaconCommitteeHeadRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// GetIntBeaconCommitteeHeadResponse is the response message for getting a single int_beacon_committee_head record
message GetIntBeaconCommitteeHeadResponse {
  IntBeaconCommitteeHead item = 1;
}

// IntBeaconCommitteeHeadService provides RPC methods for querying int_beacon_committee_head data
service IntBeaconCommitteeHeadService {
  // List returns paginated int_beacon_committee_head records
  rpc List(ListIntBeaconCommitteeHeadRequest) returns (ListIntBeaconCommitteeHeadResponse);
  // Get returns a single int_beacon_committee_head record by primary key
  rpc Get(GetIntBeaconCommitteeHeadRequest) returns (GetIntBeaconCommitteeHeadResponse);
}
