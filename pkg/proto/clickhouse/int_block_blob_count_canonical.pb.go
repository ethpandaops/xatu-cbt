// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: int_block_blob_count_canonical.proto

package clickhouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IntBlockBlobCountCanonical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// The slot number
	Slot uint32 `protobuf:"varint,12,opt,name=slot,proto3" json:"slot,omitempty"`
	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,13,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// The epoch number containing the slot
	Epoch uint32 `protobuf:"varint,14,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The wall clock time when the epoch started
	EpochStartDateTime uint32 `protobuf:"varint,15,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// The beacon block root hash
	BlockRoot string `protobuf:"bytes,16,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// The number of blobs in the block
	BlobCount uint32 `protobuf:"varint,17,opt,name=blob_count,json=blobCount,proto3" json:"blob_count,omitempty"`
}

func (x *IntBlockBlobCountCanonical) Reset() {
	*x = IntBlockBlobCountCanonical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_blob_count_canonical_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntBlockBlobCountCanonical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntBlockBlobCountCanonical) ProtoMessage() {}

func (x *IntBlockBlobCountCanonical) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_blob_count_canonical_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntBlockBlobCountCanonical.ProtoReflect.Descriptor instead.
func (*IntBlockBlobCountCanonical) Descriptor() ([]byte, []int) {
	return file_int_block_blob_count_canonical_proto_rawDescGZIP(), []int{0}
}

func (x *IntBlockBlobCountCanonical) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *IntBlockBlobCountCanonical) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *IntBlockBlobCountCanonical) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *IntBlockBlobCountCanonical) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *IntBlockBlobCountCanonical) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *IntBlockBlobCountCanonical) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *IntBlockBlobCountCanonical) GetBlobCount() uint32 {
	if x != nil {
		return x.BlobCount
	}
	return 0
}

// ListIntBlockBlobCountCanonicalRequest is the request message for listing int_block_blob_count_canonical records
type ListIntBlockBlobCountCanonicalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time (PRIMARY KEY - required)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by block_root (ORDER BY column 2 - optional)
	BlockRoot *StringFilter `protobuf:"bytes,2,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// Filter by updated_date_time (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,3,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by slot (optional)
	Slot *UInt32Filter `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by epoch (optional)
	Epoch *UInt32Filter `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by epoch_start_date_time (optional)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,6,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by blob_count (optional)
	BlobCount *UInt32Filter `protobuf:"bytes,7,opt,name=blob_count,json=blobCount,proto3" json:"blob_count,omitempty"`
	// The maximum number of int_block_blob_count_canonical to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListIntBlockBlobCountCanonical` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,10,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListIntBlockBlobCountCanonicalRequest) Reset() {
	*x = ListIntBlockBlobCountCanonicalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_blob_count_canonical_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIntBlockBlobCountCanonicalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntBlockBlobCountCanonicalRequest) ProtoMessage() {}

func (x *ListIntBlockBlobCountCanonicalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_blob_count_canonical_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntBlockBlobCountCanonicalRequest.ProtoReflect.Descriptor instead.
func (*ListIntBlockBlobCountCanonicalRequest) Descriptor() ([]byte, []int) {
	return file_int_block_blob_count_canonical_proto_rawDescGZIP(), []int{1}
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetBlockRoot() *StringFilter {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetBlobCount() *UInt32Filter {
	if x != nil {
		return x.BlobCount
	}
	return nil
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListIntBlockBlobCountCanonicalRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListIntBlockBlobCountCanonicalResponse is the response message for listing int_block_blob_count_canonical records
type ListIntBlockBlobCountCanonicalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of int_block_blob_count_canonical.
	IntBlockBlobCountCanonical []*IntBlockBlobCountCanonical `protobuf:"bytes,1,rep,name=int_block_blob_count_canonical,json=intBlockBlobCountCanonical,proto3" json:"int_block_blob_count_canonical,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListIntBlockBlobCountCanonicalResponse) Reset() {
	*x = ListIntBlockBlobCountCanonicalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_blob_count_canonical_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIntBlockBlobCountCanonicalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntBlockBlobCountCanonicalResponse) ProtoMessage() {}

func (x *ListIntBlockBlobCountCanonicalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_blob_count_canonical_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntBlockBlobCountCanonicalResponse.ProtoReflect.Descriptor instead.
func (*ListIntBlockBlobCountCanonicalResponse) Descriptor() ([]byte, []int) {
	return file_int_block_blob_count_canonical_proto_rawDescGZIP(), []int{2}
}

func (x *ListIntBlockBlobCountCanonicalResponse) GetIntBlockBlobCountCanonical() []*IntBlockBlobCountCanonical {
	if x != nil {
		return x.IntBlockBlobCountCanonical
	}
	return nil
}

func (x *ListIntBlockBlobCountCanonicalResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetIntBlockBlobCountCanonicalRequest is the request message for getting a single int_block_blob_count_canonical record by primary key
type GetIntBlockBlobCountCanonicalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetIntBlockBlobCountCanonicalRequest) Reset() {
	*x = GetIntBlockBlobCountCanonicalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_blob_count_canonical_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntBlockBlobCountCanonicalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntBlockBlobCountCanonicalRequest) ProtoMessage() {}

func (x *GetIntBlockBlobCountCanonicalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_blob_count_canonical_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntBlockBlobCountCanonicalRequest.ProtoReflect.Descriptor instead.
func (*GetIntBlockBlobCountCanonicalRequest) Descriptor() ([]byte, []int) {
	return file_int_block_blob_count_canonical_proto_rawDescGZIP(), []int{3}
}

func (x *GetIntBlockBlobCountCanonicalRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// GetIntBlockBlobCountCanonicalResponse is the response message for getting a single int_block_blob_count_canonical record
type GetIntBlockBlobCountCanonicalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *IntBlockBlobCountCanonical `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetIntBlockBlobCountCanonicalResponse) Reset() {
	*x = GetIntBlockBlobCountCanonicalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_blob_count_canonical_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntBlockBlobCountCanonicalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntBlockBlobCountCanonicalResponse) ProtoMessage() {}

func (x *GetIntBlockBlobCountCanonicalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_blob_count_canonical_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntBlockBlobCountCanonicalResponse.ProtoReflect.Descriptor instead.
func (*GetIntBlockBlobCountCanonicalResponse) Descriptor() ([]byte, []int) {
	return file_int_block_blob_count_canonical_proto_rawDescGZIP(), []int{4}
}

func (x *GetIntBlockBlobCountCanonicalResponse) GetItem() *IntBlockBlobCountCanonical {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_int_block_blob_count_canonical_proto protoreflect.FileDescriptor

var file_int_block_blob_count_canonical_proto_rawDesc = []byte{
	0x0a, 0x24, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x02, 0x0a, 0x1a, 0x49, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x31, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xfb, 0x03, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x14, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x73, 0x6c, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x3d, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x44, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xb5,
	0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x1e, 0x69, 0x6e, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x5c, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c,
	0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32, 0xe2, 0x01,
	0x0a, 0x21, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c,
	0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f,
	0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74,
	0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_int_block_blob_count_canonical_proto_rawDescOnce sync.Once
	file_int_block_blob_count_canonical_proto_rawDescData = file_int_block_blob_count_canonical_proto_rawDesc
)

func file_int_block_blob_count_canonical_proto_rawDescGZIP() []byte {
	file_int_block_blob_count_canonical_proto_rawDescOnce.Do(func() {
		file_int_block_blob_count_canonical_proto_rawDescData = protoimpl.X.CompressGZIP(file_int_block_blob_count_canonical_proto_rawDescData)
	})
	return file_int_block_blob_count_canonical_proto_rawDescData
}

var file_int_block_blob_count_canonical_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_int_block_blob_count_canonical_proto_goTypes = []any{
	(*IntBlockBlobCountCanonical)(nil),             // 0: cbt.IntBlockBlobCountCanonical
	(*ListIntBlockBlobCountCanonicalRequest)(nil),  // 1: cbt.ListIntBlockBlobCountCanonicalRequest
	(*ListIntBlockBlobCountCanonicalResponse)(nil), // 2: cbt.ListIntBlockBlobCountCanonicalResponse
	(*GetIntBlockBlobCountCanonicalRequest)(nil),   // 3: cbt.GetIntBlockBlobCountCanonicalRequest
	(*GetIntBlockBlobCountCanonicalResponse)(nil),  // 4: cbt.GetIntBlockBlobCountCanonicalResponse
	(*UInt32Filter)(nil),                           // 5: cbt.UInt32Filter
	(*StringFilter)(nil),                           // 6: cbt.StringFilter
}
var file_int_block_blob_count_canonical_proto_depIdxs = []int32{
	5,  // 0: cbt.ListIntBlockBlobCountCanonicalRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	6,  // 1: cbt.ListIntBlockBlobCountCanonicalRequest.block_root:type_name -> cbt.StringFilter
	5,  // 2: cbt.ListIntBlockBlobCountCanonicalRequest.updated_date_time:type_name -> cbt.UInt32Filter
	5,  // 3: cbt.ListIntBlockBlobCountCanonicalRequest.slot:type_name -> cbt.UInt32Filter
	5,  // 4: cbt.ListIntBlockBlobCountCanonicalRequest.epoch:type_name -> cbt.UInt32Filter
	5,  // 5: cbt.ListIntBlockBlobCountCanonicalRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	5,  // 6: cbt.ListIntBlockBlobCountCanonicalRequest.blob_count:type_name -> cbt.UInt32Filter
	0,  // 7: cbt.ListIntBlockBlobCountCanonicalResponse.int_block_blob_count_canonical:type_name -> cbt.IntBlockBlobCountCanonical
	0,  // 8: cbt.GetIntBlockBlobCountCanonicalResponse.item:type_name -> cbt.IntBlockBlobCountCanonical
	1,  // 9: cbt.IntBlockBlobCountCanonicalService.List:input_type -> cbt.ListIntBlockBlobCountCanonicalRequest
	3,  // 10: cbt.IntBlockBlobCountCanonicalService.Get:input_type -> cbt.GetIntBlockBlobCountCanonicalRequest
	2,  // 11: cbt.IntBlockBlobCountCanonicalService.List:output_type -> cbt.ListIntBlockBlobCountCanonicalResponse
	4,  // 12: cbt.IntBlockBlobCountCanonicalService.Get:output_type -> cbt.GetIntBlockBlobCountCanonicalResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_int_block_blob_count_canonical_proto_init() }
func file_int_block_blob_count_canonical_proto_init() {
	if File_int_block_blob_count_canonical_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_int_block_blob_count_canonical_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IntBlockBlobCountCanonical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_blob_count_canonical_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListIntBlockBlobCountCanonicalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_blob_count_canonical_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListIntBlockBlobCountCanonicalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_blob_count_canonical_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetIntBlockBlobCountCanonicalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_blob_count_canonical_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetIntBlockBlobCountCanonicalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_int_block_blob_count_canonical_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_int_block_blob_count_canonical_proto_goTypes,
		DependencyIndexes: file_int_block_blob_count_canonical_proto_depIdxs,
		MessageInfos:      file_int_block_blob_count_canonical_proto_msgTypes,
	}.Build()
	File_int_block_blob_count_canonical_proto = out.File
	file_int_block_blob_count_canonical_proto_rawDesc = nil
	file_int_block_blob_count_canonical_proto_goTypes = nil
	file_int_block_blob_count_canonical_proto_depIdxs = nil
}
