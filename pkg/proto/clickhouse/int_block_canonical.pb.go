// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: int_block_canonical.proto

package clickhouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IntBlockCanonical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// The slot number from beacon block payload
	Slot uint32 `protobuf:"varint,12,opt,name=slot,proto3" json:"slot,omitempty"`
	// The wall clock time when the reorg slot started
	SlotStartDateTime uint32 `protobuf:"varint,13,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// The epoch number from beacon block payload
	Epoch uint32 `protobuf:"varint,14,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The wall clock time when the epoch started
	EpochStartDateTime uint32 `protobuf:"varint,15,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// The root hash of the beacon block
	BlockRoot string `protobuf:"bytes,16,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// The version of the beacon block
	BlockVersion string `protobuf:"bytes,17,opt,name=block_version,json=blockVersion,proto3" json:"block_version,omitempty"`
	// The total bytes of the beacon block payload
	BlockTotalBytes *wrapperspb.UInt32Value `protobuf:"bytes,18,opt,name=block_total_bytes,json=blockTotalBytes,proto3" json:"block_total_bytes,omitempty"`
	// The total bytes of the beacon block payload when compressed using snappy
	BlockTotalBytesCompressed *wrapperspb.UInt32Value `protobuf:"bytes,19,opt,name=block_total_bytes_compressed,json=blockTotalBytesCompressed,proto3" json:"block_total_bytes_compressed,omitempty"`
	// The root hash of the parent beacon block
	ParentRoot string `protobuf:"bytes,20,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	// The root hash of the beacon state at this block
	StateRoot string `protobuf:"bytes,21,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// The index of the validator that proposed the beacon block
	ProposerIndex uint32 `protobuf:"varint,22,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	// The block hash of the associated execution block
	Eth1DataBlockHash string `protobuf:"bytes,23,opt,name=eth1_data_block_hash,json=eth1DataBlockHash,proto3" json:"eth1_data_block_hash,omitempty"`
	// The root of the deposit tree in the associated execution block
	Eth1DataDepositRoot string `protobuf:"bytes,24,opt,name=eth1_data_deposit_root,json=eth1DataDepositRoot,proto3" json:"eth1_data_deposit_root,omitempty"`
	// The block hash of the execution payload
	ExecutionPayloadBlockHash string `protobuf:"bytes,25,opt,name=execution_payload_block_hash,json=executionPayloadBlockHash,proto3" json:"execution_payload_block_hash,omitempty"`
	// The block number of the execution payload
	ExecutionPayloadBlockNumber uint32 `protobuf:"varint,26,opt,name=execution_payload_block_number,json=executionPayloadBlockNumber,proto3" json:"execution_payload_block_number,omitempty"`
	// The recipient of the fee for this execution payload
	ExecutionPayloadFeeRecipient string `protobuf:"bytes,27,opt,name=execution_payload_fee_recipient,json=executionPayloadFeeRecipient,proto3" json:"execution_payload_fee_recipient,omitempty"`
	// Base fee per gas for execution payload
	ExecutionPayloadBaseFeePerGas *wrapperspb.StringValue `protobuf:"bytes,28,opt,name=execution_payload_base_fee_per_gas,json=executionPayloadBaseFeePerGas,proto3" json:"execution_payload_base_fee_per_gas,omitempty"`
	// Gas used for blobs in execution payload
	ExecutionPayloadBlobGasUsed *wrapperspb.UInt64Value `protobuf:"bytes,29,opt,name=execution_payload_blob_gas_used,json=executionPayloadBlobGasUsed,proto3" json:"execution_payload_blob_gas_used,omitempty"`
	// Excess gas used for blobs in execution payload
	ExecutionPayloadExcessBlobGas *wrapperspb.UInt64Value `protobuf:"bytes,30,opt,name=execution_payload_excess_blob_gas,json=executionPayloadExcessBlobGas,proto3" json:"execution_payload_excess_blob_gas,omitempty"`
	// Gas limit for execution payload
	ExecutionPayloadGasLimit *wrapperspb.UInt64Value `protobuf:"bytes,31,opt,name=execution_payload_gas_limit,json=executionPayloadGasLimit,proto3" json:"execution_payload_gas_limit,omitempty"`
	// Gas used for execution payload
	ExecutionPayloadGasUsed *wrapperspb.UInt64Value `protobuf:"bytes,32,opt,name=execution_payload_gas_used,json=executionPayloadGasUsed,proto3" json:"execution_payload_gas_used,omitempty"`
	// The state root of the execution payload
	ExecutionPayloadStateRoot string `protobuf:"bytes,33,opt,name=execution_payload_state_root,json=executionPayloadStateRoot,proto3" json:"execution_payload_state_root,omitempty"`
	// The parent hash of the execution payload
	ExecutionPayloadParentHash string `protobuf:"bytes,34,opt,name=execution_payload_parent_hash,json=executionPayloadParentHash,proto3" json:"execution_payload_parent_hash,omitempty"`
	// The transaction count of the execution payload
	ExecutionPayloadTransactionsCount *wrapperspb.UInt32Value `protobuf:"bytes,35,opt,name=execution_payload_transactions_count,json=executionPayloadTransactionsCount,proto3" json:"execution_payload_transactions_count,omitempty"`
	// The transaction total bytes of the execution payload
	ExecutionPayloadTransactionsTotalBytes *wrapperspb.UInt32Value `protobuf:"bytes,36,opt,name=execution_payload_transactions_total_bytes,json=executionPayloadTransactionsTotalBytes,proto3" json:"execution_payload_transactions_total_bytes,omitempty"`
	// The transaction total bytes of the execution payload when compressed using snappy
	ExecutionPayloadTransactionsTotalBytesCompressed *wrapperspb.UInt32Value `protobuf:"bytes,37,opt,name=execution_payload_transactions_total_bytes_compressed,json=executionPayloadTransactionsTotalBytesCompressed,proto3" json:"execution_payload_transactions_total_bytes_compressed,omitempty"`
}

func (x *IntBlockCanonical) Reset() {
	*x = IntBlockCanonical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_canonical_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntBlockCanonical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntBlockCanonical) ProtoMessage() {}

func (x *IntBlockCanonical) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_canonical_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntBlockCanonical.ProtoReflect.Descriptor instead.
func (*IntBlockCanonical) Descriptor() ([]byte, []int) {
	return file_int_block_canonical_proto_rawDescGZIP(), []int{0}
}

func (x *IntBlockCanonical) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *IntBlockCanonical) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *IntBlockCanonical) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *IntBlockCanonical) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *IntBlockCanonical) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *IntBlockCanonical) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *IntBlockCanonical) GetBlockVersion() string {
	if x != nil {
		return x.BlockVersion
	}
	return ""
}

func (x *IntBlockCanonical) GetBlockTotalBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.BlockTotalBytes
	}
	return nil
}

func (x *IntBlockCanonical) GetBlockTotalBytesCompressed() *wrapperspb.UInt32Value {
	if x != nil {
		return x.BlockTotalBytesCompressed
	}
	return nil
}

func (x *IntBlockCanonical) GetParentRoot() string {
	if x != nil {
		return x.ParentRoot
	}
	return ""
}

func (x *IntBlockCanonical) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *IntBlockCanonical) GetProposerIndex() uint32 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

func (x *IntBlockCanonical) GetEth1DataBlockHash() string {
	if x != nil {
		return x.Eth1DataBlockHash
	}
	return ""
}

func (x *IntBlockCanonical) GetEth1DataDepositRoot() string {
	if x != nil {
		return x.Eth1DataDepositRoot
	}
	return ""
}

func (x *IntBlockCanonical) GetExecutionPayloadBlockHash() string {
	if x != nil {
		return x.ExecutionPayloadBlockHash
	}
	return ""
}

func (x *IntBlockCanonical) GetExecutionPayloadBlockNumber() uint32 {
	if x != nil {
		return x.ExecutionPayloadBlockNumber
	}
	return 0
}

func (x *IntBlockCanonical) GetExecutionPayloadFeeRecipient() string {
	if x != nil {
		return x.ExecutionPayloadFeeRecipient
	}
	return ""
}

func (x *IntBlockCanonical) GetExecutionPayloadBaseFeePerGas() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionPayloadBaseFeePerGas
	}
	return nil
}

func (x *IntBlockCanonical) GetExecutionPayloadBlobGasUsed() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExecutionPayloadBlobGasUsed
	}
	return nil
}

func (x *IntBlockCanonical) GetExecutionPayloadExcessBlobGas() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExecutionPayloadExcessBlobGas
	}
	return nil
}

func (x *IntBlockCanonical) GetExecutionPayloadGasLimit() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExecutionPayloadGasLimit
	}
	return nil
}

func (x *IntBlockCanonical) GetExecutionPayloadGasUsed() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExecutionPayloadGasUsed
	}
	return nil
}

func (x *IntBlockCanonical) GetExecutionPayloadStateRoot() string {
	if x != nil {
		return x.ExecutionPayloadStateRoot
	}
	return ""
}

func (x *IntBlockCanonical) GetExecutionPayloadParentHash() string {
	if x != nil {
		return x.ExecutionPayloadParentHash
	}
	return ""
}

func (x *IntBlockCanonical) GetExecutionPayloadTransactionsCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExecutionPayloadTransactionsCount
	}
	return nil
}

func (x *IntBlockCanonical) GetExecutionPayloadTransactionsTotalBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExecutionPayloadTransactionsTotalBytes
	}
	return nil
}

func (x *IntBlockCanonical) GetExecutionPayloadTransactionsTotalBytesCompressed() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExecutionPayloadTransactionsTotalBytesCompressed
	}
	return nil
}

// ListIntBlockCanonicalRequest is the request message for listing int_block_canonical records
type ListIntBlockCanonicalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time (PRIMARY KEY - required)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by block_root (ORDER BY column 2 - optional)
	BlockRoot *StringFilter `protobuf:"bytes,2,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// Filter by updated_date_time (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,3,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by slot (optional)
	Slot *UInt32Filter `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by epoch (optional)
	Epoch *UInt32Filter `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by epoch_start_date_time (optional)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,6,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by block_version (optional)
	BlockVersion *StringFilter `protobuf:"bytes,7,opt,name=block_version,json=blockVersion,proto3" json:"block_version,omitempty"`
	// Filter by block_total_bytes (optional)
	BlockTotalBytes *NullableUInt32Filter `protobuf:"bytes,8,opt,name=block_total_bytes,json=blockTotalBytes,proto3" json:"block_total_bytes,omitempty"`
	// Filter by block_total_bytes_compressed (optional)
	BlockTotalBytesCompressed *NullableUInt32Filter `protobuf:"bytes,9,opt,name=block_total_bytes_compressed,json=blockTotalBytesCompressed,proto3" json:"block_total_bytes_compressed,omitempty"`
	// Filter by parent_root (optional)
	ParentRoot *StringFilter `protobuf:"bytes,10,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	// Filter by state_root (optional)
	StateRoot *StringFilter `protobuf:"bytes,11,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Filter by proposer_index (optional)
	ProposerIndex *UInt32Filter `protobuf:"bytes,12,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	// Filter by eth1_data_block_hash (optional)
	Eth1DataBlockHash *StringFilter `protobuf:"bytes,13,opt,name=eth1_data_block_hash,json=eth1DataBlockHash,proto3" json:"eth1_data_block_hash,omitempty"`
	// Filter by eth1_data_deposit_root (optional)
	Eth1DataDepositRoot *StringFilter `protobuf:"bytes,14,opt,name=eth1_data_deposit_root,json=eth1DataDepositRoot,proto3" json:"eth1_data_deposit_root,omitempty"`
	// Filter by execution_payload_block_hash (optional)
	ExecutionPayloadBlockHash *StringFilter `protobuf:"bytes,15,opt,name=execution_payload_block_hash,json=executionPayloadBlockHash,proto3" json:"execution_payload_block_hash,omitempty"`
	// Filter by execution_payload_block_number (optional)
	ExecutionPayloadBlockNumber *UInt32Filter `protobuf:"bytes,16,opt,name=execution_payload_block_number,json=executionPayloadBlockNumber,proto3" json:"execution_payload_block_number,omitempty"`
	// Filter by execution_payload_fee_recipient (optional)
	ExecutionPayloadFeeRecipient *StringFilter `protobuf:"bytes,17,opt,name=execution_payload_fee_recipient,json=executionPayloadFeeRecipient,proto3" json:"execution_payload_fee_recipient,omitempty"`
	// Filter by execution_payload_base_fee_per_gas (optional)
	ExecutionPayloadBaseFeePerGas *NullableStringFilter `protobuf:"bytes,18,opt,name=execution_payload_base_fee_per_gas,json=executionPayloadBaseFeePerGas,proto3" json:"execution_payload_base_fee_per_gas,omitempty"`
	// Filter by execution_payload_blob_gas_used (optional)
	ExecutionPayloadBlobGasUsed *NullableUInt64Filter `protobuf:"bytes,19,opt,name=execution_payload_blob_gas_used,json=executionPayloadBlobGasUsed,proto3" json:"execution_payload_blob_gas_used,omitempty"`
	// Filter by execution_payload_excess_blob_gas (optional)
	ExecutionPayloadExcessBlobGas *NullableUInt64Filter `protobuf:"bytes,20,opt,name=execution_payload_excess_blob_gas,json=executionPayloadExcessBlobGas,proto3" json:"execution_payload_excess_blob_gas,omitempty"`
	// Filter by execution_payload_gas_limit (optional)
	ExecutionPayloadGasLimit *NullableUInt64Filter `protobuf:"bytes,21,opt,name=execution_payload_gas_limit,json=executionPayloadGasLimit,proto3" json:"execution_payload_gas_limit,omitempty"`
	// Filter by execution_payload_gas_used (optional)
	ExecutionPayloadGasUsed *NullableUInt64Filter `protobuf:"bytes,22,opt,name=execution_payload_gas_used,json=executionPayloadGasUsed,proto3" json:"execution_payload_gas_used,omitempty"`
	// Filter by execution_payload_state_root (optional)
	ExecutionPayloadStateRoot *StringFilter `protobuf:"bytes,23,opt,name=execution_payload_state_root,json=executionPayloadStateRoot,proto3" json:"execution_payload_state_root,omitempty"`
	// Filter by execution_payload_parent_hash (optional)
	ExecutionPayloadParentHash *StringFilter `protobuf:"bytes,24,opt,name=execution_payload_parent_hash,json=executionPayloadParentHash,proto3" json:"execution_payload_parent_hash,omitempty"`
	// Filter by execution_payload_transactions_count (optional)
	ExecutionPayloadTransactionsCount *NullableUInt32Filter `protobuf:"bytes,25,opt,name=execution_payload_transactions_count,json=executionPayloadTransactionsCount,proto3" json:"execution_payload_transactions_count,omitempty"`
	// Filter by execution_payload_transactions_total_bytes (optional)
	ExecutionPayloadTransactionsTotalBytes *NullableUInt32Filter `protobuf:"bytes,26,opt,name=execution_payload_transactions_total_bytes,json=executionPayloadTransactionsTotalBytes,proto3" json:"execution_payload_transactions_total_bytes,omitempty"`
	// Filter by execution_payload_transactions_total_bytes_compressed (optional)
	ExecutionPayloadTransactionsTotalBytesCompressed *NullableUInt32Filter `protobuf:"bytes,27,opt,name=execution_payload_transactions_total_bytes_compressed,json=executionPayloadTransactionsTotalBytesCompressed,proto3" json:"execution_payload_transactions_total_bytes_compressed,omitempty"`
	// The maximum number of int_block_canonical to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,28,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListIntBlockCanonical` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,29,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,30,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListIntBlockCanonicalRequest) Reset() {
	*x = ListIntBlockCanonicalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_canonical_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIntBlockCanonicalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntBlockCanonicalRequest) ProtoMessage() {}

func (x *ListIntBlockCanonicalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_canonical_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntBlockCanonicalRequest.ProtoReflect.Descriptor instead.
func (*ListIntBlockCanonicalRequest) Descriptor() ([]byte, []int) {
	return file_int_block_canonical_proto_rawDescGZIP(), []int{1}
}

func (x *ListIntBlockCanonicalRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetBlockRoot() *StringFilter {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetBlockVersion() *StringFilter {
	if x != nil {
		return x.BlockVersion
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetBlockTotalBytes() *NullableUInt32Filter {
	if x != nil {
		return x.BlockTotalBytes
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetBlockTotalBytesCompressed() *NullableUInt32Filter {
	if x != nil {
		return x.BlockTotalBytesCompressed
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetParentRoot() *StringFilter {
	if x != nil {
		return x.ParentRoot
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetStateRoot() *StringFilter {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetProposerIndex() *UInt32Filter {
	if x != nil {
		return x.ProposerIndex
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetEth1DataBlockHash() *StringFilter {
	if x != nil {
		return x.Eth1DataBlockHash
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetEth1DataDepositRoot() *StringFilter {
	if x != nil {
		return x.Eth1DataDepositRoot
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadBlockHash() *StringFilter {
	if x != nil {
		return x.ExecutionPayloadBlockHash
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadBlockNumber() *UInt32Filter {
	if x != nil {
		return x.ExecutionPayloadBlockNumber
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadFeeRecipient() *StringFilter {
	if x != nil {
		return x.ExecutionPayloadFeeRecipient
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadBaseFeePerGas() *NullableStringFilter {
	if x != nil {
		return x.ExecutionPayloadBaseFeePerGas
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadBlobGasUsed() *NullableUInt64Filter {
	if x != nil {
		return x.ExecutionPayloadBlobGasUsed
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadExcessBlobGas() *NullableUInt64Filter {
	if x != nil {
		return x.ExecutionPayloadExcessBlobGas
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadGasLimit() *NullableUInt64Filter {
	if x != nil {
		return x.ExecutionPayloadGasLimit
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadGasUsed() *NullableUInt64Filter {
	if x != nil {
		return x.ExecutionPayloadGasUsed
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadStateRoot() *StringFilter {
	if x != nil {
		return x.ExecutionPayloadStateRoot
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadParentHash() *StringFilter {
	if x != nil {
		return x.ExecutionPayloadParentHash
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadTransactionsCount() *NullableUInt32Filter {
	if x != nil {
		return x.ExecutionPayloadTransactionsCount
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadTransactionsTotalBytes() *NullableUInt32Filter {
	if x != nil {
		return x.ExecutionPayloadTransactionsTotalBytes
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetExecutionPayloadTransactionsTotalBytesCompressed() *NullableUInt32Filter {
	if x != nil {
		return x.ExecutionPayloadTransactionsTotalBytesCompressed
	}
	return nil
}

func (x *ListIntBlockCanonicalRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIntBlockCanonicalRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListIntBlockCanonicalRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListIntBlockCanonicalResponse is the response message for listing int_block_canonical records
type ListIntBlockCanonicalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of int_block_canonical.
	IntBlockCanonical []*IntBlockCanonical `protobuf:"bytes,1,rep,name=int_block_canonical,json=intBlockCanonical,proto3" json:"int_block_canonical,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListIntBlockCanonicalResponse) Reset() {
	*x = ListIntBlockCanonicalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_canonical_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIntBlockCanonicalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntBlockCanonicalResponse) ProtoMessage() {}

func (x *ListIntBlockCanonicalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_canonical_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntBlockCanonicalResponse.ProtoReflect.Descriptor instead.
func (*ListIntBlockCanonicalResponse) Descriptor() ([]byte, []int) {
	return file_int_block_canonical_proto_rawDescGZIP(), []int{2}
}

func (x *ListIntBlockCanonicalResponse) GetIntBlockCanonical() []*IntBlockCanonical {
	if x != nil {
		return x.IntBlockCanonical
	}
	return nil
}

func (x *ListIntBlockCanonicalResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetIntBlockCanonicalRequest is the request message for getting a single int_block_canonical record by primary key
type GetIntBlockCanonicalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wall clock time when the reorg slot started
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetIntBlockCanonicalRequest) Reset() {
	*x = GetIntBlockCanonicalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_canonical_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntBlockCanonicalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntBlockCanonicalRequest) ProtoMessage() {}

func (x *GetIntBlockCanonicalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_canonical_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntBlockCanonicalRequest.ProtoReflect.Descriptor instead.
func (*GetIntBlockCanonicalRequest) Descriptor() ([]byte, []int) {
	return file_int_block_canonical_proto_rawDescGZIP(), []int{3}
}

func (x *GetIntBlockCanonicalRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// GetIntBlockCanonicalResponse is the response message for getting a single int_block_canonical record
type GetIntBlockCanonicalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *IntBlockCanonical `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetIntBlockCanonicalResponse) Reset() {
	*x = GetIntBlockCanonicalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_canonical_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntBlockCanonicalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntBlockCanonicalResponse) ProtoMessage() {}

func (x *GetIntBlockCanonicalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_canonical_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntBlockCanonicalResponse.ProtoReflect.Descriptor instead.
func (*GetIntBlockCanonicalResponse) Descriptor() ([]byte, []int) {
	return file_int_block_canonical_proto_rawDescGZIP(), []int{4}
}

func (x *GetIntBlockCanonicalResponse) GetItem() *IntBlockCanonical {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_int_block_canonical_proto protoreflect.FileDescriptor

var file_int_block_canonical_proto_rawDesc = []byte{
	0x0a, 0x19, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe,
	0x0e, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x1c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x22, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x62,
	0x0a, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x66, 0x0a, 0x21, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x12, 0x5b, 0x0a, 0x1b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x6d, 0x0a, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x21, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x78, 0x0a, 0x2a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x26, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x8d, 0x01, 0x0a, 0x35, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x30, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22,
	0xc5, 0x11, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x1c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x19, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x14, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x16, 0x65, 0x74,
	0x68, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x65,
	0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x52, 0x0a, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x19, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x1e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x1c, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x22, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x5f,
	0x0a, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x63, 0x0a, 0x21, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x67, 0x61, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f,
	0x62, 0x47, 0x61, 0x73, 0x12, 0x58, 0x0a, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x56,
	0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x17, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x19, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x54, 0x0a, 0x1d, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x6a, 0x0a, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x21, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x2a,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x26, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x35, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x30,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x69, 0x6e, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x11,
	0x69, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x32, 0xb5, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_int_block_canonical_proto_rawDescOnce sync.Once
	file_int_block_canonical_proto_rawDescData = file_int_block_canonical_proto_rawDesc
)

func file_int_block_canonical_proto_rawDescGZIP() []byte {
	file_int_block_canonical_proto_rawDescOnce.Do(func() {
		file_int_block_canonical_proto_rawDescData = protoimpl.X.CompressGZIP(file_int_block_canonical_proto_rawDescData)
	})
	return file_int_block_canonical_proto_rawDescData
}

var file_int_block_canonical_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_int_block_canonical_proto_goTypes = []any{
	(*IntBlockCanonical)(nil),             // 0: cbt.IntBlockCanonical
	(*ListIntBlockCanonicalRequest)(nil),  // 1: cbt.ListIntBlockCanonicalRequest
	(*ListIntBlockCanonicalResponse)(nil), // 2: cbt.ListIntBlockCanonicalResponse
	(*GetIntBlockCanonicalRequest)(nil),   // 3: cbt.GetIntBlockCanonicalRequest
	(*GetIntBlockCanonicalResponse)(nil),  // 4: cbt.GetIntBlockCanonicalResponse
	(*wrapperspb.UInt32Value)(nil),        // 5: google.protobuf.UInt32Value
	(*wrapperspb.StringValue)(nil),        // 6: google.protobuf.StringValue
	(*wrapperspb.UInt64Value)(nil),        // 7: google.protobuf.UInt64Value
	(*UInt32Filter)(nil),                  // 8: cbt.UInt32Filter
	(*StringFilter)(nil),                  // 9: cbt.StringFilter
	(*NullableUInt32Filter)(nil),          // 10: cbt.NullableUInt32Filter
	(*NullableStringFilter)(nil),          // 11: cbt.NullableStringFilter
	(*NullableUInt64Filter)(nil),          // 12: cbt.NullableUInt64Filter
}
var file_int_block_canonical_proto_depIdxs = []int32{
	5,  // 0: cbt.IntBlockCanonical.block_total_bytes:type_name -> google.protobuf.UInt32Value
	5,  // 1: cbt.IntBlockCanonical.block_total_bytes_compressed:type_name -> google.protobuf.UInt32Value
	6,  // 2: cbt.IntBlockCanonical.execution_payload_base_fee_per_gas:type_name -> google.protobuf.StringValue
	7,  // 3: cbt.IntBlockCanonical.execution_payload_blob_gas_used:type_name -> google.protobuf.UInt64Value
	7,  // 4: cbt.IntBlockCanonical.execution_payload_excess_blob_gas:type_name -> google.protobuf.UInt64Value
	7,  // 5: cbt.IntBlockCanonical.execution_payload_gas_limit:type_name -> google.protobuf.UInt64Value
	7,  // 6: cbt.IntBlockCanonical.execution_payload_gas_used:type_name -> google.protobuf.UInt64Value
	5,  // 7: cbt.IntBlockCanonical.execution_payload_transactions_count:type_name -> google.protobuf.UInt32Value
	5,  // 8: cbt.IntBlockCanonical.execution_payload_transactions_total_bytes:type_name -> google.protobuf.UInt32Value
	5,  // 9: cbt.IntBlockCanonical.execution_payload_transactions_total_bytes_compressed:type_name -> google.protobuf.UInt32Value
	8,  // 10: cbt.ListIntBlockCanonicalRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	9,  // 11: cbt.ListIntBlockCanonicalRequest.block_root:type_name -> cbt.StringFilter
	8,  // 12: cbt.ListIntBlockCanonicalRequest.updated_date_time:type_name -> cbt.UInt32Filter
	8,  // 13: cbt.ListIntBlockCanonicalRequest.slot:type_name -> cbt.UInt32Filter
	8,  // 14: cbt.ListIntBlockCanonicalRequest.epoch:type_name -> cbt.UInt32Filter
	8,  // 15: cbt.ListIntBlockCanonicalRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	9,  // 16: cbt.ListIntBlockCanonicalRequest.block_version:type_name -> cbt.StringFilter
	10, // 17: cbt.ListIntBlockCanonicalRequest.block_total_bytes:type_name -> cbt.NullableUInt32Filter
	10, // 18: cbt.ListIntBlockCanonicalRequest.block_total_bytes_compressed:type_name -> cbt.NullableUInt32Filter
	9,  // 19: cbt.ListIntBlockCanonicalRequest.parent_root:type_name -> cbt.StringFilter
	9,  // 20: cbt.ListIntBlockCanonicalRequest.state_root:type_name -> cbt.StringFilter
	8,  // 21: cbt.ListIntBlockCanonicalRequest.proposer_index:type_name -> cbt.UInt32Filter
	9,  // 22: cbt.ListIntBlockCanonicalRequest.eth1_data_block_hash:type_name -> cbt.StringFilter
	9,  // 23: cbt.ListIntBlockCanonicalRequest.eth1_data_deposit_root:type_name -> cbt.StringFilter
	9,  // 24: cbt.ListIntBlockCanonicalRequest.execution_payload_block_hash:type_name -> cbt.StringFilter
	8,  // 25: cbt.ListIntBlockCanonicalRequest.execution_payload_block_number:type_name -> cbt.UInt32Filter
	9,  // 26: cbt.ListIntBlockCanonicalRequest.execution_payload_fee_recipient:type_name -> cbt.StringFilter
	11, // 27: cbt.ListIntBlockCanonicalRequest.execution_payload_base_fee_per_gas:type_name -> cbt.NullableStringFilter
	12, // 28: cbt.ListIntBlockCanonicalRequest.execution_payload_blob_gas_used:type_name -> cbt.NullableUInt64Filter
	12, // 29: cbt.ListIntBlockCanonicalRequest.execution_payload_excess_blob_gas:type_name -> cbt.NullableUInt64Filter
	12, // 30: cbt.ListIntBlockCanonicalRequest.execution_payload_gas_limit:type_name -> cbt.NullableUInt64Filter
	12, // 31: cbt.ListIntBlockCanonicalRequest.execution_payload_gas_used:type_name -> cbt.NullableUInt64Filter
	9,  // 32: cbt.ListIntBlockCanonicalRequest.execution_payload_state_root:type_name -> cbt.StringFilter
	9,  // 33: cbt.ListIntBlockCanonicalRequest.execution_payload_parent_hash:type_name -> cbt.StringFilter
	10, // 34: cbt.ListIntBlockCanonicalRequest.execution_payload_transactions_count:type_name -> cbt.NullableUInt32Filter
	10, // 35: cbt.ListIntBlockCanonicalRequest.execution_payload_transactions_total_bytes:type_name -> cbt.NullableUInt32Filter
	10, // 36: cbt.ListIntBlockCanonicalRequest.execution_payload_transactions_total_bytes_compressed:type_name -> cbt.NullableUInt32Filter
	0,  // 37: cbt.ListIntBlockCanonicalResponse.int_block_canonical:type_name -> cbt.IntBlockCanonical
	0,  // 38: cbt.GetIntBlockCanonicalResponse.item:type_name -> cbt.IntBlockCanonical
	1,  // 39: cbt.IntBlockCanonicalService.List:input_type -> cbt.ListIntBlockCanonicalRequest
	3,  // 40: cbt.IntBlockCanonicalService.Get:input_type -> cbt.GetIntBlockCanonicalRequest
	2,  // 41: cbt.IntBlockCanonicalService.List:output_type -> cbt.ListIntBlockCanonicalResponse
	4,  // 42: cbt.IntBlockCanonicalService.Get:output_type -> cbt.GetIntBlockCanonicalResponse
	41, // [41:43] is the sub-list for method output_type
	39, // [39:41] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_int_block_canonical_proto_init() }
func file_int_block_canonical_proto_init() {
	if File_int_block_canonical_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_int_block_canonical_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IntBlockCanonical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_canonical_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListIntBlockCanonicalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_canonical_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListIntBlockCanonicalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_canonical_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetIntBlockCanonicalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_canonical_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetIntBlockCanonicalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_int_block_canonical_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_int_block_canonical_proto_goTypes,
		DependencyIndexes: file_int_block_canonical_proto_depIdxs,
		MessageInfos:      file_int_block_canonical_proto_msgTypes,
	}.Build()
	File_int_block_canonical_proto = out.File
	file_int_block_canonical_proto_rawDesc = nil
	file_int_block_canonical_proto_goTypes = nil
	file_int_block_canonical_proto_depIdxs = nil
}
