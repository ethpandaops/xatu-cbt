// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: int_block_first_seen_by_node.proto

package clickhouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IntBlockFirstSeenByNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Source of the event
	Source string `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	// The slot number for which the proposer duty is assigned
	Slot uint32 `protobuf:"varint,13,opt,name=slot,proto3" json:"slot,omitempty"`
	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,14,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// The epoch number containing the slot
	Epoch uint32 `protobuf:"varint,15,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The wall clock time when the epoch started
	EpochStartDateTime uint32 `protobuf:"varint,16,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// The time from slot start for the client to see the block
	SeenSlotStartDiff uint32 `protobuf:"varint,17,opt,name=seen_slot_start_diff,json=seenSlotStartDiff,proto3" json:"seen_slot_start_diff,omitempty"`
	// The beacon block root hash
	BlockRoot string `protobuf:"bytes,18,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// Username of the node
	Username string `protobuf:"bytes,19,opt,name=username,proto3" json:"username,omitempty"`
	// ID of the node
	NodeId string `protobuf:"bytes,20,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified"
	Classification string `protobuf:"bytes,21,opt,name=classification,proto3" json:"classification,omitempty"`
	// Name of the client
	MetaClientName string `protobuf:"bytes,22,opt,name=meta_client_name,json=metaClientName,proto3" json:"meta_client_name,omitempty"`
	// Version of the client
	MetaClientVersion string `protobuf:"bytes,23,opt,name=meta_client_version,json=metaClientVersion,proto3" json:"meta_client_version,omitempty"`
	// Implementation of the client
	MetaClientImplementation string `protobuf:"bytes,24,opt,name=meta_client_implementation,json=metaClientImplementation,proto3" json:"meta_client_implementation,omitempty"`
	// City of the client
	MetaClientGeoCity string `protobuf:"bytes,25,opt,name=meta_client_geo_city,json=metaClientGeoCity,proto3" json:"meta_client_geo_city,omitempty"`
	// Country of the client
	MetaClientGeoCountry string `protobuf:"bytes,26,opt,name=meta_client_geo_country,json=metaClientGeoCountry,proto3" json:"meta_client_geo_country,omitempty"`
	// Country code of the client
	MetaClientGeoCountryCode string `protobuf:"bytes,27,opt,name=meta_client_geo_country_code,json=metaClientGeoCountryCode,proto3" json:"meta_client_geo_country_code,omitempty"`
	// Continent code of the client
	MetaClientGeoContinentCode string `protobuf:"bytes,28,opt,name=meta_client_geo_continent_code,json=metaClientGeoContinentCode,proto3" json:"meta_client_geo_continent_code,omitempty"`
	// Ethereum consensus client version
	MetaConsensusVersion string `protobuf:"bytes,29,opt,name=meta_consensus_version,json=metaConsensusVersion,proto3" json:"meta_consensus_version,omitempty"`
	// Ethereum consensus client implementation
	MetaConsensusImplementation string `protobuf:"bytes,30,opt,name=meta_consensus_implementation,json=metaConsensusImplementation,proto3" json:"meta_consensus_implementation,omitempty"`
}

func (x *IntBlockFirstSeenByNode) Reset() {
	*x = IntBlockFirstSeenByNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_first_seen_by_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntBlockFirstSeenByNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntBlockFirstSeenByNode) ProtoMessage() {}

func (x *IntBlockFirstSeenByNode) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_first_seen_by_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntBlockFirstSeenByNode.ProtoReflect.Descriptor instead.
func (*IntBlockFirstSeenByNode) Descriptor() ([]byte, []int) {
	return file_int_block_first_seen_by_node_proto_rawDescGZIP(), []int{0}
}

func (x *IntBlockFirstSeenByNode) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *IntBlockFirstSeenByNode) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *IntBlockFirstSeenByNode) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *IntBlockFirstSeenByNode) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *IntBlockFirstSeenByNode) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *IntBlockFirstSeenByNode) GetSeenSlotStartDiff() uint32 {
	if x != nil {
		return x.SeenSlotStartDiff
	}
	return 0
}

func (x *IntBlockFirstSeenByNode) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetMetaClientName() string {
	if x != nil {
		return x.MetaClientName
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetMetaClientVersion() string {
	if x != nil {
		return x.MetaClientVersion
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetMetaClientImplementation() string {
	if x != nil {
		return x.MetaClientImplementation
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetMetaClientGeoCity() string {
	if x != nil {
		return x.MetaClientGeoCity
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetMetaClientGeoCountry() string {
	if x != nil {
		return x.MetaClientGeoCountry
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetMetaClientGeoCountryCode() string {
	if x != nil {
		return x.MetaClientGeoCountryCode
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetMetaClientGeoContinentCode() string {
	if x != nil {
		return x.MetaClientGeoContinentCode
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetMetaConsensusVersion() string {
	if x != nil {
		return x.MetaConsensusVersion
	}
	return ""
}

func (x *IntBlockFirstSeenByNode) GetMetaConsensusImplementation() string {
	if x != nil {
		return x.MetaConsensusImplementation
	}
	return ""
}

// ListIntBlockFirstSeenByNodeRequest is the request message for listing int_block_first_seen_by_node records
type ListIntBlockFirstSeenByNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time (PRIMARY KEY - required)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by meta_client_name (ORDER BY column 2 - optional)
	MetaClientName *StringFilter `protobuf:"bytes,2,opt,name=meta_client_name,json=metaClientName,proto3" json:"meta_client_name,omitempty"`
	// Filter by updated_date_time (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,3,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by source (optional)
	Source *StringFilter `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Filter by slot (optional)
	Slot *UInt32Filter `protobuf:"bytes,5,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by epoch (optional)
	Epoch *UInt32Filter `protobuf:"bytes,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by epoch_start_date_time (optional)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,7,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by seen_slot_start_diff (optional)
	SeenSlotStartDiff *UInt32Filter `protobuf:"bytes,8,opt,name=seen_slot_start_diff,json=seenSlotStartDiff,proto3" json:"seen_slot_start_diff,omitempty"`
	// Filter by block_root (optional)
	BlockRoot *StringFilter `protobuf:"bytes,9,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// Filter by username (optional)
	Username *StringFilter `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	// Filter by node_id (optional)
	NodeId *StringFilter `protobuf:"bytes,11,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Filter by classification (optional)
	Classification *StringFilter `protobuf:"bytes,12,opt,name=classification,proto3" json:"classification,omitempty"`
	// Filter by meta_client_version (optional)
	MetaClientVersion *StringFilter `protobuf:"bytes,13,opt,name=meta_client_version,json=metaClientVersion,proto3" json:"meta_client_version,omitempty"`
	// Filter by meta_client_implementation (optional)
	MetaClientImplementation *StringFilter `protobuf:"bytes,14,opt,name=meta_client_implementation,json=metaClientImplementation,proto3" json:"meta_client_implementation,omitempty"`
	// Filter by meta_client_geo_city (optional)
	MetaClientGeoCity *StringFilter `protobuf:"bytes,15,opt,name=meta_client_geo_city,json=metaClientGeoCity,proto3" json:"meta_client_geo_city,omitempty"`
	// Filter by meta_client_geo_country (optional)
	MetaClientGeoCountry *StringFilter `protobuf:"bytes,16,opt,name=meta_client_geo_country,json=metaClientGeoCountry,proto3" json:"meta_client_geo_country,omitempty"`
	// Filter by meta_client_geo_country_code (optional)
	MetaClientGeoCountryCode *StringFilter `protobuf:"bytes,17,opt,name=meta_client_geo_country_code,json=metaClientGeoCountryCode,proto3" json:"meta_client_geo_country_code,omitempty"`
	// Filter by meta_client_geo_continent_code (optional)
	MetaClientGeoContinentCode *StringFilter `protobuf:"bytes,18,opt,name=meta_client_geo_continent_code,json=metaClientGeoContinentCode,proto3" json:"meta_client_geo_continent_code,omitempty"`
	// Filter by meta_consensus_version (optional)
	MetaConsensusVersion *StringFilter `protobuf:"bytes,19,opt,name=meta_consensus_version,json=metaConsensusVersion,proto3" json:"meta_consensus_version,omitempty"`
	// Filter by meta_consensus_implementation (optional)
	MetaConsensusImplementation *StringFilter `protobuf:"bytes,20,opt,name=meta_consensus_implementation,json=metaConsensusImplementation,proto3" json:"meta_consensus_implementation,omitempty"`
	// The maximum number of int_block_first_seen_by_node to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,21,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListIntBlockFirstSeenByNode` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,22,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,23,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListIntBlockFirstSeenByNodeRequest) Reset() {
	*x = ListIntBlockFirstSeenByNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_first_seen_by_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIntBlockFirstSeenByNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntBlockFirstSeenByNodeRequest) ProtoMessage() {}

func (x *ListIntBlockFirstSeenByNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_first_seen_by_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntBlockFirstSeenByNodeRequest.ProtoReflect.Descriptor instead.
func (*ListIntBlockFirstSeenByNodeRequest) Descriptor() ([]byte, []int) {
	return file_int_block_first_seen_by_node_proto_rawDescGZIP(), []int{1}
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetMetaClientName() *StringFilter {
	if x != nil {
		return x.MetaClientName
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetSource() *StringFilter {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetSeenSlotStartDiff() *UInt32Filter {
	if x != nil {
		return x.SeenSlotStartDiff
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetBlockRoot() *StringFilter {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetUsername() *StringFilter {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetNodeId() *StringFilter {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetClassification() *StringFilter {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetMetaClientVersion() *StringFilter {
	if x != nil {
		return x.MetaClientVersion
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetMetaClientImplementation() *StringFilter {
	if x != nil {
		return x.MetaClientImplementation
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetMetaClientGeoCity() *StringFilter {
	if x != nil {
		return x.MetaClientGeoCity
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetMetaClientGeoCountry() *StringFilter {
	if x != nil {
		return x.MetaClientGeoCountry
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetMetaClientGeoCountryCode() *StringFilter {
	if x != nil {
		return x.MetaClientGeoCountryCode
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetMetaClientGeoContinentCode() *StringFilter {
	if x != nil {
		return x.MetaClientGeoContinentCode
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetMetaConsensusVersion() *StringFilter {
	if x != nil {
		return x.MetaConsensusVersion
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetMetaConsensusImplementation() *StringFilter {
	if x != nil {
		return x.MetaConsensusImplementation
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListIntBlockFirstSeenByNodeRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListIntBlockFirstSeenByNodeResponse is the response message for listing int_block_first_seen_by_node records
type ListIntBlockFirstSeenByNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of int_block_first_seen_by_node.
	IntBlockFirstSeenByNode []*IntBlockFirstSeenByNode `protobuf:"bytes,1,rep,name=int_block_first_seen_by_node,json=intBlockFirstSeenByNode,proto3" json:"int_block_first_seen_by_node,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListIntBlockFirstSeenByNodeResponse) Reset() {
	*x = ListIntBlockFirstSeenByNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_first_seen_by_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIntBlockFirstSeenByNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntBlockFirstSeenByNodeResponse) ProtoMessage() {}

func (x *ListIntBlockFirstSeenByNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_first_seen_by_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntBlockFirstSeenByNodeResponse.ProtoReflect.Descriptor instead.
func (*ListIntBlockFirstSeenByNodeResponse) Descriptor() ([]byte, []int) {
	return file_int_block_first_seen_by_node_proto_rawDescGZIP(), []int{2}
}

func (x *ListIntBlockFirstSeenByNodeResponse) GetIntBlockFirstSeenByNode() []*IntBlockFirstSeenByNode {
	if x != nil {
		return x.IntBlockFirstSeenByNode
	}
	return nil
}

func (x *ListIntBlockFirstSeenByNodeResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetIntBlockFirstSeenByNodeRequest is the request message for getting a single int_block_first_seen_by_node record by primary key
type GetIntBlockFirstSeenByNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wall clock time when the slot started
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetIntBlockFirstSeenByNodeRequest) Reset() {
	*x = GetIntBlockFirstSeenByNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_first_seen_by_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntBlockFirstSeenByNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntBlockFirstSeenByNodeRequest) ProtoMessage() {}

func (x *GetIntBlockFirstSeenByNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_first_seen_by_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntBlockFirstSeenByNodeRequest.ProtoReflect.Descriptor instead.
func (*GetIntBlockFirstSeenByNodeRequest) Descriptor() ([]byte, []int) {
	return file_int_block_first_seen_by_node_proto_rawDescGZIP(), []int{3}
}

func (x *GetIntBlockFirstSeenByNodeRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// GetIntBlockFirstSeenByNodeResponse is the response message for getting a single int_block_first_seen_by_node record
type GetIntBlockFirstSeenByNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *IntBlockFirstSeenByNode `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetIntBlockFirstSeenByNodeResponse) Reset() {
	*x = GetIntBlockFirstSeenByNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_first_seen_by_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntBlockFirstSeenByNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntBlockFirstSeenByNodeResponse) ProtoMessage() {}

func (x *GetIntBlockFirstSeenByNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_first_seen_by_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntBlockFirstSeenByNodeResponse.ProtoReflect.Descriptor instead.
func (*GetIntBlockFirstSeenByNodeResponse) Descriptor() ([]byte, []int) {
	return file_int_block_first_seen_by_node_proto_rawDescGZIP(), []int{4}
}

func (x *GetIntBlockFirstSeenByNodeResponse) GetItem() *IntBlockFirstSeenByNode {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_int_block_first_seen_by_node_proto protoreflect.FileDescriptor

var file_int_block_first_seen_by_node_proto_rawDesc = []byte{
	0x0a, 0x22, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x07, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x65, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x65, 0x74, 0x61,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf4, 0x0a, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x44, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x73, 0x65, 0x65, 0x6e, 0x53,
	0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x30, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2d,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x18,
	0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x17,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x1c, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x18, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x1e, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x1a, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x47, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x1d, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x1b, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xaa, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x32, 0xd3, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f,
	0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_int_block_first_seen_by_node_proto_rawDescOnce sync.Once
	file_int_block_first_seen_by_node_proto_rawDescData = file_int_block_first_seen_by_node_proto_rawDesc
)

func file_int_block_first_seen_by_node_proto_rawDescGZIP() []byte {
	file_int_block_first_seen_by_node_proto_rawDescOnce.Do(func() {
		file_int_block_first_seen_by_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_int_block_first_seen_by_node_proto_rawDescData)
	})
	return file_int_block_first_seen_by_node_proto_rawDescData
}

var file_int_block_first_seen_by_node_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_int_block_first_seen_by_node_proto_goTypes = []any{
	(*IntBlockFirstSeenByNode)(nil),             // 0: cbt.IntBlockFirstSeenByNode
	(*ListIntBlockFirstSeenByNodeRequest)(nil),  // 1: cbt.ListIntBlockFirstSeenByNodeRequest
	(*ListIntBlockFirstSeenByNodeResponse)(nil), // 2: cbt.ListIntBlockFirstSeenByNodeResponse
	(*GetIntBlockFirstSeenByNodeRequest)(nil),   // 3: cbt.GetIntBlockFirstSeenByNodeRequest
	(*GetIntBlockFirstSeenByNodeResponse)(nil),  // 4: cbt.GetIntBlockFirstSeenByNodeResponse
	(*UInt32Filter)(nil),                        // 5: cbt.UInt32Filter
	(*StringFilter)(nil),                        // 6: cbt.StringFilter
}
var file_int_block_first_seen_by_node_proto_depIdxs = []int32{
	5,  // 0: cbt.ListIntBlockFirstSeenByNodeRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	6,  // 1: cbt.ListIntBlockFirstSeenByNodeRequest.meta_client_name:type_name -> cbt.StringFilter
	5,  // 2: cbt.ListIntBlockFirstSeenByNodeRequest.updated_date_time:type_name -> cbt.UInt32Filter
	6,  // 3: cbt.ListIntBlockFirstSeenByNodeRequest.source:type_name -> cbt.StringFilter
	5,  // 4: cbt.ListIntBlockFirstSeenByNodeRequest.slot:type_name -> cbt.UInt32Filter
	5,  // 5: cbt.ListIntBlockFirstSeenByNodeRequest.epoch:type_name -> cbt.UInt32Filter
	5,  // 6: cbt.ListIntBlockFirstSeenByNodeRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	5,  // 7: cbt.ListIntBlockFirstSeenByNodeRequest.seen_slot_start_diff:type_name -> cbt.UInt32Filter
	6,  // 8: cbt.ListIntBlockFirstSeenByNodeRequest.block_root:type_name -> cbt.StringFilter
	6,  // 9: cbt.ListIntBlockFirstSeenByNodeRequest.username:type_name -> cbt.StringFilter
	6,  // 10: cbt.ListIntBlockFirstSeenByNodeRequest.node_id:type_name -> cbt.StringFilter
	6,  // 11: cbt.ListIntBlockFirstSeenByNodeRequest.classification:type_name -> cbt.StringFilter
	6,  // 12: cbt.ListIntBlockFirstSeenByNodeRequest.meta_client_version:type_name -> cbt.StringFilter
	6,  // 13: cbt.ListIntBlockFirstSeenByNodeRequest.meta_client_implementation:type_name -> cbt.StringFilter
	6,  // 14: cbt.ListIntBlockFirstSeenByNodeRequest.meta_client_geo_city:type_name -> cbt.StringFilter
	6,  // 15: cbt.ListIntBlockFirstSeenByNodeRequest.meta_client_geo_country:type_name -> cbt.StringFilter
	6,  // 16: cbt.ListIntBlockFirstSeenByNodeRequest.meta_client_geo_country_code:type_name -> cbt.StringFilter
	6,  // 17: cbt.ListIntBlockFirstSeenByNodeRequest.meta_client_geo_continent_code:type_name -> cbt.StringFilter
	6,  // 18: cbt.ListIntBlockFirstSeenByNodeRequest.meta_consensus_version:type_name -> cbt.StringFilter
	6,  // 19: cbt.ListIntBlockFirstSeenByNodeRequest.meta_consensus_implementation:type_name -> cbt.StringFilter
	0,  // 20: cbt.ListIntBlockFirstSeenByNodeResponse.int_block_first_seen_by_node:type_name -> cbt.IntBlockFirstSeenByNode
	0,  // 21: cbt.GetIntBlockFirstSeenByNodeResponse.item:type_name -> cbt.IntBlockFirstSeenByNode
	1,  // 22: cbt.IntBlockFirstSeenByNodeService.List:input_type -> cbt.ListIntBlockFirstSeenByNodeRequest
	3,  // 23: cbt.IntBlockFirstSeenByNodeService.Get:input_type -> cbt.GetIntBlockFirstSeenByNodeRequest
	2,  // 24: cbt.IntBlockFirstSeenByNodeService.List:output_type -> cbt.ListIntBlockFirstSeenByNodeResponse
	4,  // 25: cbt.IntBlockFirstSeenByNodeService.Get:output_type -> cbt.GetIntBlockFirstSeenByNodeResponse
	24, // [24:26] is the sub-list for method output_type
	22, // [22:24] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_int_block_first_seen_by_node_proto_init() }
func file_int_block_first_seen_by_node_proto_init() {
	if File_int_block_first_seen_by_node_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_int_block_first_seen_by_node_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IntBlockFirstSeenByNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_first_seen_by_node_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListIntBlockFirstSeenByNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_first_seen_by_node_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListIntBlockFirstSeenByNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_first_seen_by_node_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetIntBlockFirstSeenByNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_first_seen_by_node_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetIntBlockFirstSeenByNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_int_block_first_seen_by_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_int_block_first_seen_by_node_proto_goTypes,
		DependencyIndexes: file_int_block_first_seen_by_node_proto_depIdxs,
		MessageInfos:      file_int_block_first_seen_by_node_proto_msgTypes,
	}.Build()
	File_int_block_first_seen_by_node_proto = out.File
	file_int_block_first_seen_by_node_proto_rawDesc = nil
	file_int_block_first_seen_by_node_proto_goTypes = nil
	file_int_block_first_seen_by_node_proto_depIdxs = nil
}
