syntax = "proto3";

package cbt;

import "tagger/tagger.proto";
import "common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// MEV relay proposer payload delivered for a block on the finalized chain

message IntBlockMevCanonical {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11 [(tagger.tags) = "ch:\"updated_date_time\""];
  // Slot number within the block proposer payload
  uint32 slot = 12 [(tagger.tags) = "ch:\"slot\""];
  // The start time for the slot that the proposer payload is for
  uint32 slot_start_date_time = 13 [(tagger.tags) = "ch:\"slot_start_date_time\""];
  // Epoch number derived from the slot that the proposer payload is for
  uint32 epoch = 14 [(tagger.tags) = "ch:\"epoch\""];
  // The start time for the epoch that the proposer payload is for
  uint32 epoch_start_date_time = 15 [(tagger.tags) = "ch:\"epoch_start_date_time\""];
  // The root hash of the beacon block
  string block_root = 16 [(tagger.tags) = "ch:\"block_root\""];
  // The earliest timestamp of the accepted bid in milliseconds
  google.protobuf.UInt64Value earliest_bid_date_time = 17 [(tagger.tags) = "ch:\"earliest_bid_date_time\""];
  // The relay names that delivered the proposer payload
  repeated string relay_names = 18 [(tagger.tags) = "ch:\"relay_names\""];
  // The parent hash of the proposer payload
  string parent_hash = 19 [(tagger.tags) = "ch:\"parent_hash\""];
  // The block number of the proposer payload
  uint64 block_number = 20 [(tagger.tags) = "ch:\"block_number\""];
  // The block hash of the proposer payload
  string block_hash = 21 [(tagger.tags) = "ch:\"block_hash\""];
  // The builder pubkey of the proposer payload
  string builder_pubkey = 22 [(tagger.tags) = "ch:\"builder_pubkey\""];
  // The proposer pubkey of the proposer payload
  string proposer_pubkey = 23 [(tagger.tags) = "ch:\"proposer_pubkey\""];
  // The proposer fee recipient of the proposer payload
  string proposer_fee_recipient = 24 [(tagger.tags) = "ch:\"proposer_fee_recipient\""];
  // The gas limit of the proposer payload
  uint64 gas_limit = 25 [(tagger.tags) = "ch:\"gas_limit\""];
  // The gas used of the proposer payload
  uint64 gas_used = 26 [(tagger.tags) = "ch:\"gas_used\""];
  // The transaction value in wei
  google.protobuf.StringValue value = 27 [(tagger.tags) = "ch:\"value\""];
  // The number of transactions in the proposer payload
  uint32 transaction_count = 28 [(tagger.tags) = "ch:\"transaction_count\""];
}

// Request for listing int_block_mev_canonical records
message ListIntBlockMevCanonicalRequest {
  // Filter by slot_start_date_time - The start time for the slot that the proposer payload is for (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by block_root - The root hash of the beacon block (ORDER BY column 2 - optional)
  StringFilter block_root = 2;

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 3;
  // Filter by slot - Slot number within the block proposer payload (optional)
  UInt32Filter slot = 4;
  // Filter by epoch - Epoch number derived from the slot that the proposer payload is for (optional)
  UInt32Filter epoch = 5;
  // Filter by epoch_start_date_time - The start time for the epoch that the proposer payload is for (optional)
  UInt32Filter epoch_start_date_time = 6;
  // Filter by earliest_bid_date_time - The earliest timestamp of the accepted bid in milliseconds (optional)
  NullableUInt64Filter earliest_bid_date_time = 7;
  // Filter by relay_names - The relay names that delivered the proposer payload (optional)
  repeated string relay_names = 8;
  // Filter by parent_hash - The parent hash of the proposer payload (optional)
  StringFilter parent_hash = 9;
  // Filter by block_number - The block number of the proposer payload (optional)
  UInt64Filter block_number = 10;
  // Filter by block_hash - The block hash of the proposer payload (optional)
  StringFilter block_hash = 11;
  // Filter by builder_pubkey - The builder pubkey of the proposer payload (optional)
  StringFilter builder_pubkey = 12;
  // Filter by proposer_pubkey - The proposer pubkey of the proposer payload (optional)
  StringFilter proposer_pubkey = 13;
  // Filter by proposer_fee_recipient - The proposer fee recipient of the proposer payload (optional)
  StringFilter proposer_fee_recipient = 14;
  // Filter by gas_limit - The gas limit of the proposer payload (optional)
  UInt64Filter gas_limit = 15;
  // Filter by gas_used - The gas used of the proposer payload (optional)
  UInt64Filter gas_used = 16;
  // Filter by value - The transaction value in wei (optional)
  NullableStringFilter value = 17;
  // Filter by transaction_count - The number of transactions in the proposer payload (optional)
  UInt32Filter transaction_count = 18;

  // The maximum number of int_block_mev_canonical to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 19;
  // A page token, received from a previous `ListIntBlockMevCanonical` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 20;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 21;
}

// Response for listing int_block_mev_canonical records
message ListIntBlockMevCanonicalResponse {
  // The list of int_block_mev_canonical.
  repeated IntBlockMevCanonical int_block_mev_canonical = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single int_block_mev_canonical record by primary key
message GetIntBlockMevCanonicalRequest {
  // The start time for the slot that the proposer payload is for
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// Response for getting a single int_block_mev_canonical record
message GetIntBlockMevCanonicalResponse {
  IntBlockMevCanonical item = 1;
}

// Query int_block_mev_canonical data
service IntBlockMevCanonicalService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListIntBlockMevCanonicalRequest) returns (ListIntBlockMevCanonicalResponse);
  // Get record | Retrieve a single record by primary key
  rpc Get(GetIntBlockMevCanonicalRequest) returns (GetIntBlockMevCanonicalResponse);
}
