// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: int_block_mev_head.proto

package clickhouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IntBlockMevHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the record was last updated
	UpdatedDateTime uint32 `protobuf:"varint,11,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Slot number within the block proposer payload
	Slot uint32 `protobuf:"varint,12,opt,name=slot,proto3" json:"slot,omitempty"`
	// The start time for the slot that the proposer payload is for
	SlotStartDateTime uint32 `protobuf:"varint,13,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Epoch number derived from the slot that the proposer payload is for
	Epoch uint32 `protobuf:"varint,14,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The start time for the epoch that the proposer payload is for
	EpochStartDateTime uint32 `protobuf:"varint,15,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// The root hash of the beacon block
	BlockRoot string `protobuf:"bytes,16,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// The earliest timestamp of the accepted bid in milliseconds
	EarliestBidDateTime *wrapperspb.UInt64Value `protobuf:"bytes,17,opt,name=earliest_bid_date_time,json=earliestBidDateTime,proto3" json:"earliest_bid_date_time,omitempty"`
	// The relay names that delivered the proposer payload
	RelayNames []string `protobuf:"bytes,18,rep,name=relay_names,json=relayNames,proto3" json:"relay_names,omitempty"`
	// The parent hash of the proposer payload
	ParentHash string `protobuf:"bytes,19,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// The block number of the proposer payload
	BlockNumber uint64 `protobuf:"varint,20,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// The block hash of the proposer payload
	BlockHash string `protobuf:"bytes,21,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The builder pubkey of the proposer payload
	BuilderPubkey string `protobuf:"bytes,22,opt,name=builder_pubkey,json=builderPubkey,proto3" json:"builder_pubkey,omitempty"`
	// The proposer pubkey of the proposer payload
	ProposerPubkey string `protobuf:"bytes,23,opt,name=proposer_pubkey,json=proposerPubkey,proto3" json:"proposer_pubkey,omitempty"`
	// The proposer fee recipient of the proposer payload
	ProposerFeeRecipient string `protobuf:"bytes,24,opt,name=proposer_fee_recipient,json=proposerFeeRecipient,proto3" json:"proposer_fee_recipient,omitempty"`
	// The gas limit of the proposer payload
	GasLimit uint64 `protobuf:"varint,25,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// The gas used of the proposer payload
	GasUsed uint64 `protobuf:"varint,26,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// The transaction value in wei
	Value *wrapperspb.StringValue `protobuf:"bytes,27,opt,name=value,proto3" json:"value,omitempty"`
	// The number of transactions in the proposer payload
	TransactionCount uint32 `protobuf:"varint,28,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
}

func (x *IntBlockMevHead) Reset() {
	*x = IntBlockMevHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_mev_head_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntBlockMevHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntBlockMevHead) ProtoMessage() {}

func (x *IntBlockMevHead) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_mev_head_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntBlockMevHead.ProtoReflect.Descriptor instead.
func (*IntBlockMevHead) Descriptor() ([]byte, []int) {
	return file_int_block_mev_head_proto_rawDescGZIP(), []int{0}
}

func (x *IntBlockMevHead) GetUpdatedDateTime() uint32 {
	if x != nil {
		return x.UpdatedDateTime
	}
	return 0
}

func (x *IntBlockMevHead) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *IntBlockMevHead) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

func (x *IntBlockMevHead) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *IntBlockMevHead) GetEpochStartDateTime() uint32 {
	if x != nil {
		return x.EpochStartDateTime
	}
	return 0
}

func (x *IntBlockMevHead) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *IntBlockMevHead) GetEarliestBidDateTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.EarliestBidDateTime
	}
	return nil
}

func (x *IntBlockMevHead) GetRelayNames() []string {
	if x != nil {
		return x.RelayNames
	}
	return nil
}

func (x *IntBlockMevHead) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *IntBlockMevHead) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *IntBlockMevHead) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *IntBlockMevHead) GetBuilderPubkey() string {
	if x != nil {
		return x.BuilderPubkey
	}
	return ""
}

func (x *IntBlockMevHead) GetProposerPubkey() string {
	if x != nil {
		return x.ProposerPubkey
	}
	return ""
}

func (x *IntBlockMevHead) GetProposerFeeRecipient() string {
	if x != nil {
		return x.ProposerFeeRecipient
	}
	return ""
}

func (x *IntBlockMevHead) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *IntBlockMevHead) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *IntBlockMevHead) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *IntBlockMevHead) GetTransactionCount() uint32 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

// ListIntBlockMevHeadRequest is the request message for listing int_block_mev_head records
type ListIntBlockMevHeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by slot_start_date_time (PRIMARY KEY - required)
	SlotStartDateTime *UInt32Filter `protobuf:"bytes,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	// Filter by block_root (ORDER BY column 2 - optional)
	BlockRoot *StringFilter `protobuf:"bytes,2,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// Filter by updated_date_time (optional)
	UpdatedDateTime *UInt32Filter `protobuf:"bytes,3,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	// Filter by slot (optional)
	Slot *UInt32Filter `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	// Filter by epoch (optional)
	Epoch *UInt32Filter `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Filter by epoch_start_date_time (optional)
	EpochStartDateTime *UInt32Filter `protobuf:"bytes,6,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	// Filter by earliest_bid_date_time (optional)
	EarliestBidDateTime *NullableUInt64Filter `protobuf:"bytes,7,opt,name=earliest_bid_date_time,json=earliestBidDateTime,proto3" json:"earliest_bid_date_time,omitempty"`
	// Filter by relay_names (optional)
	RelayNames []string `protobuf:"bytes,8,rep,name=relay_names,json=relayNames,proto3" json:"relay_names,omitempty"`
	// Filter by parent_hash (optional)
	ParentHash *StringFilter `protobuf:"bytes,9,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// Filter by block_number (optional)
	BlockNumber *UInt64Filter `protobuf:"bytes,10,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// Filter by block_hash (optional)
	BlockHash *StringFilter `protobuf:"bytes,11,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Filter by builder_pubkey (optional)
	BuilderPubkey *StringFilter `protobuf:"bytes,12,opt,name=builder_pubkey,json=builderPubkey,proto3" json:"builder_pubkey,omitempty"`
	// Filter by proposer_pubkey (optional)
	ProposerPubkey *StringFilter `protobuf:"bytes,13,opt,name=proposer_pubkey,json=proposerPubkey,proto3" json:"proposer_pubkey,omitempty"`
	// Filter by proposer_fee_recipient (optional)
	ProposerFeeRecipient *StringFilter `protobuf:"bytes,14,opt,name=proposer_fee_recipient,json=proposerFeeRecipient,proto3" json:"proposer_fee_recipient,omitempty"`
	// Filter by gas_limit (optional)
	GasLimit *UInt64Filter `protobuf:"bytes,15,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Filter by gas_used (optional)
	GasUsed *UInt64Filter `protobuf:"bytes,16,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Filter by value (optional)
	Value *NullableStringFilter `protobuf:"bytes,17,opt,name=value,proto3" json:"value,omitempty"`
	// Filter by transaction_count (optional)
	TransactionCount *UInt32Filter `protobuf:"bytes,18,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	// The maximum number of int_block_mev_head to return.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,19,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListIntBlockMevHead` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,20,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The order of results. Format: comma-separated list of fields.
	// Example: "foo,bar" or "foo desc,bar" for descending order on foo.
	// If unspecified, results will be returned in the default order.
	OrderBy string `protobuf:"bytes,21,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListIntBlockMevHeadRequest) Reset() {
	*x = ListIntBlockMevHeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_mev_head_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIntBlockMevHeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntBlockMevHeadRequest) ProtoMessage() {}

func (x *ListIntBlockMevHeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_mev_head_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntBlockMevHeadRequest.ProtoReflect.Descriptor instead.
func (*ListIntBlockMevHeadRequest) Descriptor() ([]byte, []int) {
	return file_int_block_mev_head_proto_rawDescGZIP(), []int{1}
}

func (x *ListIntBlockMevHeadRequest) GetSlotStartDateTime() *UInt32Filter {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetBlockRoot() *StringFilter {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetUpdatedDateTime() *UInt32Filter {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetSlot() *UInt32Filter {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetEpoch() *UInt32Filter {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetEpochStartDateTime() *UInt32Filter {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetEarliestBidDateTime() *NullableUInt64Filter {
	if x != nil {
		return x.EarliestBidDateTime
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetRelayNames() []string {
	if x != nil {
		return x.RelayNames
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetParentHash() *StringFilter {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetBlockNumber() *UInt64Filter {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetBlockHash() *StringFilter {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetBuilderPubkey() *StringFilter {
	if x != nil {
		return x.BuilderPubkey
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetProposerPubkey() *StringFilter {
	if x != nil {
		return x.ProposerPubkey
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetProposerFeeRecipient() *StringFilter {
	if x != nil {
		return x.ProposerFeeRecipient
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetGasLimit() *UInt64Filter {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetGasUsed() *UInt64Filter {
	if x != nil {
		return x.GasUsed
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetValue() *NullableStringFilter {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetTransactionCount() *UInt32Filter {
	if x != nil {
		return x.TransactionCount
	}
	return nil
}

func (x *ListIntBlockMevHeadRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIntBlockMevHeadRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListIntBlockMevHeadRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListIntBlockMevHeadResponse is the response message for listing int_block_mev_head records
type ListIntBlockMevHeadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of int_block_mev_head.
	IntBlockMevHead []*IntBlockMevHead `protobuf:"bytes,1,rep,name=int_block_mev_head,json=intBlockMevHead,proto3" json:"int_block_mev_head,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListIntBlockMevHeadResponse) Reset() {
	*x = ListIntBlockMevHeadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_mev_head_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIntBlockMevHeadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntBlockMevHeadResponse) ProtoMessage() {}

func (x *ListIntBlockMevHeadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_mev_head_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntBlockMevHeadResponse.ProtoReflect.Descriptor instead.
func (*ListIntBlockMevHeadResponse) Descriptor() ([]byte, []int) {
	return file_int_block_mev_head_proto_rawDescGZIP(), []int{2}
}

func (x *ListIntBlockMevHeadResponse) GetIntBlockMevHead() []*IntBlockMevHead {
	if x != nil {
		return x.IntBlockMevHead
	}
	return nil
}

func (x *ListIntBlockMevHeadResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetIntBlockMevHeadRequest is the request message for getting a single int_block_mev_head record by primary key
type GetIntBlockMevHeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time for the slot that the proposer payload is for
	SlotStartDateTime uint32 `protobuf:"varint,1,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"` // Primary key (required)
}

func (x *GetIntBlockMevHeadRequest) Reset() {
	*x = GetIntBlockMevHeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_mev_head_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntBlockMevHeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntBlockMevHeadRequest) ProtoMessage() {}

func (x *GetIntBlockMevHeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_mev_head_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntBlockMevHeadRequest.ProtoReflect.Descriptor instead.
func (*GetIntBlockMevHeadRequest) Descriptor() ([]byte, []int) {
	return file_int_block_mev_head_proto_rawDescGZIP(), []int{3}
}

func (x *GetIntBlockMevHeadRequest) GetSlotStartDateTime() uint32 {
	if x != nil {
		return x.SlotStartDateTime
	}
	return 0
}

// GetIntBlockMevHeadResponse is the response message for getting a single int_block_mev_head record
type GetIntBlockMevHeadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *IntBlockMevHead `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetIntBlockMevHeadResponse) Reset() {
	*x = GetIntBlockMevHeadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_int_block_mev_head_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntBlockMevHeadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntBlockMevHeadResponse) ProtoMessage() {}

func (x *GetIntBlockMevHeadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_int_block_mev_head_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntBlockMevHeadResponse.ProtoReflect.Descriptor instead.
func (*GetIntBlockMevHeadResponse) Descriptor() ([]byte, []int) {
	return file_int_block_mev_head_proto_rawDescGZIP(), []int{4}
}

func (x *GetIntBlockMevHeadResponse) GetItem() *IntBlockMevHead {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_int_block_mev_head_proto protoreflect.FileDescriptor

var file_int_block_mev_head_proto_rawDesc = []byte{
	0x0a, 0x18, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x76, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x62, 0x74, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x05,
	0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd9, 0x08, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x16, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x42,
	0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x34, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x67, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x88, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x76, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0f,
	0x69, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32, 0xab, 0x01,
	0x0a, 0x16, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_int_block_mev_head_proto_rawDescOnce sync.Once
	file_int_block_mev_head_proto_rawDescData = file_int_block_mev_head_proto_rawDesc
)

func file_int_block_mev_head_proto_rawDescGZIP() []byte {
	file_int_block_mev_head_proto_rawDescOnce.Do(func() {
		file_int_block_mev_head_proto_rawDescData = protoimpl.X.CompressGZIP(file_int_block_mev_head_proto_rawDescData)
	})
	return file_int_block_mev_head_proto_rawDescData
}

var file_int_block_mev_head_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_int_block_mev_head_proto_goTypes = []any{
	(*IntBlockMevHead)(nil),             // 0: cbt.IntBlockMevHead
	(*ListIntBlockMevHeadRequest)(nil),  // 1: cbt.ListIntBlockMevHeadRequest
	(*ListIntBlockMevHeadResponse)(nil), // 2: cbt.ListIntBlockMevHeadResponse
	(*GetIntBlockMevHeadRequest)(nil),   // 3: cbt.GetIntBlockMevHeadRequest
	(*GetIntBlockMevHeadResponse)(nil),  // 4: cbt.GetIntBlockMevHeadResponse
	(*wrapperspb.UInt64Value)(nil),      // 5: google.protobuf.UInt64Value
	(*wrapperspb.StringValue)(nil),      // 6: google.protobuf.StringValue
	(*UInt32Filter)(nil),                // 7: cbt.UInt32Filter
	(*StringFilter)(nil),                // 8: cbt.StringFilter
	(*NullableUInt64Filter)(nil),        // 9: cbt.NullableUInt64Filter
	(*UInt64Filter)(nil),                // 10: cbt.UInt64Filter
	(*NullableStringFilter)(nil),        // 11: cbt.NullableStringFilter
}
var file_int_block_mev_head_proto_depIdxs = []int32{
	5,  // 0: cbt.IntBlockMevHead.earliest_bid_date_time:type_name -> google.protobuf.UInt64Value
	6,  // 1: cbt.IntBlockMevHead.value:type_name -> google.protobuf.StringValue
	7,  // 2: cbt.ListIntBlockMevHeadRequest.slot_start_date_time:type_name -> cbt.UInt32Filter
	8,  // 3: cbt.ListIntBlockMevHeadRequest.block_root:type_name -> cbt.StringFilter
	7,  // 4: cbt.ListIntBlockMevHeadRequest.updated_date_time:type_name -> cbt.UInt32Filter
	7,  // 5: cbt.ListIntBlockMevHeadRequest.slot:type_name -> cbt.UInt32Filter
	7,  // 6: cbt.ListIntBlockMevHeadRequest.epoch:type_name -> cbt.UInt32Filter
	7,  // 7: cbt.ListIntBlockMevHeadRequest.epoch_start_date_time:type_name -> cbt.UInt32Filter
	9,  // 8: cbt.ListIntBlockMevHeadRequest.earliest_bid_date_time:type_name -> cbt.NullableUInt64Filter
	8,  // 9: cbt.ListIntBlockMevHeadRequest.parent_hash:type_name -> cbt.StringFilter
	10, // 10: cbt.ListIntBlockMevHeadRequest.block_number:type_name -> cbt.UInt64Filter
	8,  // 11: cbt.ListIntBlockMevHeadRequest.block_hash:type_name -> cbt.StringFilter
	8,  // 12: cbt.ListIntBlockMevHeadRequest.builder_pubkey:type_name -> cbt.StringFilter
	8,  // 13: cbt.ListIntBlockMevHeadRequest.proposer_pubkey:type_name -> cbt.StringFilter
	8,  // 14: cbt.ListIntBlockMevHeadRequest.proposer_fee_recipient:type_name -> cbt.StringFilter
	10, // 15: cbt.ListIntBlockMevHeadRequest.gas_limit:type_name -> cbt.UInt64Filter
	10, // 16: cbt.ListIntBlockMevHeadRequest.gas_used:type_name -> cbt.UInt64Filter
	11, // 17: cbt.ListIntBlockMevHeadRequest.value:type_name -> cbt.NullableStringFilter
	7,  // 18: cbt.ListIntBlockMevHeadRequest.transaction_count:type_name -> cbt.UInt32Filter
	0,  // 19: cbt.ListIntBlockMevHeadResponse.int_block_mev_head:type_name -> cbt.IntBlockMevHead
	0,  // 20: cbt.GetIntBlockMevHeadResponse.item:type_name -> cbt.IntBlockMevHead
	1,  // 21: cbt.IntBlockMevHeadService.List:input_type -> cbt.ListIntBlockMevHeadRequest
	3,  // 22: cbt.IntBlockMevHeadService.Get:input_type -> cbt.GetIntBlockMevHeadRequest
	2,  // 23: cbt.IntBlockMevHeadService.List:output_type -> cbt.ListIntBlockMevHeadResponse
	4,  // 24: cbt.IntBlockMevHeadService.Get:output_type -> cbt.GetIntBlockMevHeadResponse
	23, // [23:25] is the sub-list for method output_type
	21, // [21:23] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_int_block_mev_head_proto_init() }
func file_int_block_mev_head_proto_init() {
	if File_int_block_mev_head_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_int_block_mev_head_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IntBlockMevHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_mev_head_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListIntBlockMevHeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_mev_head_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListIntBlockMevHeadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_mev_head_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetIntBlockMevHeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_int_block_mev_head_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetIntBlockMevHeadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_int_block_mev_head_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_int_block_mev_head_proto_goTypes,
		DependencyIndexes: file_int_block_mev_head_proto_depIdxs,
		MessageInfos:      file_int_block_mev_head_proto_msgTypes,
	}.Build()
	File_int_block_mev_head_proto = out.File
	file_int_block_mev_head_proto_rawDesc = nil
	file_int_block_mev_head_proto_goTypes = nil
	file_int_block_mev_head_proto_depIdxs = nil
}
