syntax = "proto3";

package cbt;

import "common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Block proposers for the unfinalized chain. Forks in the chain may cause mulitple proposers for the same slot to be present

message IntBlockProposerHead {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11;
  // The slot number for which the proposer duty is assigned
  uint32 slot = 12;
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13;
  // The epoch number containing the slot
  uint32 epoch = 14;
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15;
  // The validator index of the proposer for the slot
  uint32 proposer_validator_index = 16;
  // The public key of the validator proposer
  string proposer_pubkey = 17;
  // The beacon block root hash
  google.protobuf.StringValue block_root = 18;
}

// ListIntBlockProposerHeadRequest is the request message for listing int_block_proposer__head records
message ListIntBlockProposerHeadRequest {
  // Filter by slot_start_date_time (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by proposer_validator_index (ORDER BY column 2 - optional)
  UInt32Filter proposer_validator_index = 2;

  // Filter by updated_date_time (optional)
  UInt32Filter updated_date_time = 3;

  // Filter by slot (optional)
  UInt32Filter slot = 4;

  // Filter by epoch (optional)
  UInt32Filter epoch = 5;

  // Filter by epoch_start_date_time (optional)
  UInt32Filter epoch_start_date_time = 6;

  // Filter by proposer_pubkey (optional)
  StringFilter proposer_pubkey = 7;

  // Filter by block_root (optional)
  NullableStringFilter block_root = 8;

  // The maximum number of int_block_proposer__head to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 10;
  // A page token, received from a previous `ListIntBlockProposerHead` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 11;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 12;
}

// ListIntBlockProposerHeadResponse is the response message for listing int_block_proposer__head records
message ListIntBlockProposerHeadResponse {
  // The list of int_block_proposer__head.
  repeated IntBlockProposerHead int_block_proposer__head = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// GetIntBlockProposerHeadRequest is the request message for getting a single int_block_proposer__head record by primary key
message GetIntBlockProposerHeadRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// GetIntBlockProposerHeadResponse is the response message for getting a single int_block_proposer__head record
message GetIntBlockProposerHeadResponse {
  IntBlockProposerHead item = 1;
}

// IntBlockProposerHeadService provides RPC methods for querying int_block_proposer__head data
service IntBlockProposerHeadService {
  // List returns paginated int_block_proposer__head records
  rpc List(ListIntBlockProposerHeadRequest) returns (ListIntBlockProposerHeadResponse);
  // Get returns a single int_block_proposer__head record by primary key
  rpc Get(GetIntBlockProposerHeadRequest) returns (GetIntBlockProposerHeadResponse);
}
