syntax = "proto3";

package cbt;

import "tagger/tagger.proto";
import "common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse";
// Block proposers for the finalized chain

message IntBlockProposerCanonical {
  // Timestamp when the record was last updated
  uint32 updated_date_time = 11 [(tagger.tags) = "ch:\"updated_date_time\""];
  // The slot number
  uint32 slot = 12 [(tagger.tags) = "ch:\"slot\""];
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 13 [(tagger.tags) = "ch:\"slot_start_date_time\""];
  // The epoch number containing the slot
  uint32 epoch = 14 [(tagger.tags) = "ch:\"epoch\""];
  // The wall clock time when the epoch started
  uint32 epoch_start_date_time = 15 [(tagger.tags) = "ch:\"epoch_start_date_time\""];
  // The validator index of the proposer for the slot
  uint32 proposer_validator_index = 16 [(tagger.tags) = "ch:\"proposer_validator_index\""];
  // The public key of the validator proposer
  string proposer_pubkey = 17 [(tagger.tags) = "ch:\"proposer_pubkey\""];
  // The beacon block root hash. Null if a slot was missed
  google.protobuf.StringValue block_root = 18 [(tagger.tags) = "ch:\"block_root\""];
}

// Request for listing int_block_proposer_canonical records
message ListIntBlockProposerCanonicalRequest {
  // Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required)
  UInt32Filter slot_start_date_time = 1;

  // Filter by updated_date_time - Timestamp when the record was last updated (optional)
  UInt32Filter updated_date_time = 2;
  // Filter by slot - The slot number (optional)
  UInt32Filter slot = 3;
  // Filter by epoch - The epoch number containing the slot (optional)
  UInt32Filter epoch = 4;
  // Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
  UInt32Filter epoch_start_date_time = 5;
  // Filter by proposer_validator_index - The validator index of the proposer for the slot (optional)
  UInt32Filter proposer_validator_index = 6;
  // Filter by proposer_pubkey - The public key of the validator proposer (optional)
  StringFilter proposer_pubkey = 7;
  // Filter by block_root - The beacon block root hash. Null if a slot was missed (optional)
  NullableStringFilter block_root = 8;

  // The maximum number of int_block_proposer_canonical to return.
  // If unspecified, at most 100 items will be returned.
  // The maximum value is 10000; values above 10000 will be coerced to 10000.
  int32 page_size = 9;
  // A page token, received from a previous `ListIntBlockProposerCanonical` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 10;
  // The order of results. Format: comma-separated list of fields.
  // Example: "foo,bar" or "foo desc,bar" for descending order on foo.
  // If unspecified, results will be returned in the default order.
  string order_by = 11;
}

// Response for listing int_block_proposer_canonical records
message ListIntBlockProposerCanonicalResponse {
  // The list of int_block_proposer_canonical.
  repeated IntBlockProposerCanonical int_block_proposer_canonical = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request for getting a single int_block_proposer_canonical record by primary key
message GetIntBlockProposerCanonicalRequest {
  // The wall clock time when the slot started
  uint32 slot_start_date_time = 1; // Primary key (required)
}

// Response for getting a single int_block_proposer_canonical record
message GetIntBlockProposerCanonicalResponse {
  IntBlockProposerCanonical item = 1;
}

// Query int_block_proposer_canonical data
service IntBlockProposerCanonicalService {
  // List records | Retrieve paginated results with optional filtering
  rpc List(ListIntBlockProposerCanonicalRequest) returns (ListIntBlockProposerCanonicalResponse);
  // Get record | Retrieve a single record by primary key
  rpc Get(GetIntBlockProposerCanonicalRequest) returns (GetIntBlockProposerCanonicalResponse);
}
