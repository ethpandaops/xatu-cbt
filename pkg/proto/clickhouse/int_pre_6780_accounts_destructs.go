// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for int_pre_6780_accounts_destructs

package clickhouse

import (
	"fmt"
)

// BuildListIntPre6780AccountsDestructsQuery constructs a parameterized SQL query from a ListIntPre6780AccountsDestructsRequest
func BuildListIntPre6780AccountsDestructsQuery(req *ListIntPre6780AccountsDestructsRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate that at least one primary key is provided
	// Primary keys can come from base table or projections
	if req.Address == nil {
		return SQLQuery{}, fmt.Errorf("primary key field address is required")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.Address.Filter.(type) {
	case *StringFilter_Eq:
		qb.AddCondition("address", "=", filter.Eq)
	case *StringFilter_Ne:
		qb.AddCondition("address", "!=", filter.Ne)
	case *StringFilter_Contains:
		qb.AddLikeCondition("address", "%" + filter.Contains + "%")
	case *StringFilter_StartsWith:
		qb.AddLikeCondition("address", filter.StartsWith + "%")
	case *StringFilter_EndsWith:
		qb.AddLikeCondition("address", "%" + filter.EndsWith)
	case *StringFilter_Like:
		qb.AddLikeCondition("address", filter.Like)
	case *StringFilter_NotLike:
		qb.AddNotLikeCondition("address", filter.NotLike)
	case *StringFilter_In:
		if len(filter.In.Values) > 0 {
			qb.AddInCondition("address", StringSliceToInterface(filter.In.Values))
		}
	case *StringFilter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			qb.AddNotInCondition("address", StringSliceToInterface(filter.NotIn.Values))
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: block_number
	if req.BlockNumber != nil {
		switch filter := req.BlockNumber.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("block_number", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("block_number", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("block_number", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("block_number", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("block_number", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("block_number", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("block_number", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("block_number", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("block_number", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: transaction_hash
	if req.TransactionHash != nil {
		switch filter := req.TransactionHash.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("transaction_hash", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("transaction_hash", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("transaction_hash", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("transaction_hash", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("transaction_hash", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("transaction_hash", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("transaction_hash", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("transaction_hash", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("transaction_hash", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: transaction_index
	if req.TransactionIndex != nil {
		switch filter := req.TransactionIndex.Filter.(type) {
		case *UInt64Filter_Eq:
			qb.AddCondition("transaction_index", "=", filter.Eq)
		case *UInt64Filter_Ne:
			qb.AddCondition("transaction_index", "!=", filter.Ne)
		case *UInt64Filter_Lt:
			qb.AddCondition("transaction_index", "<", filter.Lt)
		case *UInt64Filter_Lte:
			qb.AddCondition("transaction_index", "<=", filter.Lte)
		case *UInt64Filter_Gt:
			qb.AddCondition("transaction_index", ">", filter.Gt)
		case *UInt64Filter_Gte:
			qb.AddCondition("transaction_index", ">=", filter.Gte)
		case *UInt64Filter_Between:
			qb.AddBetweenCondition("transaction_index", filter.Between.Min, filter.Between.Max.GetValue())
		case *UInt64Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("transaction_index", UInt64SliceToInterface(filter.In.Values))
			}
		case *UInt64Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("transaction_index", UInt64SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	// Validate page size
	if req.PageSize < 0 {
		return SQLQuery{}, fmt.Errorf("page_size must be non-negative, got %d", req.PageSize)
	}
	if req.PageSize > 10000 {
		return SQLQuery{}, fmt.Errorf("page_size must not exceed %d, got %d", 10000, req.PageSize)
	}

	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"address", "block_number", "transaction_hash", "transaction_index"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY address" + ", block_number" + ", transaction_hash"
	}

	// Build column list
	columns := []string{"address", "block_number", "NULLIF(`transaction_hash`, repeat('\x00', 66)) AS `transaction_hash`", "transaction_index"}

	return BuildParameterizedQuery("int_pre_6780_accounts_destructs", columns, qb, orderByClause, limit, offset, options...)
}

// BuildGetIntPre6780AccountsDestructsQuery constructs a parameterized SQL query from a GetIntPre6780AccountsDestructsRequest
func BuildGetIntPre6780AccountsDestructsQuery(req *GetIntPre6780AccountsDestructsRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.Address == "" {
		return SQLQuery{}, fmt.Errorf("primary key field address is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("address", "=", req.Address)

	// Build ORDER BY clause
	orderByClause := " ORDER BY address, block_number, transaction_hash"

	// Build column list
	columns := []string{"address", "block_number", "NULLIF(`transaction_hash`, repeat('\x00', 66)) AS `transaction_hash`", "transaction_index"}

	// Return single record
	return BuildParameterizedQuery("int_pre_6780_accounts_destructs", columns, qb, orderByClause, 1, 0, options...)
}
