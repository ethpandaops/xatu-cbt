// Code generated by clickhouse-proto-gen. DO NOT EDIT.
// SQL query builder for mainnet.int_xatu_nodes__24h

package clickhouse

import (
	"fmt"
)

// BuildListIntXatuNodes24HQuery constructs a parameterized SQL query from a ListIntXatuNodes24HRequest
func BuildListIntXatuNodes24HQuery(req *ListIntXatuNodes24HRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.MetaClientName == nil {
		return SQLQuery{}, fmt.Errorf("primary key field meta_client_name is required")
	}

	// Build query using QueryBuilder
	qb := NewQueryBuilder()

	// Add primary key filter
	switch filter := req.MetaClientName.Filter.(type) {
	case *StringFilter_Eq:
		qb.AddCondition("meta_client_name", "=", filter.Eq)
	case *StringFilter_Ne:
		qb.AddCondition("meta_client_name", "!=", filter.Ne)
	case *StringFilter_Contains:
		qb.AddLikeCondition("meta_client_name", "%" + filter.Contains + "%")
	case *StringFilter_StartsWith:
		qb.AddLikeCondition("meta_client_name", filter.StartsWith + "%")
	case *StringFilter_EndsWith:
		qb.AddLikeCondition("meta_client_name", "%" + filter.EndsWith)
	case *StringFilter_Like:
		qb.AddLikeCondition("meta_client_name", filter.Like)
	case *StringFilter_NotLike:
		qb.AddNotLikeCondition("meta_client_name", filter.NotLike)
	case *StringFilter_In:
		if len(filter.In.Values) > 0 {
			qb.AddInCondition("meta_client_name", StringSliceToInterface(filter.In.Values))
		}
	case *StringFilter_NotIn:
		if len(filter.NotIn.Values) > 0 {
			qb.AddNotInCondition("meta_client_name", StringSliceToInterface(filter.NotIn.Values))
		}
	default:
		// Unsupported filter type
	}

	// Add filter for column: updated_date_time
	if req.UpdatedDateTime != nil {
		switch filter := req.UpdatedDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("updated_date_time", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("updated_date_time", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("updated_date_time", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("updated_date_time", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("updated_date_time", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("updated_date_time", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("updated_date_time", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("updated_date_time", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("updated_date_time", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: last_seen_date_time
	if req.LastSeenDateTime != nil {
		switch filter := req.LastSeenDateTime.Filter.(type) {
		case *UInt32Filter_Eq:
			qb.AddCondition("last_seen_date_time", "=", filter.Eq)
		case *UInt32Filter_Ne:
			qb.AddCondition("last_seen_date_time", "!=", filter.Ne)
		case *UInt32Filter_Lt:
			qb.AddCondition("last_seen_date_time", "<", filter.Lt)
		case *UInt32Filter_Lte:
			qb.AddCondition("last_seen_date_time", "<=", filter.Lte)
		case *UInt32Filter_Gt:
			qb.AddCondition("last_seen_date_time", ">", filter.Gt)
		case *UInt32Filter_Gte:
			qb.AddCondition("last_seen_date_time", ">=", filter.Gte)
		case *UInt32Filter_Between:
			qb.AddBetweenCondition("last_seen_date_time", filter.Between.Min, filter.Between.Max)
		case *UInt32Filter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("last_seen_date_time", UInt32SliceToInterface(filter.In.Values))
			}
		case *UInt32Filter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("last_seen_date_time", UInt32SliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: username
	if req.Username != nil {
		switch filter := req.Username.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("username", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("username", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("username", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("username", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("username", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("username", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("username", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("username", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("username", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: node_id
	if req.NodeId != nil {
		switch filter := req.NodeId.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("node_id", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("node_id", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("node_id", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("node_id", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("node_id", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("node_id", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("node_id", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("node_id", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("node_id", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: classification
	if req.Classification != nil {
		switch filter := req.Classification.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("classification", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("classification", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("classification", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("classification", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("classification", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("classification", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("classification", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("classification", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("classification", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_version
	if req.MetaClientVersion != nil {
		switch filter := req.MetaClientVersion.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_version", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_version", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_version", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_version", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_version", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_version", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_version", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_version", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_version", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_implementation
	if req.MetaClientImplementation != nil {
		switch filter := req.MetaClientImplementation.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_implementation", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_implementation", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_implementation", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_implementation", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_implementation", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_implementation", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_implementation", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_implementation", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_implementation", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_city
	if req.MetaClientGeoCity != nil {
		switch filter := req.MetaClientGeoCity.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_city", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_city", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_city", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_city", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_city", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_city", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_city", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_city", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_city", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_country
	if req.MetaClientGeoCountry != nil {
		switch filter := req.MetaClientGeoCountry.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_country", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_country", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_country", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_country", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_country", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_country", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_country", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_country", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_country", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_country_code
	if req.MetaClientGeoCountryCode != nil {
		switch filter := req.MetaClientGeoCountryCode.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_country_code", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_country_code", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_country_code", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_country_code", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_country_code", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_country_code", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_country_code", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_country_code", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_country_code", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_client_geo_continent_code
	if req.MetaClientGeoContinentCode != nil {
		switch filter := req.MetaClientGeoContinentCode.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_client_geo_continent_code", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_client_geo_continent_code", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_client_geo_continent_code", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_client_geo_continent_code", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_client_geo_continent_code", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_client_geo_continent_code", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_client_geo_continent_code", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_client_geo_continent_code", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_client_geo_continent_code", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_consensus_version
	if req.MetaConsensusVersion != nil {
		switch filter := req.MetaConsensusVersion.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_consensus_version", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_consensus_version", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_consensus_version", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_consensus_version", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_consensus_version", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_consensus_version", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_consensus_version", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_consensus_version", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_consensus_version", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Add filter for column: meta_consensus_implementation
	if req.MetaConsensusImplementation != nil {
		switch filter := req.MetaConsensusImplementation.Filter.(type) {
		case *StringFilter_Eq:
			qb.AddCondition("meta_consensus_implementation", "=", filter.Eq)
		case *StringFilter_Ne:
			qb.AddCondition("meta_consensus_implementation", "!=", filter.Ne)
		case *StringFilter_Contains:
			qb.AddLikeCondition("meta_consensus_implementation", "%" + filter.Contains + "%")
		case *StringFilter_StartsWith:
			qb.AddLikeCondition("meta_consensus_implementation", filter.StartsWith + "%")
		case *StringFilter_EndsWith:
			qb.AddLikeCondition("meta_consensus_implementation", "%" + filter.EndsWith)
		case *StringFilter_Like:
			qb.AddLikeCondition("meta_consensus_implementation", filter.Like)
		case *StringFilter_NotLike:
			qb.AddNotLikeCondition("meta_consensus_implementation", filter.NotLike)
		case *StringFilter_In:
			if len(filter.In.Values) > 0 {
				qb.AddInCondition("meta_consensus_implementation", StringSliceToInterface(filter.In.Values))
			}
		case *StringFilter_NotIn:
			if len(filter.NotIn.Values) > 0 {
				qb.AddNotInCondition("meta_consensus_implementation", StringSliceToInterface(filter.NotIn.Values))
			}
		default:
			// Unsupported filter type
		}
	}

	// Handle pagination per AIP-132
	var limit, offset uint32
	limit = 100 // Default page size
	if req.PageSize > 0 {
		limit = uint32(req.PageSize)
		if limit > 1000 {
			limit = 1000 // Maximum allowed
		}
	}
	if req.PageToken != "" {
		decodedOffset, err := DecodePageToken(req.PageToken)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid page_token: %w", err)
		}
		offset = decodedOffset
	}

	// Handle custom ordering if provided
	var orderByClause string
	if req.OrderBy != "" {
		validFields := []string{"updated_date_time", "last_seen_date_time", "username", "node_id", "classification", "meta_client_name", "meta_client_version", "meta_client_implementation", "meta_client_geo_city", "meta_client_geo_country", "meta_client_geo_country_code", "meta_client_geo_continent_code", "meta_consensus_version", "meta_consensus_implementation"}
		orderFields, err := ParseOrderBy(req.OrderBy, validFields)
		if err != nil {
			return SQLQuery{}, fmt.Errorf("invalid order_by: %w", err)
		}
		orderByClause = BuildOrderByClause(orderFields)
	} else {
		// Default sorting by primary key
		orderByClause = " ORDER BY meta_client_name"
	}

	return BuildParameterizedQuery("mainnet", "int_xatu_nodes__24h", qb, orderByClause, limit, offset, options...), nil
}

// BuildGetIntXatuNodes24HQuery constructs a parameterized SQL query from a GetIntXatuNodes24HRequest
func BuildGetIntXatuNodes24HQuery(req *GetIntXatuNodes24HRequest, options ...QueryOption) (SQLQuery, error) {
	// Validate primary key is provided
	if req.MetaClientName == "" {
		return SQLQuery{}, fmt.Errorf("primary key field meta_client_name is required")
	}

	// Build query with primary key condition
	qb := NewQueryBuilder()
	qb.AddCondition("meta_client_name", "=", req.MetaClientName)

	// Build ORDER BY clause
	orderByClause := " ORDER BY meta_client_name"

	// Return single record
	return BuildParameterizedQuery("mainnet", "int_xatu_nodes__24h", qb, orderByClause, 1, 0, options...), nil
}
