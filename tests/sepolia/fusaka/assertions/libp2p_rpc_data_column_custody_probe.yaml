- name: Row count should be greater than zero
  sql: |
    SELECT
      COUNT(*) AS count
    FROM
      cluster('{remote_cluster}', default.libp2p_rpc_data_column_custody_probe)
  assertions:
    - type: greater_than
      column: count
      value: 0

- name: Slot bounds should match test data range (8771000-8773000)
  sql: |
    SELECT
      MIN(slot) AS min_slot,
      MAX(slot) AS max_slot
    FROM
      cluster('{remote_cluster}', default.libp2p_rpc_data_column_custody_probe)
  assertions:
    - type: greater_than_or_equal
      column: min_slot
      value: 8771000
    - type: less_than_or_equal
      column: max_slot
      value: 8773000

- name: Column index should be in valid range (0-127)
  sql: |
    SELECT
      MIN(column_index) AS min_col,
      MAX(column_index) AS max_col
    FROM
      cluster('{remote_cluster}', default.libp2p_rpc_data_column_custody_probe)
  assertions:
    - type: greater_than_or_equal
      column: min_col
      value: 0
    - type: less_than_or_equal
      column: max_col
      value: 127

- name: Result field should contain valid values
  sql: |
    SELECT
      COUNT(*) AS count
    FROM
      cluster('{remote_cluster}', default.libp2p_rpc_data_column_custody_probe)
    WHERE
      result NOT IN ('success', 'failed', 'error')
  assertions:
    - type: equal
      column: count
      value: 0

- name: Network should be sepolia
  sql: |
    SELECT
      COUNT(DISTINCT meta_network_name) AS unique_networks
    FROM
      cluster('{remote_cluster}', default.libp2p_rpc_data_column_custody_probe)
  assertions:
    - type: equal
      column: unique_networks
      value: 1
